<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/</description>
	<atom:link rel="self" href="http://planeteclipse.org/rss20.xml" type="application/rss+xml"/>

<item>
	<title>Mike Milinkovich: 2020 Trends in IoT, Edge, and AI Development</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1557</guid>
	<link>https://eclipse-foundation.blog/2020/10/19/2020-trends-in-iot-edge-and-ai-development/</link>
	<description>&lt;p&gt;The results of our 2020 IoT Developer Survey are in, revealing a number of interesting trends that will impact all IoT ecosystem players. Whether you’re a technology manufacturer, a service provider, an enterprise adopter of IoT solutions, or an individual developer, this year’s survey results provide insight that will help you better understand how developers’ choices are impacting IoT strategies and businesses.&lt;/p&gt;



&lt;p&gt;This year, more than 1,650 individuals from a broad range of industries and organizations around the globe responded to the IoT Developer Survey and I want to thank them for their time. Their valuable input will help ensure the&lt;a href=&quot;https://iot.eclipse.org/&quot;&gt; Eclipse IoT Working Group&lt;/a&gt; and the&lt;a href=&quot;https://edgenative.eclipse.org/&quot;&gt; Eclipse Edge Native Working Group&lt;/a&gt; continue to focus on developers’ top priorities for cloud-to-edge IoT solution development.&lt;/p&gt;



&lt;p&gt;Here are just a few of the highlights.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Smart Agriculture Is the New Industry Focus Area&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;One of the most significant findings in this year’s survey is that smart agriculture is now the top IoT industry focus area, jumping from 21 percent in our 2019 IoT Developer Survey to 26 percent this year.&lt;/p&gt;



&lt;p&gt;IoT-based solutions are increasingly being used to boost yields, lower costs, reduce waste, and achieve other efficiencies on farm and dairy enterprises, as well as within food processing plants. Optimizing food production is vital to every country in the world, and a quick internet search on the topic confirms our survey results reflect the overall growth in the global agriculture IoT market.&lt;/p&gt;



&lt;p&gt;Interestingly, last year’s top industry focus, home automation, dropped significantly in this year’s survey. At 19 percent, this category fell behind industrial automation, education, automotive, and smart cities, which tied for second place at 21 percent.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Artificial Intelligence Is the Top Choice for Edge Computing Workloads&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;IoT and edge computing are intrinsically linked, so it was natural to include questions related to edge computing technologies in this year’s IoT Developer Survey.&lt;/p&gt;



&lt;p&gt;Notably, the results show that developers are now more focused on artificial intelligence (AI). AI was the most frequently selected edge computing workload at 30 percent. However, other applications follow closely behind:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;Control logic: 29 percent&lt;/li&gt;&lt;li&gt;Data exchange: 27 percent&lt;/li&gt;&lt;li&gt;Data aggregation and filtering (sensor fusion): 27 percent&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;The relatively even rankings among these four options confirm they’re all being actively used for edge computing workloads. It will be interesting to see how their usage evolves over time and how quickly AI adoption progresses.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;IoT Is Synonymous With Open Source&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;The survey results also reveal that 65 percent of respondents experiment with, use, or contribute to open source projects. In the database domain, open source almost completely dominates with only four percent of survey respondents relying on a proprietary database. These are very strong endorsements of the value developers see in open source software for IoT solutions.&lt;/p&gt;



&lt;p&gt;At the Eclipse Foundation, we’re experiencing first-hand the momentum toward open source software in IoT.&lt;/p&gt;



&lt;p&gt;Over the last few years, the Eclipse Foundation IoT community has grown to become one of the largest open source collaborations in the world with 45 projects, 350+ contributors, 40+ corporate members, and more than eight million lines of code produced. Eclipse IoT projects have been adopted by some of the world’s leading companies, including Bosch, Red Hat, Eurotech, and many others, to deliver commercial IoT solutions and services. &lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Get the Complete Survey Results&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;The findings I’ve highlighted here provide just a small glimpse into this year’s IoT Developer Survey results. I encourage everyone to download the full 2020 IoT Developer Survey results to gain additional insight into:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;The top IoT developer concerns&lt;/li&gt;&lt;li&gt;The most widely used security techniques in IoT and the growing momentum of distributed ledger technologies&lt;/li&gt;&lt;li&gt;The most widely used programming languages for IoT solutions&lt;/li&gt;&lt;li&gt;The top edge computing artifacts and deployment choices&lt;/li&gt;&lt;li&gt;The top IoT middleware choices&lt;/li&gt;&lt;li&gt;The top public IoT and cloud platforms&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;&lt;a href=&quot;https://outreach.eclipse.foundation/eclipse-iot-developer-survey-2020&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Download the 2020 IoT Developer Survey results.&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Get Involved in Eclipse IoT Communities&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;To stay current with the happenings in the&lt;a href=&quot;https://iot.eclipse.org/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt; Eclipse IoT Working Group&lt;/a&gt;, join the mailing list&lt;a href=&quot;https://accounts.eclipse.org/mailing-list/iot-wg&quot;&gt; here&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;To join the&lt;a href=&quot;https://edgenative.eclipse.org/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt; Eclipse Edge Native Working Group&lt;/a&gt; conversation on Slack, click&lt;a href=&quot;https://eclipse-edge-wg.slack.com/join/shared_invite/enQtODI2NjY0MTgxODI1LTU3ODA0NDgxN2E3ZTFlNDlkOTI3N2FlZmQ5MjhmYTY3MWRkNjMxZjAyNWE2MjlhMGM1YTQ1YjdjOTBkOTEyYmU#/&quot;&gt; here&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 19 Oct 2020 13:08:56 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Immutable Collections in Java using Sealed Types</title>
	<guid isPermaLink="false">https://medium.com/p/ae8eb580fc1e</guid>
	<link>https://medium.com/javarevisited/immutable-collections-in-java-using-sealed-types-ae8eb580fc1e?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;How to define contractual, structural, and verifiable immutable Java collections.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/966/1*ZHUMcJS2IO6GpjTckpFODw.png&quot; /&gt;&lt;figcaption&gt;Designing Immutable Collection using Sealed Types in JDK 15&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Introducing Sealed Types&lt;/h3&gt;&lt;p&gt;JDK 15 was released on September 15, 2020. &lt;a href=&quot;https://openjdk.java.net/jeps/360&quot;&gt;JEP 360 &lt;/a&gt;Sealed Types was included as a preview feature in this release. Sealed Types is part of &lt;a href=&quot;https://openjdk.java.net/projects/amber/&quot;&gt;Project Amber&lt;/a&gt;. Sealed classes or interfaces can be used to restrict the interfaces or classes that are allowed to extend them. This is accomplished by using the sealed, non-sealed, and permits modifiers.&lt;/p&gt;&lt;h3&gt;What is contractual immutability?&lt;/h3&gt;&lt;p&gt;An interface or class is contractually immutable if the available public methods do not allow an instance to be mutated after it is constructed. A contractually &lt;a href=&quot;https://javarevisited.blogspot.com/2018/02/java-9-example-factory-methods-for-collections-immutable-list-set-map.html&quot;&gt;immutable collection&lt;/a&gt; should not expose methods like add, addAll, remove, removeAll, clear and a mutable Iterator . These methods are available on the Collection, List and Set types in Java. Immutable collections that implement these interfaces are not contractually immutable.&lt;/p&gt;&lt;h3&gt;What is structural immutability?&lt;/h3&gt;&lt;p&gt;An object is structurally immutable if all of its data members are &lt;a href=&quot;https://javarevisited.blogspot.com/2012/10/difference-between-private-protected-public-package-access-java.html#axzz6JDcu0RhH&quot;&gt;private&lt;/a&gt;, &lt;a href=&quot;https://javarevisited.blogspot.com/2016/09/21-java-final-modifier-keyword-interview-questions-answers.html&quot;&gt;final&lt;/a&gt;, and cannot be modified after the object is constructed. String is a great example of a class in Java that is structurally immutable. Once a String is constructed, it cannot be changed. Immutable objects like String sometimes have mutable counterparts like StringBuilder.&lt;/p&gt;&lt;h3&gt;What is verifiable immutability?&lt;/h3&gt;&lt;p&gt;A class or interface is verifiably immutable if all of the implementations are contractually and structurally immutable, and are restricted to a specific set of classes that can be verified. This is a capability that can now be more easily achieved via Sealed Types in JDK 15. With Sealed Types a developer can restrict the implementations of interfaces and classes to a specified set of types.&lt;/p&gt;&lt;h3&gt;A Perfect Use Case for Sealed Types in Java&lt;/h3&gt;&lt;p&gt;Immutable collection implementations for Java are available in the Java Collections Framework (since JDK 9), Google Guava and Eclipse Collections. None of the immutable collection alternatives provide the combination of &lt;em&gt;structural&lt;/em&gt;, &lt;em&gt;contractual&lt;/em&gt; and &lt;em&gt;verifiable&lt;/em&gt; immutability today.&lt;/p&gt;&lt;h4&gt;Java 9+&lt;/h4&gt;&lt;p&gt;There are &lt;em&gt;structurally&lt;/em&gt; immutable collections available in the Java Collection Framework via List.of(), Set.of(), Map.of(). The JDK immutable collections are not &lt;em&gt;contractually&lt;/em&gt; immutable, because they implement the mutable List, Set, Map interfaces.&lt;/p&gt;&lt;h4&gt;Google Guava&lt;/h4&gt;&lt;p&gt;Guava has collection types that are &lt;em&gt;structurally&lt;/em&gt; immutable, but not &lt;em&gt;contractually&lt;/em&gt; immutable. The immutable collections in Guava implement the mutable JDK interfaces — List, Set, Map. Guava restricts the implementations of the immutable collection types by using abstract classes with package private constructors, which require all implementations to be in the same package. This restriction is a novel design approach and a key component of &lt;em&gt;verifiable&lt;/em&gt; immutability, but is still lacking &lt;em&gt;contractual&lt;/em&gt; immutability.&lt;/p&gt;&lt;h4&gt;Eclipse Collections&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; has collection types that are both &lt;em&gt;contractually&lt;/em&gt; and &lt;em&gt;structurally&lt;/em&gt; immutable. Unfortunately, there is no way in Java 8 to restrict the implementations of interfaces like ImmutableCollection, ImmutableList, ImmutableSet so that &lt;em&gt;verifiable&lt;/em&gt; immutability can be provided. It is possible to implement the ImmutableCollection interface and its subtypes outside of Eclipse Collections because they are public interfaces. Theoretically, a “bad actor” may implement the ImmutableCollection interface and pass a mutable implementation to a method call expecting an ImmutableCollection. In practice, it is doubtful that this would be an issue, but the potential does exist.&lt;/p&gt;&lt;h4&gt;Sealed Types&lt;/h4&gt;&lt;p&gt;The Sealed Types preview in JDK 15 gives developers the capability to finally provide the trifecta of &lt;em&gt;contractual&lt;/em&gt;, &lt;em&gt;structural&lt;/em&gt; and &lt;em&gt;verifiable&lt;/em&gt; immutability in a collections framework. Using the Sealed Types preview feature, we can restrict the implementations of an ImmutableCollection interface using the sealed and permits modifiers.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*dvOIPu_CihVoGRP4fHPmHA.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Similarly, we can restrict the implementations of ImmutableList.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*md3mIyCP9X7pW27LXecENA.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;The ImmutableEmptyList implementation of ImmutableList is then declared as final.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*UN6RGrWzg-fhPvixzfWdUw.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Experimenting with Sealed Types in JDK 15 has been interesting and encouraging. I wish this feature was available a decade ago when we first defined the ImmutableCollection hierarchy in Eclipse Collections. I’ve been able to extend the design ideas that we implemented in Eclipse Collections years ago with a feature that provides a more restrictive modeling capability.&lt;/p&gt;&lt;h4&gt;The Deck of Cards Kata: Custom Collections&lt;/h4&gt;&lt;p&gt;The source code for an experimental implementation of a collections framework can be found in the &lt;a href=&quot;https://github.com/BNYMellon/CodeKatas/tree/master/deck-of-cards-kata&quot;&gt;Deck of Cards Kata repo&lt;/a&gt;. The Deck of Cards Kata can be taken to become familiar with multiple collections frameworks including the latest versions of the Java Collections + Streams framework, Apache Commons Collections, Google Guava and Eclipse Collections.&lt;/p&gt;&lt;p&gt;The custom collections framework interfaces and implementations can be browsed online &lt;a href=&quot;https://github.com/BNYMellon/CodeKatas/tree/master/deck-of-cards-kata/src/main/java/bnymellon/codekatas/deckofcards/custom/collections&quot;&gt;here&lt;/a&gt;. The following class diagram shows the interfaces in the framework, including the immutable collection interfaces that leverage Sealed Types.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*pW5H0RibKuIayUWpu3Zq1g.png&quot; /&gt;&lt;figcaption&gt;A Custom Collections framework in the Deck of Cards Kata&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The experimental collections framework in the kata has been evolving to use &lt;a href=&quot;https://openjdk.java.net/projects/amber/&quot;&gt;Project Amber&lt;/a&gt; features as they become available as preview features in the JDK. The kata was upgraded to JDK 15 the day it was released. The framework now uses the following features from Project Amber:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Local Variable Type Inference (&lt;a href=&quot;https://openjdk.java.net/jeps/286&quot;&gt;JEP 286&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Pattern Matching for instanceof (&lt;a href=&quot;https://openjdk.java.net/jeps/375&quot;&gt;JEP 375&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Sealed Types (&lt;a href=&quot;https://openjdk.java.net/jeps/360&quot;&gt;JEP 360&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In addition, default methods and static interface methods are used extensively to build the rich interfaces in the framework.&lt;/p&gt;&lt;h3&gt;A vision for the future of Java Collections&lt;/h3&gt;&lt;p&gt;The custom collection framework was initially developed to explore and demonstrate what it would be like to have eager methods directly on mutable collection interfaces using API names similar to &lt;a href=&quot;https://javarevisited.blogspot.com/2018/08/top-5-java-8-courses-to-learn-online.html&quot;&gt;Java Streams&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The intent was to use the latest features available in the most current releases of Java where they were proved useful. The latest evolution shows what is possible by leveraging Sealed Types to implement immutable collection types. I’m quite encouraged by the results of the feature so far. I hope that this use case can be used and discussed as an example of the practical applicability of the Sealed Types feature.&lt;/p&gt;&lt;p&gt;The following blogs explain the evolution of the custom collections framework design over the past six months.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/javarevisited/java-streams-are-great-but-its-time-for-better-java-collections-42d2c04235d1&quot;&gt;Java Streams are great but it’s time for better Java Collections&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/javarevisited/eager-is-easy-lazy-is-labyrinthine-b12605f13048&quot;&gt;Eager is Easy, Lazy is Labyrinthine&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I hope you found this blog useful. Check out the source code and give the Deck of Cards kata and other code katas included in the repo a try.&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am a Project Lead and Committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=ae8eb580fc1e&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/immutable-collections-in-java-using-sealed-types-ae8eb580fc1e&quot;&gt;Immutable Collections in Java using Sealed Types&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/javarevisited&quot;&gt;Javarevisited&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Sun, 18 Oct 2020 06:15:16 +0000</pubDate>
</item>
<item>
	<title>Melanie Bats: T-4:00 OCP is ready to go</title>
	<guid isPermaLink="true">http://localhost:4000/2020/10/17/ocp/</guid>
	<link>http://localhost:4000/2020/10/17/ocp/</link>
	<description>&lt;p&gt;Atop the Sirius-II Mission’s rocket is the Obeo Cloud Platform (OCP), with two flavors – OCP Modeler and OCP Publication – safely strapped inside.
The Obeo Cloud Platform is built as an open-core product relying on the open source Eclipse Sirius project (EPL 2.0 licence) and more precisely on the Sirius Web component. As I explained in my previous post, Sirius Web is a framework from Obeo for building cloud graphical modelers for a dedicated DSL.&lt;/p&gt;

&lt;h2 id=&quot;ocp-publication&quot;&gt;OCP Publication&lt;/h2&gt;

&lt;p&gt;OCP Publication exposes models in a read-only mode for fast access from OSLC clients or web browsers. The first version of this product is ready to be deployed to our customers at the end of October.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://melb.enix.org/img/sirius-web/OCP_Publication.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the first use cases we developed allows us to reunite two of our chosen fields: Capella and model servers, it is Publication For Capella. Publication for Capella provides a tight integration between OSLC-compliant ALM tools (Polarion, Doors Next…) and the MBSE workbench Capella. It enables a fine grained traceability between your requirements and your system design.&lt;/p&gt;

&lt;h2 id=&quot;ocp-modeler&quot;&gt;OCP Modeler&lt;/h2&gt;

&lt;p&gt;OCP Modeler is a unique technology to easily develop custom and state-of-the-art modeling tools to be deployed to the Cloud.
The Obeo Cloud Platform Modeler is a Sirius Web build extended with Enterprise features, to deploy on public, private clouds or on premise and including support and upgrade guarantees.
The Obeo Cloud Platform provides collaborative features: authentication, live collaboration, webhooks…&lt;/p&gt;



&lt;p&gt;To get more details, attend the OCP Modeler’s launch on &lt;a href=&quot;https://www.eclipsecon.org/2020/sessions/sirius-web-100-open-source-cloud-modeling-platform&quot;&gt;October 21 at 2:00 p.m CET&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Sat, 17 Oct 2020 10:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Hi Dennis, thank you for the questions.</title>
	<guid isPermaLink="false">https://medium.com/p/ba856d7df5ef</guid>
	<link>https://medium.com/@donraab/hi-dennis-thank-you-for-the-questions-ba856d7df5ef?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Hi Dennis, thank you for the questions.&lt;/p&gt;&lt;p&gt;This is an experiment looking at how a new ImmutableCollection hierarchy could be designed from scratch using the Sealed Types preview feature in the JDK. Yes, this would restrict all implementations of ImmutableCollection and prevent any user definable implementations.&lt;/p&gt;&lt;p&gt;That said, I doubt this could ever be an evolutionary path for ImmutableCollection in Eclipse Collections, for several reasons.&lt;/p&gt;&lt;p&gt;1. We will be compiling with Java 8 for quite a while, and the next upgrade for EC when it happens will likely be to Java 11.&lt;/p&gt;&lt;p&gt;2. Eclipse Collections separates its API and Impl in different packages and separate jar files. This feature requires interfaces to know about implementations, so I can't see how that could ever work for Eclipse Collections.&lt;/p&gt;&lt;p&gt;3. Eclipse Collections has been around for nine years with the ImmutableCollection hierarchy as public interfaces. It's safe to assume, someone somewhere who uses the library has already implemented these interfaces.&lt;/p&gt;&lt;p&gt;This ship has sailed for Eclipse Collections. We made our design decisions for ImmutableCollection a long long time ago. We wanted to provide contractually and structurally immutable collections, and did not want to prevent others from defining their own. This is a trust based model.&lt;/p&gt;&lt;p&gt;I still believe Java needs a Collections 2.0, so experimenting with the latest features in the JDK, which would be naturally available to a library included in the JDK, is helpful on a few fronts.&lt;/p&gt;&lt;p&gt;Hope this answers your questions.&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=ba856d7df5ef&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 15 Oct 2020 17:36:58 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.9.4 released!</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-9-4-released</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-3-9-4-released</link>
	<description>&lt;article&gt;&lt;p&gt;We are extremely pleased to announce that the Eclipse Vert.x version 3.9.4 has been released.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.9.4, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.4-Release-Notes&quot;&gt;3.9.4 release notes&lt;/a&gt; can be found on the wiki, as well as the
list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.9.4-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.9.4%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.9.4/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thatâ€™s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: Eclipse Che vs. VS Code (online|codespaces)</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=43689</guid>
	<link>https://eclipsesource.com/blogs/2020/10/14/eclipse-che-vs-vs-code-onlinecodespaces/</link>
	<description>&lt;p&gt;Have you heard about Eclipse Che and wonder how it compares to VS Code Online or “VS Code Codespaces”? What are...&lt;/p&gt;&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2020/10/14/eclipse-che-vs-vs-code-onlinecodespaces/&quot; rel=&quot;nofollow&quot;&gt;Eclipse Che vs. VS Code (online|codespaces)&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 14 Oct 2020 12:39:15 +0000</pubDate>
</item>
<item>
	<title>Melanie Bats: T-8:00 1st stage Sirius Web loading begins</title>
	<guid isPermaLink="true">http://localhost:4000/2020/10/13/sirius-web/</guid>
	<link>http://localhost:4000/2020/10/13/sirius-web/</link>
	<description>&lt;p&gt;Source code is flowing into the first stage of the Obeo rocket. Our goal is to bring the spirit of Sirius into a new technological space : Sirius Web is the Cloud-based evolution of Sirius, 100% Open Source.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://melb.enix.org/img/sirius-web/SiriusWebTimeline.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Sirius Web engine combines the open source components EMF-JSON &amp;amp; Sirius Components. These components will be available under the Sirius project : &lt;a href=&quot;http://eclipse.org/sirius&quot;&gt;http://eclipse.org/sirius&lt;/a&gt;, with the source code on Github :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;EMF-JSON&lt;/strong&gt; is a small library to serialize EMF models to JSON,&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Sirius Components&lt;/strong&gt; repository provides backend and frontend components&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Sirius Web&lt;/strong&gt; repository combines the open source Sirius components to provide a graphical modeler sample application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://melb.enix.org/img/sirius-web/SiriusWebArchitecture.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-do-you-create-a-cloud-ready-modeler-based-on-sirius-web&quot;&gt;How do you create a cloud-ready modeler based on Sirius Web?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Define your metamodel thanks to EMF.&lt;/li&gt;
  &lt;li&gt;Provide a Sirius configuration to specify the mapping between the different concepts of your DSL and how they should be represented graphically.&lt;/li&gt;
  &lt;li&gt;Register the metamodel &amp;amp; the Sirius specification in the Sirius Web application.&lt;/li&gt;
  &lt;li&gt;Build and launch the application!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;http://melb.enix.org/img/sirius-web/SiriusWebServer.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a result, you get a graphical modeler dedicated to your DSL rendered in your browser.&lt;/p&gt;



&lt;p&gt;To get more details about Sirius Web and how to run it for your own DSL, attend Obeoâ€™s rocket liftoff.
Launch remains on schedule for &lt;a href=&quot;https://www.eclipsecon.org/2020/sessions/sirius-web-100-open-source-cloud-modeling-platform&quot;&gt;October 21 at 2:00 p.m CET&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 13 Oct 2020 10:00:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2020-09</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/12.17.0.ga.html</guid>
	<link>https://tools.jboss.org/blog/12.17.0.ga.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/2020-09/4.17.0.Final.html&quot;&gt;JBoss Tools 4.17.0&lt;/a&gt; and
      &lt;a href=&quot;https://tools.jboss.org/downloads/devstudio/2020-09/12.17.0.GA.html&quot;&gt;Red Hat CodeReady Studio 12.17&lt;/a&gt;
      for Eclipse 2020-09 are here waiting for you. Check it out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;crstudio12&quot; src=&quot;https://tools.jboss.org/blog/images/crstudio12.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href=&quot;https://developers.redhat.com/products/codeready-studio/overview/&quot;&gt;Red Hat CodeReady product page&lt;/a&gt; and run it like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -jar codereadystudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release requires at least Eclipse 4.17 (2020-09) but we recommend
      using the latest &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2020-09/r/eclipse-ide-enterprise-java-developers&quot;&gt;Eclipse 4.17 2020-06 JEE Bundle&lt;/a&gt;
      since then you get most of the dependencies preinstalled.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock warning&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So make sure to select a Java11 JDK in the installer.
      You can still work with pre-Java11 JDK/JRE and projects in the tool.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &quot;JBoss Tools&quot; or &quot;Red Hat CodeReady Studio&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;http://download.jboss.org/jbosstools/photon/stable/updates/&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is new?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our main focus for this release was an improved tooling for the Quarkus framework, improvements for container based development and bug fixing.
      Eclipse 2020-09 itself has a lot of new cool stuff but let me highlight just a few updates in both Eclipse 2020-09 and JBoss Tools plugins that I think are worth mentioning.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#openshift&quot;&gt;&lt;/a&gt;OpenShift&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-container-platform-4-6-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#openshift-container-platform-4-6-support&quot;&gt;&lt;/a&gt;OpenShift Container Platform 4.6 support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With the new OpenShift Container Platform (OCP) 4.6 now available, JBoss Tools
      is compatible with this major release in a transparent way. Just define your
      connection to your OCP 4.6 based cluster as you did before for an OCP 3 cluster,
      and use the tooling !&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#quarkus&quot;&gt;&lt;/a&gt;Quarkus&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;support-for-yaml-configuration-file&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#support-for-yaml-configuration-file&quot;&gt;&lt;/a&gt;Support for YAML configuration file&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Quarkus supports configuration through YAML format. For more information,
      see the &lt;a href=&quot;https://quarkus.io/guides/config#yaml&quot;&gt;Quarkus documentation&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In order to use it, follow the steps:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;create a Quarkus project using the new Quarkus wizard&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;create a new &lt;code&gt;application.yaml&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; next to the &lt;code&gt;application.properties&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The editor will open and you will get content assist and syntax validation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#server-tools&quot;&gt;&lt;/a&gt;Server Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;wildfly-21-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#wildfly-21-server-adapter&quot;&gt;&lt;/a&gt;Wildfly 21 Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A server adapter has been added to work with Wildfly 21. It adds support for
      Java EE 8, Jakarta EE 8 and Microprofile 3.3.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;hibernate-runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#hibernate-runtime-provider-updates&quot;&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime  providers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#runtime-provider-updates&quot;&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.4 runtime provider now incorporates Hibernate Core version 5.4.21.Final and Hibernate Tools version 5.4.21.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.3 runtime provider now incorporates Hibernate Core version 5.3.18.Final and Hibernate Tools version 5.3.18.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;platform&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#platform&quot;&gt;&lt;/a&gt;Platform&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;views-dialogs-and-toolbar&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#views-dialogs-and-toolbar&quot;&gt;&lt;/a&gt;Views, Dialogs and Toolbar&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;adjustable-view-fonts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#adjustable-view-fonts&quot;&gt;&lt;/a&gt;Adjustable view fonts&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The font used for tree and table views can now be customized with a font preference. This preference is called &quot;Tree and Table font for views&quot; and can be found in Window &amp;gt; Preferences &amp;gt; General &amp;gt; Appearance &amp;gt; Colors and Fonts under the &quot;View and Editor Folders&quot; category.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;adjustable view font preference&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/adjustable-view-font-preference.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Project Explorer is an example of a view that gets affected by this font preference.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;adjustable view font&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/adjustable-view-font.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;remove-gifs-from-views&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#remove-gifs-from-views&quot;&gt;&lt;/a&gt;Remove gifs from views&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Several years ago, the icons of the platform views were migrated to .png files. As already opened views store their reference to the image, the .gif files were left in the code. These have been removed now. If you are using the same workspace for multiple years and view icons are missing due to that removal, you have to close and reopen the view.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;default-changed-for-confirm-on-exit-for-last-window&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#default-changed-for-confirm-on-exit-for-last-window&quot;&gt;&lt;/a&gt;Default changed for confirm on exit for last window&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;By default, Eclipse now closes if you select the close icon on the last window without additional confirmation dialog. If you want to get a confirmation dialog, you can enable that via Window &amp;gt; Preferences &amp;gt; General &amp;gt; Startup and Shutdown &amp;gt; Confirm exit when closing last window.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;workbench-models-created-in-releases-before-2014-are-not-automatically-converted&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#workbench-models-created-in-releases-before-2014-are-not-automatically-converted&quot;&gt;&lt;/a&gt;Workbench models created in releases before 2014 are not automatically converted&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Workbench models (workbench.xmi) stored in workspaces created with releases before 2014 and never opened with a later release are not automatically converted anymore if opened with the 2020-09 release.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;text-editors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#text-editors&quot;&gt;&lt;/a&gt;Text Editors&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;multiple-last-edit-locations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#multiple-last-edit-locations&quot;&gt;&lt;/a&gt;Multiple Last Edit Locations&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Previous Edit Location&lt;/strong&gt; navigation (formerly named Last Edit Location) is now expanded to remember multiple edit locations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The last 15 edit locations are now remembered. For convenience, similar edit locations in close proximity to each other are also merged so that each of the 15 remembered locations remains distinct.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;multiple last edit locations&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/multiple-last-edit-locations.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;How to use&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Two new keyboard shortcuts are introduced:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; (or on Mac &lt;strong&gt;Ctrl+Opt+LEFT_ARROW&lt;/strong&gt;) navigates to the most recent edit location, just as &lt;strong&gt;Ctrl+Q&lt;/strong&gt; always has in prior releases.&lt;/p&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;However, now continuing to hold &lt;strong&gt;Ctrl+Alt&lt;/strong&gt; and then pressing &lt;strong&gt;LEFT_ARROW&lt;/strong&gt; again begins a traversal through the history of prior edit locations, with each additional press of &lt;strong&gt;LEFT_ARROW&lt;/strong&gt; moving a step further back in history. Once traversal stops, future &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; actions are now temporarily anchored to this older historical location for easy exploration of that code region.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The classic &lt;strong&gt;Ctrl+Q&lt;/strong&gt; mapping has been likewise enhanced with this new functionality, so that &lt;strong&gt;Ctrl+Q&lt;/strong&gt; and &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; are synonymous.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Ctrl+Alt+RIGHT_ARROW&lt;/strong&gt; (or on Mac &lt;strong&gt;Ctrl+Opt+RIGHT_ARROW&lt;/strong&gt;) conversely moves the anchor forward through edit history, so after traversing backward with &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt;, you can go forward again by holding &lt;strong&gt;Ctrl+Alt&lt;/strong&gt; and repeatedly pressing &lt;strong&gt;RIGHT_ARROW&lt;/strong&gt;. A new menu item has likewise been added for this forward navigation as well.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;New edit locations are always inserted at the end, so original historical ordering is always maintained. New edits also reset the last location &quot;anchor&quot; back to the most recent edit, so that pressing &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; once again brings you to the most recent edit rather than a historical one.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;printing-editor-content-adds-date-in-header&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#printing-editor-content-adds-date-in-header&quot;&gt;&lt;/a&gt;Printing editor content adds date in header&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Printing editor content now includes the current date in addition to the filename in the header of each printed page.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;print header date&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/print-header-date.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;themes-and-styling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#themes-and-styling&quot;&gt;&lt;/a&gt;Themes and Styling&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;improved-gtk-light-theme&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#improved-gtk-light-theme&quot;&gt;&lt;/a&gt;Improved GTK light theme&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The GTK light theme has been updated to align better with the default GTK3 Adwaita theme.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Old:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;gtk light old&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/gtk-light-old.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;New:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;gtk light new&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/gtk-light-new.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;windows-menus-are-styled-in-the-dark-theme&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#windows-menus-are-styled-in-the-dark-theme&quot;&gt;&lt;/a&gt;Windows menus are styled in the dark theme&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;SWT now natively styles the menu under Windows in the dark theme.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Old:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;menu background old&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/menu-background-old.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;New:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;menu background dark&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/menu-background-dark.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;dropbox-boxes-combos-are-styled-under-windows-in-the-dark-theme&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#dropbox-boxes-combos-are-styled-under-windows-in-the-dark-theme&quot;&gt;&lt;/a&gt;Dropbox boxes (Combos) are styled under Windows in the dark theme&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;SWT now natively styles drop-down boxes under Windows in the dark theme.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Old:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;combo win32 dark old&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/combo-win32-dark-old.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;New:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;combo win32 dark new&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/combo-win32-dark-new.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;selection-highlighter-for-dark-theme&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#selection-highlighter-for-dark-theme&quot;&gt;&lt;/a&gt;Selection highlighter for dark theme&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The active tab selection highlighter has been enabled for Eclipse’s default dark themes. This will help users identify which tab is active at a glance.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;dark selection highlighter&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/dark-selection-highlighter.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;selection-highlighter-for-tables-under-windows-in-the-dark-theme&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#selection-highlighter-for-tables-under-windows-in-the-dark-theme&quot;&gt;&lt;/a&gt;Selection highlighter for tables under Windows in the dark theme&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;SWT now natively supports selection highlighter in tables under Windows in the dark theme.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;selection highlight&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/selection-highlight.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;debug&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#debug&quot;&gt;&lt;/a&gt;Debug&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;filter-null-bytes-from-console-output&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#filter-null-bytes-from-console-output&quot;&gt;&lt;/a&gt;Filter null bytes from console output&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The interpretation of ASCII control characters in the &lt;strong&gt;Console View&lt;/strong&gt; was extended to recognize the characters: &lt;code&gt;\0&lt;/code&gt; - null byte. If interpretation is enabled, any null byte will be stripped and not shown in console view. This is most relevant for the Linux platform where a null byte in console view causes anything after it on the same line to be not rendered.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This feature is disabled by default. You can enable it on the &lt;strong&gt;Run/Debug &amp;gt; Console&lt;/strong&gt; preference page.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;general-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#general-updates&quot;&gt;&lt;/a&gt;General Updates&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;builds-for-linux-aarch64-aka-arm64-added&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#builds-for-linux-aarch64-aka-arm64-added&quot;&gt;&lt;/a&gt;Builds for Linux AArch64 (aka Arm64) added&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Binaries for Linux AArch64 (Arm64) are available for testing. With the raising popularity of this architecture people can continue using the Eclipse IDE even when changing their machine.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;java-developement-tools-jdt&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-developement-tools-jdt&quot;&gt;&lt;/a&gt;Java Developement Tools (JDT)&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-15-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-15-support&quot;&gt;&lt;/a&gt;Java 15 Support&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;java-15&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-15&quot;&gt;&lt;/a&gt;Java 15&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Java 15 is out and Eclipse JDT supports Java 15 for 4.17 via Marketplace.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The release notably includes the following Java 15 features:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;JEP 378: Text Blocks (Standard).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;JEP 384: Records (Second Preview).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;JEP 375: Pattern Matching for Instanceof (Second Preview).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;JEP 360: Sealed Classes (Preview).&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Please note that preview option should be on for preview language features. For an informal introduction of the support, please refer to &lt;a href=&quot;https://wiki.eclipse.org/Java15/Examples&quot;&gt;Java 15 Examples wiki&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;junit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#junit&quot;&gt;&lt;/a&gt;JUnit&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;collapse-all-nodes-in-junit-view&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#collapse-all-nodes-in-junit-view&quot;&gt;&lt;/a&gt;Collapse all nodes in JUnit view&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JUnit view now provides a context-menu option to collapse all nodes:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;junit collapse all&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/junit-collapse-all.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;sort-test-results-by-execution-time&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#sort-test-results-by-execution-time&quot;&gt;&lt;/a&gt;Sort test results by execution time&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JUnit view now provides the ability to sort results by execution time. By default, results will be sorted by execution order. Choosing &lt;strong&gt;Sort By &amp;gt; Execution Time&lt;/strong&gt; from the &lt;strong&gt;JUnit View&lt;/strong&gt; menu will reorder the results once all tests are complete. While tests are still running, they will be shown in execution order.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;junit sort time before&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/junit-sort-time-before.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Sorting by execution order results in:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;junit sort time after&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/junit-sort-time-after.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-editor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-editor&quot;&gt;&lt;/a&gt;Java Editor&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;substring-subword-matches-for-types&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#substring-subword-matches-for-types&quot;&gt;&lt;/a&gt;Substring/Subword matches for types&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Content Assist now fully supports both substring and subword matches for types:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;substring types&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/substring-types.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Substring matches are always shown and subword matches can be enabled/disabled with the existing &lt;strong&gt;Show subword matches&lt;/strong&gt; option on the &lt;strong&gt;Java &amp;gt; Editor &amp;gt; Content Assist&lt;/strong&gt; preference page.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;optimization-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#optimization-tab&quot;&gt;&lt;/a&gt;Optimization tab&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new tab has been added that gathers cleanups that improve the time performance: the existing lazy operator cleanup and the regex precompiler cleanup.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;regex preferences&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/regex-preferences.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;objects-equals&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#objects-equals&quot;&gt;&lt;/a&gt;Objects.equals()&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new clean up has been added that makes use of &lt;code&gt;Objects.equals()&lt;/code&gt; to implement the &lt;code&gt;equals(Object)&lt;/code&gt; method.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It reduces the code and improves the reading. The cleanup is only available for Java 7 or higher. Although this kind of comparison is almost exclusively seen in the &lt;code&gt;equals(Object)&lt;/code&gt; method, it can also reduce code in other methods.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To select the clean up, invoke &lt;strong&gt;Source &amp;gt; Clean Up…​&lt;/strong&gt;, use a custom profile, and on the &lt;strong&gt;Configure…​&lt;/strong&gt; dialog select &lt;strong&gt;Use Objects.equals() in the equals method implementation&lt;/strong&gt; on the &lt;strong&gt;Unnecessary Code&lt;/strong&gt; tab.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;objects equals preferences&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/objects-equals-preferences.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For the given code:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;objects equals before&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/objects-equals-before.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You get this after the clean up:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;objects equals after&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/objects-equals-after.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;precompiles-the-regular-expressions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#precompiles-the-regular-expressions&quot;&gt;&lt;/a&gt;Precompiles the regular expressions&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new clean up has been added that optimizes the regular expression execution by precompiling it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It replaces some usages of &lt;code&gt;java.lang.String&lt;/code&gt; by usages of &lt;code&gt;java.util.regex.Pattern&lt;/code&gt;. The cleanup is done only if it is sure that the string is used as a regular expression. If there is any doubt, nothing is done. The regular expression must be explicitly used several times to be sure the cleanup is useful.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To select the clean up, invoke &lt;strong&gt;Source &amp;gt; Clean Up…​&lt;/strong&gt;, use a custom profile, and on the &lt;strong&gt;Configure…​&lt;/strong&gt; dialog select &lt;strong&gt;Precompiles reused regular expressions&lt;/strong&gt; on the &lt;strong&gt;Optimization&lt;/strong&gt; tab.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;regex preferences&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/regex-preferences.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For the given code:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;regex before&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/regex-before.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You get this after the clean up:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;regex after&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/regex-after.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;string-format-quickfix&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#string-format-quickfix&quot;&gt;&lt;/a&gt;String.format quickfix&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new quickfix has been added to replace string concatenation with &lt;code&gt;String.format&lt;/code&gt;, similar to the existing ones for &lt;code&gt;StringBuilder&lt;/code&gt; and &lt;code&gt;MessageFormat&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;String.format quickfix&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/String.format-quickfix.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;method-reference-quickfix&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#method-reference-quickfix&quot;&gt;&lt;/a&gt;Method reference quickfix&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new quickfix has been added to create missing methods for method references.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;strong&gt;Current restriction is that this quickfix is only available on current class&lt;/strong&gt;.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Expect current implementation to work on simple cases only&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Method references invoking nested generics or type parameters might be problematic to resolve correct&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;methodreference 1&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/methodreference_1.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-views-and-dialog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-views-and-dialog&quot;&gt;&lt;/a&gt;Java Views and Dialog&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;toggle-code-minings-from-find-actions-menu&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#toggle-code-minings-from-find-actions-menu&quot;&gt;&lt;/a&gt;Toggle Code Minings From Find Actions Menu&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The code minings within an editor can be enabled/disabled through the Find Actions menu (&lt;strong&gt;Ctrl+3&lt;/strong&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;toggle code minings&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/toggle-code-minings.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-formatter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-formatter&quot;&gt;&lt;/a&gt;Java Formatter&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;assert-statement-wrapping&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#assert-statement-wrapping&quot;&gt;&lt;/a&gt;Assert statement wrapping&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new setting in the Formatter profile controls &lt;strong&gt;line wrapping of assert statements&lt;/strong&gt;. A line wrap can be added between the assert condition and its error message. The setting can be found in the &lt;strong&gt;Profile Editor (Preferences &amp;gt; Java &amp;gt; Code Style &amp;gt; Formatter &amp;gt; Edit…​&lt;/strong&gt;) in the &lt;strong&gt;Line Wrapping &amp;gt; Wrapping Settings &amp;gt; Statemtens &amp;gt; 'assert' messages&lt;/strong&gt; node.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;formatter wrap assert&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/formatter-wrap-assert.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;debug-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#debug-2&quot;&gt;&lt;/a&gt;Debug&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;anonymous-class-instance-in-evaluation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#anonymous-class-instance-in-evaluation&quot;&gt;&lt;/a&gt;Anonymous class instance in evaluation&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;strong&gt;JDT debugger&lt;/strong&gt; is now capable of inspecting/evaluating expressions with anonymous class instances.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;anon instance inspection code&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/anon-instance-inspection-code.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;anon instance inspection&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/anon-instance-inspection.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;jep-358-helpful-nullpointerexceptions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#jep-358-helpful-nullpointerexceptions&quot;&gt;&lt;/a&gt;JEP 358: Helpful NullPointerExceptions&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;strong&gt;JDT debugger&lt;/strong&gt; has now a checkbox option to activate the command line support for JEP 358. This is disabled below Java 14 and enabled by default for Java programs launched with Java 14 and above.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;-XX:+ShowCodeDetailsInExceptionMessages&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;helpfulNullPointerExceptions&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/helpfulNullPointerExceptions.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JVM is now capable of analyzing which variable was null at the point of NullPointerException and describe the variable with a null-detail message in the NPE.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;actual-type-in-variables-view&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#actual-type-in-variables-view&quot;&gt;&lt;/a&gt;Actual type in Variables view&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The option &lt;strong&gt;Show Type Names&lt;/strong&gt; in the &lt;strong&gt;Variables&lt;/strong&gt; and &lt;strong&gt;Expressions&lt;/strong&gt; views now displays the value’s actual type instead of its declared type. This simplifies debugging especially when variable details (&lt;code&gt;toString()&lt;/code&gt;) is shown &lt;strong&gt;As the label for all variables&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To enable &lt;strong&gt;Show Type Names&lt;/strong&gt; in the &lt;strong&gt;Variables&lt;/strong&gt; view, column mode must be disabled (&lt;strong&gt;View Menu &amp;gt; Layout &amp;gt; Show Columns&lt;/strong&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Example:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;Object s = &quot;some string&quot;;
      	Collection&amp;lt;?&amp;gt; c = Arrays.asList(s, 1);
      	// breakpoint&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;variables actual type&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.17/images/variables-actual-type.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;and-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#and-more&quot;&gt;&lt;/a&gt;And more…​&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more noteworthy updates in on &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.17.0.Final.html&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#what-is-next&quot;&gt;&lt;/a&gt;What is next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Having JBoss Tools 4.17.0 and Red Hat CodeReady Studio 12.17 out we are already working on the next release.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 13 Oct 2020 09:57:16 +0000</pubDate>
</item>
<item>
	<title>Tom Schindl: e(fx)clipse 3.7.0 is released</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=5309</guid>
	<link>https://tomsondev.bestsolution.at/2020/10/12/efxclipse-3-7-0-is-released/</link>
	<description>&lt;p&gt;We are happy to announce that e(fx)clipse 3.7.0 has been released. This release contains the following repositories/subprojects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;runtime-shared: &lt;a href=&quot;https://download.eclipse.org/efxclipse/runtime-shared-released/3.7.0/&quot; rel=&quot;nofollow&quot;&gt;https://download.eclipse.org/efxclipse/runtime-shared-released/3.7.0/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;runtime: &lt;a href=&quot;https://download.eclipse.org/efxclipse/runtime-released/3.7.0/&quot; rel=&quot;nofollow&quot;&gt;https://download.eclipse.org/efxclipse/runtime-released/3.7.0/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;tooling: &lt;a href=&quot;https://download.eclipse.org/efxclipse/updates-released/3.7.0/&quot; rel=&quot;nofollow&quot;&gt;https://download.eclipse.org/efxclipse/updates-released/3.7.0/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are almost no new features (eg the new &lt;a href=&quot;https://tomsondev.bestsolution.at/2020/09/16/browser-like-boxshadow-for-javafx-coming-with-efxclipse-3-7-0/&quot;&gt;boxshadow&lt;/a&gt;) but only bugfixes who are very important if you use OpenJFX in an OSGi-Environment.&lt;/p&gt;
&lt;p&gt;For those of you who already use our pom-First approache the new bits have been pushed to &lt;a href=&quot;https://maven.bestsolution.at/efxclipse-releases/&quot; rel=&quot;nofollow&quot;&gt;https://maven.bestsolution.at/efxclipse-releases/&lt;/a&gt; and the Sample application at &lt;a href=&quot;https://github.com/BestSolution-at/e4-efxclipse-maven-sample/tree/efxclipse-3.7.0&quot; rel=&quot;nofollow&quot;&gt;https://github.com/BestSolution-at/e4-efxclipse-maven-sample/tree/efxclipse-3.7.0&lt;/a&gt; has been updated to use the latest release.&lt;/p&gt;</description>
	<pubDate>Mon, 12 Oct 2020 18:50:27 +0000</pubDate>
</item>
<item>
	<title>itemis: Getting started with Eclipse GEF – the Mindmap Tutorial</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/getting-started-with-eclipse-gef-the-mindmap-tutorial</guid>
	<link>https://blogs.itemis.com/en/getting-started-with-eclipse-gef-the-mindmap-tutorial</link>
	<description>&lt;p&gt;The &lt;a href=&quot;https://www.eclipse.org/gef/&quot; title=&quot;Link to eclipse.org (opens in a new tab)&quot;&gt;Eclipse Graphical Editing Framework&lt;/a&gt; is a toolkit to create graphical Java applications either integrated in Eclipse or standalone. The most common use of the framework is to develop diagram editors, like a simple Mindmap editor we will create in the &lt;a href=&quot;https://info.itemis.com/en/gef/tutorials/&quot; title=&quot;Link to GEF Online Tutorials (opens in a new tab)&quot;&gt;GEF Mindmap Tutorial series&lt;/a&gt;. Currently, the tutorial consists of 6 parts and all together 19 steps. They are structured as follows:&lt;/p&gt;  
&lt;div&gt;
 &lt;img alt=&quot;gef_mindmap_tutorial&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog%20(2020)/Getting%20started%20with%20Eclipse%20GEF%20%E2%80%93%20the%20Mindmap%20Tutorial/gef_mindmap_tutorial.png?width=960&amp;amp;name=gef_mindmap_tutorial.png&quot; style=&quot;width: 960px;&quot; width=&quot;960&quot; /&gt;
&lt;/div&gt; 
&lt;h2&gt;Part I – The Foundations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Step 1: Preparing the development environment&lt;/li&gt; 
 &lt;li&gt;Step 2: Creating the model&lt;/li&gt; 
 &lt;li&gt;Step 3: Defining the visuals&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Part II – GEF MVC&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Step 4: Creating the GEF parts&lt;/li&gt; 
 &lt;li&gt;Step 5: Models, policies and behaviors&lt;/li&gt; 
 &lt;li&gt;Step 6: Moving and resizing a node&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Part III – Adding nodes and connections&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Step 7: Undo and redo operations&lt;/li&gt; 
 &lt;li&gt;Step 8: Creating new nodes&lt;/li&gt; 
 &lt;li&gt;Step 9: Creating connections&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Part IV – Modifying and removing nodes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Step 10: Deleting nodes (1)&lt;/li&gt; 
 &lt;li&gt;Step 11: Modifying nodes&lt;/li&gt; 
 &lt;li&gt;Step 12: Creating feedback&lt;/li&gt; 
 &lt;li&gt;Step 13: Deleting nodes (2)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Part V – Creating an Eclipse editor&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Step 14: Creating an Eclipse editor&lt;/li&gt; 
 &lt;li&gt;Step 15: Undo, redo, select all and delete in Eclipse&lt;/li&gt; 
 &lt;li&gt;Step 16: Contributing toolbar actions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Part VI – Automatic layouting&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Step 17: Automatic layouting via GEF layout&lt;/li&gt; 
 &lt;li&gt;Step 18: Automatic layouting via Graphviz DOT&lt;/li&gt; 
 &lt;li&gt;Step 19: Automatic layouting via the Eclipse Layout Kernel&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can register for the tutorial series using the link below. The article &lt;a href=&quot;https://blogs.itemis.com/en/after-eight-eclipse-development-with-java-and-javafx&quot; title=&quot;Link to our blog article - After eight: How to set up Eclipse tool development with OpenJDK, GEF, and OpenJFX for newer Java versions (opens in a new tab)&quot;&gt;How to set up Eclipse tool development with OpenJDK, GEF, and OpenJFX&lt;/a&gt; describes the necessary steps to properly set up your development environment.&lt;/p&gt; 
&lt;p&gt;Your feedback regarding the Mindmap Tutorial (and the Eclipse GEF project in general) is highly appreciated. If you have any questions or suggestions, please let us know via the &lt;a href=&quot;https://www.eclipse.org/forums/index.php?t=thread&amp;amp;frm_id=81&quot; title=&quot;Link to Eclipse Community Forums (opens in a new tab)&quot;&gt;Eclipse GEF forum&lt;/a&gt;, or create an issue on &lt;a href=&quot;https://bugs.eclipse.org/bugs/describecomponents.cgi?product=GEF&quot; title=&quot;Link to Eclipse Bugzilla (opens in a new tab)&quot;&gt;Eclipse Bugzilla&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For further information, we recommend to take a look at the &lt;a href=&quot;https://blogs.itemis.com/topic/gef&quot; title=&quot;Link to our Eclipse GEF blog articles (opens in a new tab)&quot;&gt;Eclipse GEF blog articles&lt;/a&gt; and watch the &lt;a href=&quot;https://www.youtube.com/watch?v=GnSVLNYfGlk&quot; title=&quot;Link to Eclipse GEF session on the EclipseCon Europe 2018 (opens in a new tab)&quot;&gt;Eclipse GEF session on the EclipseCon Europe 2018&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fgetting-started-with-eclipse-gef-the-mindmap-tutorial&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 12 Oct 2020 06:00:00 +0000</pubDate>
	<author>miklossy@itemis.de (Tamas Miklossy)</author>
</item>
<item>
	<title>Nikhil Nanivadekar: Eclipse Collections 10.4.0 Released</title>
	<guid isPermaLink="false">https://medium.com/p/7c5b3f43c0f0</guid>
	<link>https://medium.com/oracledevs/eclipse-collections-10-4-0-released-7c5b3f43c0f0?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*RI7GnqLwdn-pic6lUm153A.jpeg&quot; /&gt;&lt;figcaption&gt;View of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Grinnell_Glacier&quot;&gt;Grinnell Glacier&lt;/a&gt; from overlook point after a grueling 9 mile hike&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;This is a release which we had not planned for, but we released it nonetheless.&lt;/p&gt;&lt;p&gt;This must be the first time since we open sourced Eclipse Collections that we performed two releases within the same month.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Changes in Eclipse Collections 10.4.0&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;There are only 2 changes in the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/10.4.0&quot;&gt;10.4.0 release&lt;/a&gt; compared to the feature rich &lt;a href=&quot;https://medium.com/oracledevs/eclipse-collections-10-3-released-1ee8ea3cf6e1&quot;&gt;10.3.0 release&lt;/a&gt; viz.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Added CharAdapter.isEmpty(), CodePointAdapter.isEmpty(), CodePointList.isEmpty(), as JDK-15 introduced CharSequence.isEmpty().&lt;/li&gt;&lt;li&gt;Fixed Javadoc errors.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;strong&gt;Why was release 10.4.0 necessary?&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;In today’s rapid deployment world, it should not be a novel aspect that a project performs multiple releases. However, the Eclipse Collections maintainer team, performs releases when one or more of the below criteria are satisfied:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;A bulk of features are ready to be released&lt;/li&gt;&lt;li&gt;A user requests a release for their use case&lt;/li&gt;&lt;li&gt;JDK-EA compatibility is breaking&lt;/li&gt;&lt;li&gt;It has been more than 6 months that a version is released&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The Eclipse Collections 10.4.0 release was necessary due to point #3. Eclipse Collections participates in the &lt;a href=&quot;https://wiki.openjdk.java.net/display/quality/Quality+Outreach&quot;&gt;Quality Outreach&lt;/a&gt; program of Open JDK. As a part of this program the library is expected to test the Early Access (EA) versions of Java and identify potential issues in the library or the JDK. I had missed setting up the JDK-15-EA builds until after Eclipse Collections 10.3.0 was released. After setting up the JDK-15-EA builds on 16 August 2020, I found compiler issues in the library due to &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8215401&quot;&gt;isEmpty()&lt;/a&gt; added as a default method on CharSequence. &lt;a href=&quot;https://twitter.com/stuartmarks&quot;&gt;Stuart Marks&lt;/a&gt; has written an &lt;a href=&quot;https://stuartmarks.wordpress.com/2020/09/22/incompatibilities-with-jdk-15-charsequence-isempty/&quot;&gt;in-depth blog&lt;/a&gt; of why this new default method broke compatibility. So, we had 2 options, let the library not be compatible with JDK-15, or release a new version with the fix. The Eclipse Collections team believes in supporting Java versions from Java 8 to Java-EA. After release 10.3.0, we had opened a new major version target (11.0.0), but the changes required did not warrant a new major version. So, we decided to release 10.4.0 with the fixes to support JDK-15. Eclipse Collections 10.4.0 release is compatible with JDK-15 and JDK-16-EA.&lt;/p&gt;&lt;h3&gt;Thank you&lt;/h3&gt;&lt;p&gt;To the vibrant and supportive Eclipse Collections community on behalf of contributors, committers, and maintainers for using Eclipse Collections. We hope you enjoy &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/10.4.0&quot;&gt;Eclipse Collections 10.4.0&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am a Project Lead and Committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Show your support, &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/stargazers&quot;&gt;&lt;em&gt;star us on GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Resources:&lt;/strong&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; comes with it’s own implementations of &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/list/mutable/FastList.html&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/set/mutable/UnifiedSet.html&quot;&gt;Set&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/map/mutable/UnifiedMap.html&quot;&gt;Map&lt;/a&gt;. It also has additional data structures like &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;Multimap&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; and an entire Primitive Collections hierarchy. Each of our collections have a rich API for commonly required iteration patterns.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Source code on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md#eclipse-collections-reference-guide&quot;&gt;Reference Guide&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;em&gt;Photo of the blog: I took the photo after hiking to the Grinnell Glacier overlook point. It was a strenuous hike, but the view from up top made it worth it. I picked this photo, to elaborate the sense of accomplishment after completing a release in a short amount of time.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=7c5b3f43c0f0&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/eclipse-collections-10-4-0-released-7c5b3f43c0f0&quot;&gt;Eclipse Collections 10.4.0 Released&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Groundbreakers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Fri, 09 Oct 2020 20:36:19 +0000</pubDate>
</item>
<item>
	<title>Thabang Mashologu: Eclipse ioFog Wins IoT Edge Computing Excellence Award</title>
	<guid isPermaLink="false">6864 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/thabang-mashologu/eclipse-iofog-wins-iot-edge-computing-excellence-award</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;Edge computing has become one of the most transformative technologies in the world. Rapid advancements in AI, IoT, and 5G solutions are being enabled through edge computing architectures. As a recognized leader in open source technologies, the Eclipse Foundation has made edge computing an important focus area through our &lt;a href=&quot;https://iot.eclipse.org/&quot;&gt;Eclipse IoT Working Group&lt;/a&gt; and &lt;a href=&quot;https://edgenative.eclipse.org/&quot;&gt;Edge Native Working Group&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, we’re proud to announce that &lt;a href=&quot;https://iofog.org/&quot;&gt;Eclipse ioFog&lt;/a&gt; was recognized with the &lt;a href=&quot;https://www.iotevolutionworld.com/newsroom/articles/446803-iot-evolution-world-announces-winners-the-2020-iot.htm&quot;&gt;IoT Edge Computing Excellence award&lt;/a&gt; from IoT Evolution. &lt;/p&gt;

&lt;p&gt;“The Edge of the network is increasingly the home of real-time, actionable intelligence in the IoT, and the IoT industry needs to develop excellence at the Edge in order to fulfill its potential,” said Ken Briodagh, editorial director for IoT Evolution. “In selecting the winners, it is easy to see why these companies and their solutions have risen to the top.”&lt;/p&gt;

&lt;p&gt;Started with an initial contribution from &lt;a href=&quot;https://edgeworx.io/&quot;&gt;Edgeworx&lt;/a&gt;, ioFog is a fully mature and widely used open source platform designed specifically for the edge. Unlike other open source edge computing projects that primarily consist of roadmaps and specifications, it is a commercial-grade production-ready platform offering a readily available open source solution that enterprises and service providers can use immediately to build new applications and services. &lt;/p&gt;

&lt;p&gt;ioFog aims to simplify and optimize edge development by bringing cloud native architectures to the edge. This approach enables developers to easily manage, orchestrate, and deploy microservices to any edge in the cloud-to-edge continuum. ioFog also provides a true cloud-to-edge solution by seamlessly integrating with Kubernetes, enabling Kubernetes to orchestrate microservices all the way down to the edge.&lt;/p&gt;

&lt;p&gt;Congratulations and a big thanks go to the Eclipse ioFog &lt;a href=&quot;https://projects.eclipse.org/projects/iot.iofog/who&quot;&gt;project team&lt;/a&gt; led by Edgeworx CEO and Project Lead Kilton Hopkins!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img alt=&quot;&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/users/user160/IoT_Edge_Computing_20.png&quot; style=&quot;height: 259px; width: 525px;&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/iofog&quot;&gt;ioFog&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/edge&quot;&gt;edge&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/edge-computing&quot;&gt;edge computing&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/eclipse-iot-0&quot;&gt;Eclipse IoT&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/edge-native&quot;&gt;Edge Native&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/awards&quot;&gt;awards&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 09 Oct 2020 20:06:15 +0000</pubDate>
</item>
<item>
	<title>Eclipse Ditto: Asynchronous Client Creation in Ditto Java Client 1.3.0</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2020-10-08-asynchronous-client-creation.html</guid>
	<link>https://www.eclipse.org/ditto/2020-10-08-asynchronous-client-creation.html</link>
	<description>&lt;p&gt;Before &lt;a href=&quot;https://github.com/eclipse/ditto-clients/tree/master/java&quot;&gt;Ditto Java Client&lt;/a&gt; 1.3.0,
a client object connects to a configured Ditto back-end during its creation.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// create a client object and block until it connects to the Ditto back-end.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DittoClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DittoClients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messagingProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are several problems with the approach.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The calling thread blocks waiting for IO, namely the authentication process
and establishment of a websocket.&lt;/li&gt;
  &lt;li&gt;If the client is configured to reconnect, then an incorrect end-ponit configuration
makes the factory method block forever.&lt;/li&gt;
  &lt;li&gt;If the client is not configured to reconnect, then the factory method will throw
an exception. But it is not possible to give the client reference to the exception
handler, since the client creation did not complete. Consequently the exception handler
has no simple way to free all resources allocated for the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1.3.0 addresses these problems by introducing an asynchronous client creation interface.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DittoClients&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DisconnectedDittoClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newDisconnectedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessagingProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DisconnectedDittoClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;CompletionStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DittoClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The method &lt;code class=&quot;highlighter-rouge&quot;&gt;DittoClients.newDisconnectedInstance(MessagingProvider)&lt;/code&gt; creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;DisconnectedDittoClient&lt;/code&gt;
object. The &lt;code class=&quot;highlighter-rouge&quot;&gt;DisconnectedDittoClient&lt;/code&gt; has references to all resources allocated for the client and
can free them via the &lt;code class=&quot;highlighter-rouge&quot;&gt;destroy()&lt;/code&gt; method. The &lt;code class=&quot;highlighter-rouge&quot;&gt;DisconnectedDittoClient&lt;/code&gt; object offers no method to
interact with the Ditto API. By calling &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt;, one obtains a future that yields a familiar
&lt;code class=&quot;highlighter-rouge&quot;&gt;DittoClient&lt;/code&gt; object upon completion. One might use the asynchronous client creation interface thus:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DisconnectedDittoClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disconnectedClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DittoClients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newDisconnectedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messagingProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;disconnectedClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startUsingDittoClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exceptionally&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handleConnectionFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;disconnectedClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The asynchronous client creation interface has the following advantages.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The calling thread does not block.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Even if configured to reconnect, the user can receive connection errors via
the connection error handler in &lt;code class=&quot;highlighter-rouge&quot;&gt;MessagingConfiguration&lt;/code&gt; and shut down the client
at will.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When initial reconnection is disabled, the method &lt;code class=&quot;highlighter-rouge&quot;&gt;DisconnectedDittoClient.connect()&lt;/code&gt;
returns a failed future on connection error. It is possible to reference the
&lt;code class=&quot;highlighter-rouge&quot;&gt;DittoDisconnectedClient&lt;/code&gt; object in the future’s error handler, where the client can
be destroyed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Patrick Paulin: Using Dependency Injection in RCP 3 Views and Editors</title>
	<guid isPermaLink="false">https://modumind.com/?p=4574</guid>
	<link>https://modumind.com/2020/10/06/using-dependency-injection-in-rcp-3-views-and-editors/</link>
	<description>&lt;p&gt;Most of the teams I work with are creating &lt;em&gt;hybrid&lt;/em&gt; Eclipse RCP applications, meaning that they’re working with a combination of the base RCP 4 platform and the Compatibility Layer which supports the traditional extension points and frameworks that the Eclipse IDE itself is based on.&lt;/p&gt;



&lt;p&gt;But in these hybrid applications, there is still a lot of opportunity to use newer RCP 4 features, such as:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;Dependency Injection&lt;/li&gt;&lt;li&gt;Lifecycle annotations&lt;/li&gt;&lt;li&gt;A live workbench model based on EMF&lt;/li&gt;&lt;li&gt;CSS styling&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;In this post, I want to focus on some very simple ways to incorporate dependency injection into RCP 3 style views and editors.&lt;/p&gt;



&lt;h3&gt;Using a part site to access the Eclipse context&lt;/h3&gt;



&lt;p&gt;Dependency injection in Eclipse RCP is supported by a context (basically a map) that contains all of the objects that may potentially be injected. This ranges from workbench model elements (&lt;code&gt;MPart&lt;/code&gt;, &lt;code&gt;MWindow&lt;/code&gt;, etc) to OSGi services provided by the framework or by your own team.&lt;/p&gt;



&lt;p&gt;In RCP 3 parts that extend &lt;code&gt;ViewPart&lt;/code&gt; or &lt;code&gt;EditorPart&lt;/code&gt;, it’s very easy to access this context programmatically using a part’s &lt;code&gt;site&lt;/code&gt;. Essentially, these blocks of code do very similar things.&lt;/p&gt;


&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;MPart part = getSite().getService(MPart.class);

MyOsgiService myService = getSite().getService(MyOsgiService.class);
&lt;/pre&gt;

&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;@Import
private MPart part;

@Import
private MyOsgiService myService;
&lt;/pre&gt;


&lt;p&gt;Once you have access to the context in this way, you can do things like:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;Use workbench model elements such as &lt;code&gt;MPart&lt;/code&gt; to store persisted state. For those of you working with mementos, try working with &lt;code&gt;MPart.getPersistedState()&lt;/code&gt; instead.&lt;/li&gt;&lt;li&gt;Move away from &lt;code&gt;Activator&lt;/code&gt;-based access to resources and in particular OSGi services. If your Activators are full of &lt;code&gt;ServiceTracker&lt;/code&gt;s and accessors for OSGi services, you can now directly access these services in your parts.&lt;/li&gt;&lt;/ul&gt;



&lt;h2&gt;Using @Inject directly in RCP 3 views (and editors)&lt;/h2&gt;



&lt;p&gt;While using a part’s site to access the context is a simple way to get started, it’s also possible to use the &lt;code&gt;@Inject&lt;/code&gt; annotation directly in RCP 3 parts. For views, this functionality has been available since Oxygen.&lt;/p&gt;



&lt;p&gt;To make an RCP 3 view (extending &lt;code&gt;ViewPart&lt;/code&gt;) injectable, you’ll need to set the &lt;code&gt;inject&lt;/code&gt; attribute for the view extension. &lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;wp-image-4577&quot; height=&quot;339&quot; src=&quot;https://modumind.com/wp-content/uploads/2020/10/injectable-view.png&quot; width=&quot;761&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;Once that is done, you can use DI normally for instance variables and for regular methods. DI is not available for constructors.&lt;/p&gt;



&lt;p&gt;Also, though this attribute is only available for views, it’s also possible to turn on injection for editors by adding the following lines of code to your &lt;code&gt;init&lt;/code&gt; method.&lt;/p&gt;


&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;MPart part = site.getService(MPart.class);
part.getTags().add(IWorkbenchConstants.TAG_USE_DEPENDENCY_INJECTION);
&lt;/pre&gt;


&lt;h3&gt;Wrapping up&lt;/h3&gt;



&lt;p&gt;This is not meant to be an exhaustive description of how to use dependency injection with the Compatibility Layer. Other mechanisms include the e4 Bridge, the &lt;code&gt;e4view&lt;/code&gt; element of the views extension point, and using RCP 4-style model fragments. Each of these more advanced mechanisms has trade-offs, but if you want to move in the direction of creating true POJO-style RCP 4 parts, they’re worth looking into. &lt;/p&gt;



&lt;p&gt;But if you’re looking for a simple way to access the Eclipse context or use dependency injection without refactoring your existing code too much, I think the mechanisms described here are the best approach.&lt;/p&gt;</description>
	<pubDate>Tue, 06 Oct 2020 19:47:34 +0000</pubDate>
</item>
<item>
	<title>Cedric Brun: Obeo's Chronicles, Autumn 2020</title>
	<guid isPermaLink="false">https://cedric.brun.io/eclipse/obeo-chronicles</guid>
	<link>https://cedric.brun.io/eclipse/obeo-chronicles/</link>
	<description>&lt;p&gt;I can’t believe we are already looking at Q4. I have so much news to share with you!&lt;/p&gt;

&lt;h3 id=&quot;eclipse-sirius-obeo-cloud-platform-and-sirius-web&quot;&gt;Eclipse Sirius, Obeo Cloud Platform and Sirius Web:&lt;/h3&gt;

&lt;p&gt;This last summer we had the pleasure to organize SiriusCon. This one-day event is each year the opportunity for the modeling community to share their experience, and for the development team to provide visibility on what is currently being worked on and how we see the future of the technology. SiriusCon reached &lt;strong&gt;450 attendees&lt;/strong&gt; from &lt;strong&gt;53 different countries&lt;/strong&gt; thanks to &lt;strong&gt;13 fabulous speakers&lt;/strong&gt; !&lt;/p&gt;

&lt;p&gt;The latest edition was special to us, it used to be organized at the end of each year but we decided to postpone it for a few months to be ready for an announcement very close to our heart. We’ve been working on bringing on the Web what we love about Sirius for quite a few years already and reached a point where we have a promising product. Now is the time to accelerate, Mélanie Bats announced it during the conference: &lt;strong&gt;we are releasing “Sirius Web” as Open-Source and officially&lt;/strong&gt; &lt;a href=&quot;https://blog.obeo.fr/sirius-ii-mission&quot; target=&quot;_blank&quot;&gt;started the countdown&lt;/a&gt; !&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://cedric.brun.io/images/blog/chronicles/siriuscon.png&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/chronicles/siriuscon.png&quot; /&gt;&lt;/a&gt;  
    &lt;figcaption&gt;The announcement at SiriusCon 2020&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The reactions to this announcement were fantastic with a lot of excitement within the community.&lt;/p&gt;

&lt;p&gt;I am myself very excited for several reasons:&lt;/p&gt;

&lt;p&gt;Firstly, I expect this decision will, just like Sirius Desktop was released in Open-Source in 2013, &lt;strong&gt;a key factor leading to the creation of hundreds of graphical modelers&lt;/strong&gt;, in the same way currently demonstrated by the &lt;a href=&quot;https://www.eclipse.org/sirius/gallery.html&quot; target=&quot;_blank&quot;&gt;Sirius Gallery&lt;/a&gt; but now easily accessible through the Web and leveraging all the capabilities this platform brings.&lt;/p&gt;

&lt;p&gt;Our vision is to empower the tool specifier from the data structure and tool definition up to the deployment and exploitation of a modeling tool, &lt;strong&gt;directly from the browser, end to end and in an integrated and seamless way.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are not there yet, though as you’ll see the technology is already quite promising.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://cedric.brun.io/images/blog/chronicles/ocp.png&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/chronicles/ocp.png&quot; /&gt;&lt;/a&gt;  
    &lt;figcaption&gt;Obeo Cloud Platform Modeler&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Secondly, for Obeo this decision strengthens our product-based business model while being faithful to our “open core” approach. &lt;strong&gt;We will offer, through Obeo Cloud Platform a Sirius Web build extended with Enterprise features&lt;/strong&gt;, to deploy on public, private clouds or on premise and including support and upgrade guarantees.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://cedric.brun.io/images/blog/chronicles/ocp-offer.png&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/chronicles/ocp-offer.png&quot; /&gt;&lt;/a&gt;  
    &lt;figcaption&gt;Obeo Cloud Platform Offer&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Since the announcement the team is working on Sirius Web to publish it as an Open-Source product so that you can start experimenting as soon as EclipseCon 2020. Mélanie will present this in detail during her talk: &lt;a href=&quot;https://www.eclipsecon.org/node/3210&quot; target=&quot;_blank&quot;&gt;“Sirius Web: 100% open source cloud modeling platform”&lt;/a&gt; ,&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://cedric.brun.io/images/blog/chronicles/ece.png&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/chronicles/ece.png&quot; /&gt;&lt;/a&gt;  
    &lt;figcaption&gt;EclipseCon 2020&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Hint: it’s still time to register for EclipseCon 2020 but do it quickly! The program committee did an excellent job in setting up an exciting program thanks to your many submissions, don’t miss it!&lt;/p&gt;

&lt;h3 id=&quot;capella-days-online-is-coming-up&quot;&gt;Capella Days Online is coming up!&lt;/h3&gt;

&lt;p&gt;That’s not it! Each day we see Eclipse Capella get more and more adoption across the globe, this Open-Source product has its own 4-days event: Capella Days Online 2020!&lt;/p&gt;

&lt;p&gt;A unique occasion to get many experience reports from multiple domains: Space systems (CNES and GMV), Rail and transportation (Virgin Hyperloop, Nextrail and Vitesco technologies), healthcare (Siemens and Still AB), waste collecting with The SeaCleaners and all of that in addition to aerospace, defence and security with Thales Group. The program is packed with high-quality content: 12 sessions over 4 days from October 12th to 15th, more than 500 attendees already registered, join us and register!&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://www.eclipse.org/capella/capella_days_2020.html&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/chronicles/cadays.png&quot; /&gt;&lt;/a&gt;  
    &lt;figcaption&gt;Capella Days&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://cedric.brun.io/images/blog/chronicles/cadays-program.png&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/chronicles/cadays-program.png&quot; /&gt;&lt;/a&gt;  
    &lt;figcaption&gt;Capella Days Program&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;smartea-60-supports-archimate-31-and-keeps-rising&quot;&gt;SmartEA 6.0 supports Archimate 3.1 and keeps rising!&lt;/h3&gt;

&lt;p&gt;We use those open-source technologies, like Eclipse Sirius, Acceleo, EMF Compare, M2doc and many more in our “off the shelf” software solution for Enterprise Architecture: &lt;strong&gt;Obeo SmartEA&lt;/strong&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://www.obeosmartea.com/en/&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/chronicles/smartea.png&quot; /&gt;&lt;/a&gt;  
    &lt;figcaption&gt;SmartEA 6.0&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This spring we released SmartEA 6.0, which got the Archimate 3.1 certification and brought among many other improvements: new modeling capabilities, extended user management, enhanced BPMN modeling and streamlined user experience.&lt;/p&gt;

&lt;p&gt;Our solution is a challenger on the market and convinces more and more customers. &lt;em&gt;Stay tuned, I should be able to share a thrilling announcement soon!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;world-clean-up-day-and-the-seacleaners&quot;&gt;World Clean Up Day and The SeaCleaners&lt;/h3&gt;

&lt;p&gt;In a nutshell: an excellent dynamic on many fronts and exciting challenges ahead!
This is all made possible thanks to the energy and cohesion of the Obeo team in this weird, complex and unusual time. We are committed to the environment and to reduce plastic waste, as such we took part in the &lt;a href=&quot;https://www.worldcleanupday.fr/&quot; target=&quot;_blank&quot;&gt;World Clean Up Day&lt;/a&gt;  in partnership with &lt;a href=&quot;https://www.theseacleaners.org/&quot; target=&quot;_blank&quot;&gt;The Sea Cleaners&lt;/a&gt; . Beyond the impact of this action which has so much sense to us, it was also a sharing and fun moment!&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://cedric.brun.io/images/blog/chronicles/wcd.png&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/chronicles/wcd.png&quot; /&gt;&lt;/a&gt;  
    &lt;figcaption&gt;#WeAreObeo at the World Cleanup Day&lt;/figcaption&gt;
&lt;/figure&gt;


    &lt;p&gt;&lt;a href=&quot;https://cedric.brun.io/eclipse/obeo-chronicles/&quot;&gt;Obeo's Chronicles, Autumn 2020&lt;/a&gt; was originally published by Cédric Brun at &lt;a href=&quot;https://cedric.brun.io&quot;&gt;CEO @ Obeo&lt;/a&gt; on October 06, 2020.&lt;/p&gt;</description>
	<pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
	<author>cedric.brun@obeo.fr (Cédric Brun)</author>
</item>
<item>
	<title>Eclipse Dirigible: Release 5.3</title>
	<guid isPermaLink="false">http://dirigible.io/release/2020/10/05/news_new_release_5_3</guid>
	<link>http://dirigible.io/release/2020/10/05/news_new_release_5_3.html</link>
	<description>&lt;p&gt;New version &lt;a href=&quot;https://download.eclipse.org/dirigible/drops/R-5.3-202010050300/index.html&quot;&gt;5.3&lt;/a&gt; has been released.&lt;/p&gt;

&lt;p&gt;Release is of &lt;em&gt;Type A&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;features&quot;&gt;Features&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Select Partial Generation&lt;/li&gt;
  &lt;li&gt;Views ordering&lt;/li&gt;
  &lt;li&gt;Monaco - code completion of published modules&lt;/li&gt;
  &lt;li&gt;Add Tiles for the Generic Templates in Welcome Page&lt;/li&gt;
  &lt;li&gt;Add support for properties mapping in OData&lt;/li&gt;
  &lt;li&gt;Add support for nullable properties in OData&lt;/li&gt;
  &lt;li&gt;OpenUI5 starter pack&lt;/li&gt;
  &lt;li&gt;Generated REST API - add support for the produced content type&lt;/li&gt;
  &lt;li&gt;Git Share multiple projects to the same git repository&lt;/li&gt;
  &lt;li&gt;readEntitySimpleProperty and readEntitySimplePropertyValue in OData&lt;/li&gt;
  &lt;li&gt;Add a generic template for *.websocket sample&lt;/li&gt;
  &lt;li&gt;Add support for “many-to-one” associations in OData&lt;/li&gt;
  &lt;li&gt;Add support for create entity in OData&lt;/li&gt;
  &lt;li&gt;Add support for delete entity in OData&lt;/li&gt;
  &lt;li&gt;Add support for update entity in OData&lt;/li&gt;
  &lt;li&gt;Add support for autoIncrement property in DAO&lt;/li&gt;
  &lt;li&gt;Add Commit Id Info in About page&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fixes&quot;&gt;Fixes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP Client Async - class not found&lt;/li&gt;
  &lt;li&gt;Feed properties serialization issues&lt;/li&gt;
  &lt;li&gt;Add support for optional OData generation&lt;/li&gt;
  &lt;li&gt;Set on focus the selected view from the launchpad&lt;/li&gt;
  &lt;li&gt;Tolerant Foreign Keys in Schema&lt;/li&gt;
  &lt;li&gt;Default value support in DAO&lt;/li&gt;
  &lt;li&gt;Schema SQL is not correct&lt;/li&gt;
  &lt;li&gt;Missing Default Value property in the Schema Modeler&lt;/li&gt;
  &lt;li&gt;Missing quotes for default value in materializing&lt;/li&gt;
  &lt;li&gt;Protect the service path for OData&lt;/li&gt;
  &lt;li&gt;Git Share project leads to broken project in the workspace&lt;/li&gt;
  &lt;li&gt;NullPointerException on stop container&lt;/li&gt;
  &lt;li&gt;Fix duplicated reference keys during OData transformation in OData&lt;/li&gt;
  &lt;li&gt;Cannot see first project in Workbench on smaller screens&lt;/li&gt;
  &lt;li&gt;SAP CF - Import Project Fails&lt;/li&gt;
  &lt;li&gt;SAP CF - Missing Database Binding Configuration&lt;/li&gt;
  &lt;li&gt;SAP CF - Add Support for Binding of HANA Schema&lt;/li&gt;
  &lt;li&gt;Minor fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;statistics&quot;&gt;Statistics&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;55K+ Users&lt;/li&gt;
  &lt;li&gt;79K+ Sessions&lt;/li&gt;
  &lt;li&gt;184 Countries&lt;/li&gt;
  &lt;li&gt;407 Repositories in DirigibleLabs&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;operational&quot;&gt;Operational&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Available packages for download - &lt;a href=&quot;https://download.eclipse.org/dirigible/drops/R-5.3-202010050300/index.html&quot;&gt;https://download.eclipse.org/dirigible/drops/R-5.3-202010050300/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Docker images at Docker Hub under DirigibleLabs organization:	&lt;a href=&quot;https://hub.docker.com/u/dirigiblelabs/&quot;&gt;https://hub.docker.com/u/dirigiblelabs/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maven Central artifacts by org.eclipse.dirigible namespace: &lt;a href=&quot;https://search.maven.org/search?q=org.eclipse.dirigible&quot;&gt;https://search.maven.org/search?q=org.eclipse.dirigible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The full list of bug-fixes and enhancements can be found here: &lt;a href=&quot;https://github.com/eclipse/dirigible/milestone/37?closed=1&quot;&gt;https://github.com/eclipse/dirigible/milestone/37?closed=1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The source code is available at GitHub repository here: &lt;a href=&quot;https://github.com/eclipse/dirigible/tree/5.3.0&quot;&gt;https://github.com/eclipse/dirigible/tree/5.3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The instant trial is updated accordingly with the released version here: &lt;a href=&quot;http://trial.dirigible.io&quot;&gt;http://trial.dirigible.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h4&gt;</description>
	<pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: JWT Authorization for Vert.x with Keycloak</title>
	<guid isPermaLink="true">https://vertx.io/blog/jwt-authorization-for-vert-x-with-keycloak</guid>
	<link>https://vertx.io/blog/jwt-authorization-for-vert-x-with-keycloak</link>
	<description>&lt;article&gt;&lt;h1 id=&quot;jwt-authorization-for-vert-x-with-keycloak&quot;&gt;JWT Authorization for Vert.x with Keycloak&lt;/h1&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;In this blog post you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JWT foundations&lt;/li&gt;
&lt;li&gt;How to protect routes with a JWT Authorization&lt;/li&gt;
&lt;li&gt;How to extract claims from a JWT encoded token&lt;/li&gt;
&lt;li&gt;How to apply RBAC with Keycloak Realm roles&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;hello-again&quot;&gt;Hello again&lt;/h3&gt;
&lt;p&gt;Hi there! In my last blog post &lt;a href=&quot;https://vertx.io/blog/easy-sso-for-vert-x-with-keycloak/&quot;&gt;Easy SSO for Vert.x with Keycloak&lt;/a&gt; we learned how to configure single sign-on for a Vert.x web application with Keycloak and OpenID connect. This time we’ll see how we can protect an application with Vert.x’s &lt;a href=&quot;https://vertx.io/docs/vertx-web/java/#_jwt_authorisation&quot;&gt;JWT Authorization&lt;/a&gt; support and Keycloak.&lt;/p&gt;
&lt;h3 id=&quot;keycloak-setup&quot;&gt;Keycloak Setup&lt;/h3&gt;
&lt;p&gt;To secure our Vert.x app, we need to use a Keycloak server for obtaining JWT tokens. Although &lt;a href=&quot;https://www.keycloak.org/docs/latest/getting_started/&quot;&gt;Keycloak has a great getting started guide&lt;/a&gt; I wanted to make it a bit easier to put everything together, therefore I prepared a local Keycloak docker container &lt;a href=&quot;https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx#start-keycloak-with-the-vertx-realm&quot;&gt;as described here&lt;/a&gt;, which comes with all the required configuration in place, that you can start easily.&lt;/p&gt;
&lt;p&gt;The preconfigured Keycloak realm &lt;code&gt;vertx&lt;/code&gt; contains a &lt;code&gt;vertx-service&lt;/code&gt; OpenID connect client for our Vert.x app and a set
of users for testing. To ease testing, the &lt;code&gt;vertx-service&lt;/code&gt; is configured with &lt;code&gt;Direct Access Grant&lt;/code&gt; enabled in Keycloak, which
enables support for the OAuth2 resource owner password credentials grant (ROPC) flow.&lt;/p&gt;
&lt;p&gt;To start Keycloak with the preconfigured realm, just start the docker container with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;docker run \
  -&lt;span class=&quot;ruby&quot;&gt;it \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;-name vertx-keycloak \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;-rm \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;e &lt;span class=&quot;hljs-constant&quot;&gt;KEYCLOAK_USER&lt;/span&gt;=admin \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;e &lt;span class=&quot;hljs-constant&quot;&gt;KEYCLOAK_PASSWORD&lt;/span&gt;=admin \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;e &lt;span class=&quot;hljs-constant&quot;&gt;KEYCLOAK_IMPORT&lt;/span&gt;=&lt;span class=&quot;hljs-regexp&quot;&gt;/tmp/vertx&lt;/span&gt;-realm.json \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;v &lt;span class=&quot;hljs-variable&quot;&gt;$PWD&lt;/span&gt;/vertx-realm.&lt;span class=&quot;hljs-symbol&quot;&gt;json:&lt;/span&gt;/tmp/vertx-realm.json \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;v &lt;span class=&quot;hljs-variable&quot;&gt;$PWD&lt;/span&gt;/&lt;span class=&quot;hljs-symbol&quot;&gt;data:&lt;/span&gt;/opt/jboss/keycloak/standalone/data \
&lt;/span&gt;  -&lt;span class=&quot;ruby&quot;&gt;p &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt; \
&lt;/span&gt;  quay.io/keycloak/keycloak:11.0.2&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;vert-x-app&quot;&gt;Vert.x App&lt;/h2&gt;
&lt;p&gt;The example app consists of a single &lt;code&gt;Verticle&lt;/code&gt;, that runs on &lt;code&gt;http://localhost:3000&lt;/code&gt; and provides a few routes with protected resources. &lt;a href=&quot;https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx/src/main/java/demo/MainVerticle.java&quot;&gt;You can find the complete example here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our web app contains the following protected routes with handlers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/greet&lt;/code&gt; - The greeting resource, which returns a greeting message, only authenticated users can access this resource.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/user&lt;/code&gt; - The user resource, which returns some information about the user, only users with role &lt;code&gt;user&lt;/code&gt; can access this resource.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/admin&lt;/code&gt; - The user resource, which returns some information about the admin, only users with role &lt;code&gt;admin&lt;/code&gt; can access this resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This example is built with Vert.x version 3.9.3.&lt;/p&gt;
&lt;h3 id=&quot;running-the-app-in-the-console&quot;&gt;Running the app in the console&lt;/h3&gt;
&lt;p&gt;To run the app, we need to build it first:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;cd jwt-&lt;span class=&quot;hljs-keyword&quot;&gt;service&lt;/span&gt;-vertx
mvn clean &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a jar, which we can run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;java&lt;/span&gt; -jar target/&lt;span class=&quot;hljs-regexp&quot;&gt;*.jar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, that we need to start Keycloak first, since our app fetches the configuration from Keycloak on startup.&lt;/p&gt;
&lt;h3 id=&quot;running-the-app-in-the-ide&quot;&gt;Running the app in the IDE&lt;/h3&gt;
&lt;p&gt;We can also run the app directly from your favourite IDE like IntelliJ Idea or Eclipse.
To run the app from an IDE, we need to create a launch configuration and use the main class &lt;code&gt;io.vertx.core.Launcher&lt;/code&gt;. Then set the the program arguments to
&lt;code&gt;run demo.MainVerticle&lt;/code&gt; and use the classpath of the &lt;code&gt;jwt-service-vertx&lt;/code&gt; module. 
With that in place we should be able to run the app.&lt;/p&gt;
&lt;h2 id=&quot;jwt-authorization&quot;&gt;JWT Authorization&lt;/h2&gt;
&lt;h3 id=&quot;jwt-foundations&quot;&gt;JWT Foundations&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;JSON Web Token (JWT)&lt;/a&gt; is an open standard to securely exchange information between two parties in the form 
of &lt;a href=&quot;https://base64.guru/standards/base64url&quot;&gt;Base64URL&lt;/a&gt; encoded JSON objects. 
A standard JWT is just a string which comprises three base64url encoded parts header, payload and a signature, which are separated by a “&lt;code&gt;.&lt;/code&gt;“ character. 
There are other variants of JWT that can have more parts.&lt;/p&gt;
&lt;p&gt;An example JWT can look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;eyJhbGciOiJSUzI&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;NiIsInR5&lt;/span&gt;cCIgOiAiSldUIiwia&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;lkIiA&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;ICJj&lt;span class=&quot;hljs-label&quot;&gt;N00&lt;/span&gt;xX&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;hkWjAtWD&lt;span class=&quot;hljs-label&quot;&gt;NyZTl1&lt;/span&gt;dmZLSFRDUWRxYXJQY&lt;span class=&quot;hljs-label&quot;&gt;nBMblVJMHltdkF0&lt;/span&gt;U&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;RzI&lt;span class=&quot;hljs-label&quot;&gt;n0&lt;/span&gt;.eyJleHAiOjE&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;MDEzMT&lt;span class=&quot;hljs-keyword&quot;&gt;g0&lt;/span&gt;MjIsImlhdCI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;MTYwMTMxODEyMiwia&lt;span class=&quot;hljs-label&quot;&gt;nRpIjoiNzYzNWY1&lt;/span&gt;YTEtZjFk&lt;span class=&quot;hljs-label&quot;&gt;Ny00&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;NTdkLWI4&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;NjktYWQ0&lt;/span&gt;OTIz&lt;span class=&quot;hljs-label&quot;&gt;NTJmNGQyIiwiaXNzIjoiaHR0&lt;/span&gt;cDovL&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;xvY&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;Fsa&lt;span class=&quot;hljs-keyword&quot;&gt;G9&lt;/span&gt;zdD&lt;span class=&quot;hljs-preprocessor&quot;&gt;o4&lt;/span&gt;MDgwL&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;F&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;dGg&lt;span class=&quot;hljs-title&quot;&gt;vcmVhbG1&lt;/span&gt;zL&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;Zlc&lt;span class=&quot;hljs-label&quot;&gt;nR4&lt;/span&gt;IiwiYXVkIjoiYW&lt;span class=&quot;hljs-label&quot;&gt;Njb3&lt;/span&gt;VudCIsI&lt;span class=&quot;hljs-label&quot;&gt;nN1&lt;/span&gt;YiI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;IjI&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;Yj&lt;span class=&quot;hljs-label&quot;&gt;NmYWMwLTlhZWMtNDQyMS04&lt;/span&gt;MW&lt;span class=&quot;hljs-label&quot;&gt;NmLWQ0&lt;/span&gt;YjAy&lt;span class=&quot;hljs-label&quot;&gt;NDI4&lt;/span&gt;ZjkwMSIsI&lt;span class=&quot;hljs-label&quot;&gt;nR5&lt;/span&gt;cCI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;IkJlYXJlciIsImF&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;cCI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;I&lt;span class=&quot;hljs-label&quot;&gt;nZlcnR4&lt;/span&gt;LX&lt;span class=&quot;hljs-label&quot;&gt;NlcnZpY2&lt;/span&gt;UiLCJzZX&lt;span class=&quot;hljs-label&quot;&gt;NzaW9&lt;/span&gt;uX&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;N0&lt;/span&gt;YXRlIjoi&lt;span class=&quot;hljs-label&quot;&gt;Njg3&lt;/span&gt;MDgyMTMt&lt;span class=&quot;hljs-label&quot;&gt;NDBiNy00&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;NThhLWFlZTEtMzlkNmY5&lt;/span&gt;ZGEw&lt;span class=&quot;hljs-label&quot;&gt;N2&lt;/span&gt;FkIiwiYW&lt;span class=&quot;hljs-label&quot;&gt;NyIjoiMSIsInJlYWxtX2&lt;/span&gt;FjY&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;VzcyI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;eyJyb&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;xlcyI&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;WyJvZmZsaW&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;lX&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;FjY&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;VzcyIsI&lt;span class=&quot;hljs-label&quot;&gt;nVtYV9&lt;/span&gt;hdXRob&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;JpemF&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;aW&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;uIiwidX&lt;span class=&quot;hljs-label&quot;&gt;NlciJdfSwicmVzb3&lt;/span&gt;VyY&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;VfYW&lt;span class=&quot;hljs-label&quot;&gt;NjZXNzIjp7&lt;/span&gt;ImFjY&lt;span class=&quot;hljs-number&quot;&gt;291&lt;/span&gt;b&lt;span class=&quot;hljs-label&quot;&gt;nQiOnsicm9&lt;/span&gt;sZXMiOlsibWFuYWdlLWFjY&lt;span class=&quot;hljs-number&quot;&gt;291&lt;/span&gt;b&lt;span class=&quot;hljs-label&quot;&gt;nQiLCJtYW5&lt;/span&gt;hZ&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;UtYW&lt;span class=&quot;hljs-label&quot;&gt;Njb3&lt;/span&gt;VudC&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;saW&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;rcyIsI&lt;span class=&quot;hljs-label&quot;&gt;nZpZXctcHJvZmlsZSJdfX0&lt;/span&gt;sI&lt;span class=&quot;hljs-label&quot;&gt;nNjb3&lt;/span&gt;BlIjoiZW&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;haWwgcHJvZmlsZSIsImVtYWlsX&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;ZlcmlmaWVkIjp&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;c&lt;span class=&quot;hljs-label&quot;&gt;nVlLCJuYW1&lt;/span&gt;lIjoiVGhlbyBUZX&lt;span class=&quot;hljs-label&quot;&gt;N0&lt;/span&gt;ZXIiLCJwcmVmZXJyZWRfdX&lt;span class=&quot;hljs-label&quot;&gt;Nlcm5&lt;/span&gt;hbWUiOiJ&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;ZX&lt;span class=&quot;hljs-label&quot;&gt;N0&lt;/span&gt;ZXIiLCJ&lt;span class=&quot;hljs-label&quot;&gt;naXZlbl9&lt;/span&gt;uYW&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;lIjoiVGhlbyIsImZhbWlseV&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;uYW&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;lIjoiVGVzdGVyIiwiZW&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;haWwiOiJ&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;b&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;rdGVzdGVyQGxvY&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;Fsa&lt;span class=&quot;hljs-keyword&quot;&gt;G9&lt;/span&gt;zdCJ&lt;span class=&quot;hljs-number&quot;&gt;9.&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;NN1&lt;/span&gt;ZGE&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;f&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;LHE&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;u&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;T&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;Vfq&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;yPMKoZ&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;SmrUxoFopAXZ&lt;span class=&quot;hljs-title&quot;&gt;m5&lt;/span&gt;wVgMOsJHB&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;BgHQTD&lt;span class=&quot;hljs-title&quot;&gt;m7&lt;/span&gt;u&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;oTVU&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;ZHlKH&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;-&lt;span class=&quot;hljs-preprocessor&quot;&gt;o11&lt;/span&gt;RKK&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;Mz&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;mLqMy&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;EPdkGY&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;Bqtj&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;LZ&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;oTp&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;FaVqY&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;g5&lt;/span&gt;Fr&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;veXYpOMbc&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;fke-e&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;h&lt;span class=&quot;hljs-keyword&quot;&gt;G8&lt;/span&gt;sAfSjWz&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;Mq&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;BUhJ&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;HdK&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;TTIte&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;pub&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;nbUs4&lt;/span&gt;APYystJWx&lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;cYmUwZ&lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;c&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;X&lt;span class=&quot;hljs-number&quot;&gt;295&lt;/span&gt;V-&lt;span class=&quot;hljs-label&quot;&gt;NX9&lt;/span&gt;UksuMSzFItZ&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;cACVKi&lt;span class=&quot;hljs-number&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;hljs-title&quot;&gt;m9&lt;/span&gt;lkR&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;Ru&lt;span class=&quot;hljs-label&quot;&gt;NQKFTuLvWsorz9&lt;/span&gt;yRx&lt;span class=&quot;hljs-number&quot;&gt;884&lt;/span&gt;e&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;c&lt;span class=&quot;hljs-label&quot;&gt;noT_JmfSfYBIl31&lt;/span&gt;Ff&lt;span class=&quot;hljs-label&quot;&gt;nQzUtCjluUzuD9&lt;/span&gt;jVXc_vgC&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;hljs-label&quot;&gt;num_0&lt;/span&gt;AreOZiUzpglb&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;UjKXjswTHF-v_&lt;span class=&quot;hljs-label&quot;&gt;nEIaq7&lt;/span&gt;Ym&lt;span class=&quot;hljs-title&quot;&gt;M5&lt;/span&gt;WKpeg&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The header and payload sections contain information as a JSON object, whereas the signature is just a plain string. JSON objects contain key value pairs which are called &lt;code&gt;claims&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The claims information can be verified and trusted because it is digitally signed with the private key from a public/private key-pair. 
The signature can later be verified with a corresponding public key. The identifier of the public/private key-pair used to sign a JWT can be 
contained in a special claim called &lt;code&gt;kid&lt;/code&gt; (key identifier) in the header section of the JWT.&lt;/p&gt;
&lt;p&gt;An example for a JWT header that references a public/private key-pair looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;alg&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;RS256&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;typ&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;JWT&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;kid&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;c7M1_hdZ0-X3re9uvfKHTCQdqarPbpLnUI0ymvAtSTs&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is quite common to use JWTs to convey information about authentication (user identity) and authorization (scopes, user roles, permissions and other claims). 
OpenID providers such as &lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak&lt;/a&gt; support issuing OAuth2 access tokens after authentication for users to clients in the form of JWTs. 
An access token can then be used to access other services or APIs on behalf of the user. The server providing those services or APIs is often called &lt;code&gt;resource server&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An example JWT payload generated by Keycloak looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;exp&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1601318422&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;iat&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1601318122&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;jti&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;7635f5a1-f1d7-457d-b869-ad492352f4d2&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;iss&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8080/auth/realms/vertx&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;aud&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;account&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;sub&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;27b3fac0-9aec-4421-81cf-d4b02428f901&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;typ&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bearer&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;azp&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;vertx-service&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;session_state&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;68708213-40b7-458a-aee1-39d6f9da07ad&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;acr&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;realm_access&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;{
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;roles&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;[
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;offline_access&quot;&lt;/span&gt;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;uma_authorization&quot;&lt;/span&gt;,
      &lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;
    ]
  &lt;/span&gt;}&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;scope&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;email profile&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;email_verified&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Theo Tester&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;preferred_username&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;tester&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;given_name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Theo&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;family_name&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tester&quot;&lt;/span&gt;&lt;/span&gt;,
  &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;email&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;tom+tester@localhost&quot;&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a &lt;code&gt;resource server&lt;/code&gt; receives a request with such an access token, it needs to verify and inspect the token before it can trust its content. 
To verify the token, the &lt;code&gt;resource server&lt;/code&gt; needs to obtain the &lt;code&gt;public key&lt;/code&gt; to check the token signature. 
This &lt;code&gt;public key&lt;/code&gt; can either be configured statically or fetched dynamically from the OpenID Provider by leveraging the &lt;code&gt;kid&lt;/code&gt; information from the JWT header section. 
Note that most &lt;code&gt;OpenID providers&lt;/code&gt;, such as Keycloak, provide a dedicated endpoint for dynamic public key lookups, e.g. &lt;code&gt;http://localhost:8080/auth/realms/vertx/protocol/openid-connect/certs&lt;/code&gt;.
A standard for providing public key information is &lt;a href=&quot;https://tools.ietf.org/html/rfc7517&quot;&gt;JSON Web Key Set (JWKS)&lt;/a&gt;. 
The JWKS information is usually cached by the resource server to avoid the overhead of fetching JWKS for every request.&lt;/p&gt;
&lt;p&gt;An example response for Keycloak’s JWKS endpoint looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{
   &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;keys&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;[
      {
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;kid&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;c7M1_hdZ0-X3re9uvfKHTCQdqarPbpLnUI0ymvAtSTs&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;kty&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;RSA&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;alg&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;RS256&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;use&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;sig&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;n&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;iFuX2bAXA99Yrv6YEvpV9tjS52krP5UJ7lFL02Zl83PPV6PiLIWKTqF71bfTKnVDxO421xAsBw9f6dlgoyxxY1H_bzJQQryQkry7DA7tI_SnKVsehLgeF-tCcjRF_MF1kM14F1A5Zsu6oYIkMZvgJIRM-ejtz3aUcdnLcTvpPrmfvj7KwRgNsfm6Q-kO0-OAf6m6LaRvaC5VpTIRoVxXNhSIiGKuZ4d05Yk0-HdOR0D0sfOujYzleJmTGBEIAmdWpZqUXiSWbzmpw8mJmacFTP9v8lsTUYZrXc69xm5fHaNJ6PO_E-IKiPKT7OeoM2l3HIK76a4azVL1Ewbv1UtMFw&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;e&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;AQAB&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;x5c&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;[
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;MIICmTCCAYECBgFwplKOujANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAV2ZXJ0eDAeFw0yMDAzMDQxNjExMzNaFw0zMDAzMDQxNjEzMTNaMBAxDjAMBgNVBAMMBXZlcnR4MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiFuX2bAXA99Yrv6YEvpV9tjS52krP5UJ7lFL02Zl83PPV6PiLIWKTqF71bfTKnVDxO421xAsBw9f6dlgoyxxY1H/bzJQQryQkry7DA7tI/SnKVsehLgeF+tCcjRF/MF1kM14F1A5Zsu6oYIkMZvgJIRM+ejtz3aUcdnLcTvpPrmfvj7KwRgNsfm6Q+kO0+OAf6m6LaRvaC5VpTIRoVxXNhSIiGKuZ4d05Yk0+HdOR0D0sfOujYzleJmTGBEIAmdWpZqUXiSWbzmpw8mJmacFTP9v8lsTUYZrXc69xm5fHaNJ6PO/E+IKiPKT7OeoM2l3HIK76a4azVL1Ewbv1UtMFwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBxcXiTtGoo4/eMNwhagYH8QpK1n7fxgzn4mkESU3wD+rnPOAh/xFmx5c3aq8X+8W2z7oopO86ZBSQ8HfbzViBP0uwvf7s7E6Q8FOqrUNv0Kj308A7hF1IOqOhCJE2nABIWJduYz5dWZN434Q9El30L1eOYTtjBUmCdP7/CM+1bvxIT+CYrWmjI9zCMJxhuixmLffppsLCjGtNgFBemjQyCrLxpEGCfy8QGb4pTY/XaHuJ7k6ZaQkVeTbeDzaZbHc9zT5qgf6w4Gp7y+uPZdAsasrwiqm3YBtyBfaK42luk09nHpV6PRKpftnyLVPwlQiJAW6ZMckvDwmnDst70msnb&quot;&lt;/span&gt;
         ]&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;x5t&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;MVYTXCx5cUQ8lT1ymIDDRYO7_ZI&quot;&lt;/span&gt;&lt;/span&gt;,
         &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;x5t#S256&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;yBDVTlfR0e7cv3HxbbkfvGKVs5W1VQtFs7haE_js3DY&quot;&lt;/span&gt;
      &lt;/span&gt;}
   ]
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
The `keys` array contains the JWKS structure with the public key information that belongs to the public/private key-pair which was used
to sign the JWT access token from above. Note the matching `kid` claim from our earlier JWT header example.

Now that we have the appropriate public key, we can use the information from the JWT header to validate the signature of the JWT access token.
If the signature is valid, we can go on and check additional claims from the payload section of the JWT, such as expiration, allowed issuer and audience etc. 

Now that we have the necessary building blocks in place, we can finally look at how to configure JWT authorization in Vert.x.

### JWT Authorization in Vert.x

Setting up JWT authorization in Vert.x is quite easy. First we need to add the `vertx-auth-jwt` module as a dependency to our project.

&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.vertx&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;vertx-auth-jwt&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our example the whole JWT authorization setup happens in the method &lt;code&gt;setupJwtAuth&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We use a &lt;code&gt;WebClient&lt;/code&gt; to dynamically fetch the public key information from the &lt;code&gt;/protocol/openid-connect/certs&lt;/code&gt; JWKS endpoint relative to our Keycloak issuer URL. 
After that, we configure a &lt;code&gt;JWTAuth&lt;/code&gt; instance and customize the JWT validation via &lt;code&gt;JWTOptions&lt;/code&gt; and &lt;code&gt;JWTAuthOptions&lt;/code&gt;. 
Note that we use Keycloak’s realm roles for role based authorization via the &lt;code&gt;JWTAuthOptions#setPermissionsClaimKey(..)&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future &lt;span class=&quot;hljs-title&quot;&gt;setupJwtAuth&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Startup startup)&lt;/span&gt; &lt;/span&gt;{

    var jwtConfig = startup.config.getJsonObject(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jwt&quot;&lt;/span&gt;);
    var issuer = jwtConfig.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;issuer&quot;&lt;/span&gt;);
    var issuerUri = URI.create(issuer);

    &lt;span class=&quot;hljs-comment&quot;&gt;// derive JWKS uri from Keycloak issuer URI&lt;/span&gt;
    var jwksUri = URI.create(jwtConfig.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jwksUri&quot;&lt;/span&gt;, String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s://%s:%d%s&quot;&lt;/span&gt;,
            issuerUri.getScheme(), issuerUri.getHost(), issuerUri.getPort(), issuerUri.getPath() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/protocol/openid-connect/certs&quot;&lt;/span&gt;)));

    var promise = Promise.promise();

    &lt;span class=&quot;hljs-comment&quot;&gt;// fetch JWKS from `/certs` endpoint&lt;/span&gt;
    webClient.get(jwksUri.getPort(), jwksUri.getHost(), jwksUri.getPath())
            .as(BodyCodec.jsonObject())
            .send(ar -&amp;gt; {

                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!ar.succeeded()) {
                    startup.bootstrap.fail(String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Could not fetch JWKS from URI: %s&quot;&lt;/span&gt;, jwksUri));
                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
                }

                var response = ar.result();

                var jwksResponse = response.body();
                var keys = jwksResponse.getJsonArray(&lt;span class=&quot;hljs-string&quot;&gt;&quot;keys&quot;&lt;/span&gt;);

                &lt;span class=&quot;hljs-comment&quot;&gt;// Configure JWT validation options&lt;/span&gt;
                var jwtOptions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JWTOptions();
                jwtOptions.setIssuer(issuer);

                &lt;span class=&quot;hljs-comment&quot;&gt;// extract JWKS from keys array&lt;/span&gt;
                var jwks = ((List) keys.getList()).stream()
                        .map(o -&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject((Map) o))
                        .collect(Collectors.toList());

                &lt;span class=&quot;hljs-comment&quot;&gt;// configure JWTAuth&lt;/span&gt;
                var jwtAuthOptions = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JWTAuthOptions();
                jwtAuthOptions.setJwks(jwks);
                jwtAuthOptions.setJWTOptions(jwtOptions);
                jwtAuthOptions.setPermissionsClaimKey(jwtConfig.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;permissionClaimsKey&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;realm_access/roles&quot;&lt;/span&gt;));

                JWTAuth jwtAuth = JWTAuth.create(vertx, jwtAuthOptions);
                promise.complete(jwtAuth);
            });

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; promise.future().compose(auth -&amp;gt; {
        jwtAuth = auth;
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture(startup);
    });
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;protecting-routes-with-jwtauthhandler&quot;&gt;Protecting routes with JWTAuthHandler&lt;/h3&gt;
&lt;p&gt;Now that our &lt;code&gt;JWTAuth&lt;/code&gt; is configured, we can use the &lt;code&gt;JWTAuthHandler&lt;/code&gt; in the &lt;code&gt;setupRouter&lt;/code&gt; method to apply 
JWT authorization to all routes matching the path pattern &lt;code&gt;/api/*&lt;/code&gt;. The &lt;code&gt;JWTAuthHandler&lt;/code&gt; validates received JWTs and performs 
additional checks like expiration and allowed issuers. With that in place, we configure our actual routes in &lt;code&gt;setupRoutes&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future &lt;span class=&quot;hljs-title&quot;&gt;setupRouter&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Startup startup)&lt;/span&gt; &lt;/span&gt;{

    router = Router.router(vertx);

    router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/*&quot;&lt;/span&gt;).handler(JWTAuthHandler.create(jwtAuth));

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture(startup);
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Future &lt;span class=&quot;hljs-title&quot;&gt;setupRoutes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Startup startup)&lt;/span&gt; &lt;/span&gt;{

    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/greet&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleGreet);
    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/user&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleUserData);
    router.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/api/admin&quot;&lt;/span&gt;).handler(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;::handleAdminData);

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Future.succeededFuture(startup);
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;extracting-user-information-from-jwtuser&quot;&gt;Extracting user information from JWTUser&lt;/h3&gt;
&lt;p&gt;To access user information in our &lt;code&gt;handleGreet&lt;/code&gt; method, we cast the result of the &lt;code&gt;io.vertx.ext.web.RoutingContext#user&lt;/code&gt; method to &lt;code&gt;JWTUser&lt;/code&gt; 
which allows us to access token claim information via the &lt;code&gt;io.vertx.ext.auth.jwt.impl.JWTUser#principal&lt;/code&gt; JSON object.&lt;/p&gt;
&lt;p&gt;If we’d like to use the JWT access token for other service calls, we could extract the token from the &lt;code&gt;Authorization&lt;/code&gt; header.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleGreet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    var jwtUser = (JWTUser) ctx.user();
    var username = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;preferred_username&quot;&lt;/span&gt;);
    var userId = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sub&quot;&lt;/span&gt;);

    var accessToken = ctx.request().getHeader(HttpHeaders.AUTHORIZATION).substring(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bearer &quot;&lt;/span&gt;.length());
    &lt;span class=&quot;hljs-comment&quot;&gt;// Use accessToken for down-stream calls if needed...&lt;/span&gt;

    ctx.request().response().end(String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi %s (%s) %s%n&quot;&lt;/span&gt;, username, userId, Instant.now()));
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;obtaining-an-access-token-from-keycloak-for-user-tester-&quot;&gt;Obtaining an Access Token from Keycloak for user &lt;code&gt;tester&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;To test our application we can use the following &lt;code&gt;curl&lt;/code&gt; commands in a bash like shell to obtain an JWT access token to call one
of our endpoints as the user &lt;code&gt;tester&lt;/code&gt; with the role &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that this example uses the cli tool &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt; for JSON processing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;KC_USERNAME=tester
KC_PASSWORD=test
KC_CLIENT=vertx-service
KC_CLIENT_SECRET=ecb85cc5&lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt;90d-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;a03-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;fac-&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;dcde57f40c
KC_REALM=vertx
KC_URL=http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;/auth
KC_RESPONSE=$(curl  -k \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;username=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_USERNAME&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;password=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_PASSWORD&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'grant_type=password'&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;client_id=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_CLIENT&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;client_secret=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_CLIENT_SECRET&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$KC_URL&lt;/span&gt;/realms/&lt;span class=&quot;hljs-variable&quot;&gt;$KC_REALM&lt;/span&gt;/protocol/openid-connect/token&quot;&lt;/span&gt; \
    | jq .)

KC_ACCESS_TOKEN=$(&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$KC_RESPONSE&lt;/span&gt;| jq -r .access_token)
&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we use the JWT access token in the &lt;code&gt;Authorization&lt;/code&gt; header with the &lt;code&gt;Bearer&lt;/code&gt; prefix to call our &lt;code&gt;greet&lt;/code&gt; route:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;curl --silent -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&quot;&lt;/span&gt; http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;/api/greet&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;Hi tester (&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;b3fac0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;aec-&lt;span class=&quot;hljs-number&quot;&gt;4421&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;cf&lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt;4b02428f901) &lt;span class=&quot;hljs-number&quot;&gt;2020&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;T21:&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;59.254230700&lt;/span&gt;Z&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;applying-role-based-access-control-with-jwtuser&quot;&gt;Applying Role-based Access-Control with JWTUser&lt;/h3&gt;
&lt;p&gt;To leverage support for role based access control (RBAC) we can use the &lt;code&gt;io.vertx.ext.auth.User#isAuthorised&lt;/code&gt; method
to check whether the current user has the required role. If the role is present we return some data about the user, otherwise
we send a response with status code 403 and a &lt;code&gt;forbidden&lt;/code&gt; error message.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleUserData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    var jwtUser = (JWTUser) ctx.user();
    var username = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;preferred_username&quot;&lt;/span&gt;);
    var userId = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sub&quot;&lt;/span&gt;);

    jwtUser.isAuthorized(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;, res -&amp;gt; {

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!res.succeeded() || !res.result()) {
            toJsonResponse(ctx).setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;403&lt;/span&gt;).end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{\&quot;error\&quot;: \&quot;forbidden\&quot;}&quot;&lt;/span&gt;);
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }

        JsonObject data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;, username)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;userId&quot;&lt;/span&gt;, userId)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;, Instant.now());

        toJsonResponse(ctx).end(data.toString());
    });
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;handleAdminData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(RoutingContext ctx)&lt;/span&gt; &lt;/span&gt;{

    var jwtUser = (JWTUser) ctx.user();
    var username = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;preferred_username&quot;&lt;/span&gt;);
    var userId = jwtUser.principal().getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sub&quot;&lt;/span&gt;);

    jwtUser.isAuthorized(&lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;, res -&amp;gt; {

        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!res.succeeded() || !res.result()) {
            toJsonResponse(ctx).setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;403&lt;/span&gt;).end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{\&quot;error\&quot;: \&quot;forbidden\&quot;}&quot;&lt;/span&gt;);
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }

        JsonObject data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonObject()
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;, username)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;userId&quot;&lt;/span&gt;, userId)
                .put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;, Instant.now());

        toJsonResponse(ctx).end(data.toString());
    });
}&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;curl --silent -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&quot;&lt;/span&gt; http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;/api/user&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;username&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;tester&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;userId&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;27b3fac0-9aec-4421-81cf-d4b02428f901&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;timestamp&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-09-28T21:07:49.340950300Z&quot;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;curl --silent -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&quot;&lt;/span&gt; http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;/api/admin&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;{&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;error&lt;/span&gt;&quot;: &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;forbidden&quot;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;obtaining-an-access-token-from-keycloak-for-user-vadmin-&quot;&gt;Obtaining an Access Token from Keycloak for user &lt;code&gt;vadmin&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;To check access with an &lt;code&gt;admin&lt;/code&gt; role, we obtain a new token for the user &lt;code&gt;vadmin&lt;/code&gt; which has the roles &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;KC_USERNAME=vadmin
KC_PASSWORD=test
KC_CLIENT=vertx-service
KC_CLIENT_SECRET=ecb85cc5&lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt;90d-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;a03-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;fac-&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;dcde57f40c
KC_REALM=vertx
KC_URL=http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;/auth
KC_RESPONSE=$(curl  -k \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;username=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_USERNAME&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;password=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_PASSWORD&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'grant_type=password'&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;client_id=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_CLIENT&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;client_secret=&lt;span class=&quot;hljs-variable&quot;&gt;$KC_CLIENT_SECRET&lt;/span&gt;&quot;&lt;/span&gt; \
        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$KC_URL&lt;/span&gt;/realms/&lt;span class=&quot;hljs-variable&quot;&gt;$KC_REALM&lt;/span&gt;/protocol/openid-connect/token&quot;&lt;/span&gt; \
    | jq .)

KC_ACCESS_TOKEN=$(&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$KC_RESPONSE&lt;/span&gt;| jq -r .access_token)
&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;curl --silent -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&quot;&lt;/span&gt; http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;/api/user&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;username&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;vadmin&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;userId&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;75090eac-36ff-4cd8-847d-fc2941bc024e&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;timestamp&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-09-28T21:13:05.099393900Z&quot;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;curl --&lt;span class=&quot;hljs-literal&quot;&gt;silent&lt;/span&gt; -H &lt;span class=&quot;hljs-string&quot;&gt;&quot;Authorization: Bearer &lt;span class=&quot;hljs-variable&quot;&gt;$KC_ACCESS_TOKEN&lt;/span&gt;&quot;&lt;/span&gt; http://localhost:&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;/api/&lt;span class=&quot;hljs-literal&quot;&gt;admin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;username&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;vadmin&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;userId&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;75090eac-36ff-4cd8-847d-fc2941bc024e&quot;&lt;/span&gt;&lt;/span&gt;,&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;timestamp&lt;/span&gt;&quot;:&lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;2020-09-28T21:13:34.945276500Z&quot;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We learned how to configure a Vert.x application with JWT authorization powered by Keycloak. Although the configuration is quite complete
already, there are still some parts that can be improved, like the dynamic JWKS fetching on public-key pair rotation as well as extraction of nested roles.&lt;/p&gt;
&lt;p&gt;Nevertheless this is a good starting point for securing your own Vert.x services with JWT and Keycloak.&lt;/p&gt;
&lt;p&gt;You can check out the &lt;a href=&quot;https://github.com/thomasdarimont/vertx-playground/tree/master/jwt-service-vertx&quot;&gt;complete example in keycloak-vertx Examples Repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thank you for your time, stay tuned for more updates! If you want to learn more about Keycloak, feel free to reach out to me. You can find me via &lt;a href=&quot;https://twitter.com/thomasdarimont&quot;&gt;thomasdarimont on twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Ditto: Announcing Eclipse Ditto Release 1.3.0</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2020-09-30-release-announcement-130.html</guid>
	<link>https://www.eclipse.org/ditto/2020-09-30-release-announcement-130.html</link>
	<description>&lt;p&gt;Today, the Ditto team is happy to announce the next feature update of Ditto &lt;code class=&quot;highlighter-rouge&quot;&gt;1.x&lt;/code&gt;: &lt;strong&gt;Eclipse Ditto 1.3.0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.3.0 focuses on the following areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implicit/automatic creation of digital twins (things)&lt;/li&gt;
  &lt;li&gt;Use response of HTTP push connections as live message response&lt;/li&gt;
  &lt;li&gt;“Raw” payload mapper for “pass-through” connectivity scenarios not affecting the twin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please have a look at the &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_130.html&quot;&gt;1.3.0 release notes&lt;/a&gt; for a more detailed information on the release.&lt;/p&gt;

&lt;p&gt;Also, some bugs were fixed which are not backported to Ditto 1.2.x - it is recommended to update to Ditto 1.3.0 right
away and skip 1.2.x.&lt;/p&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also the &lt;a href=&quot;https://www.eclipse.org/ditto/client-sdk-java.html&quot;&gt;Ditto Java client&lt;/a&gt;’s artifacts were published to Maven central.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kubernetes-ready-helm-chart&quot;&gt;Kubernetes ready: Helm chart&lt;/h2&gt;

&lt;p&gt;In order to run Eclipse Ditto in a Kubernetes environment, best rely on the official 
&lt;a href=&quot;https://hub.helm.sh/charts/eclipse-iot/ditto&quot;&gt;Helm chart&lt;/a&gt; and deploy Ditto via the Helm package manager.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Nikhil Nanivadekar: MapIterable.getOrDefault() : New but not so new API</title>
	<guid isPermaLink="false">https://medium.com/p/1fbf2c38a508</guid>
	<link>https://medium.com/@nikhilnanivadekar/mapiterable-getordefault-new-but-not-so-new-api-1fbf2c38a508?source=rss-4285d8a2ca86------2</link>
	<description>&lt;h3&gt;MapIterable.getOrDefault() : New but not so new API&lt;/h3&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*-BHnBBED8fcOaR9hl1hVLA.jpeg&quot; /&gt;&lt;figcaption&gt;Sunset at Port Hardy (June 2019)&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Eclipse Collections comes with it’s own List, Set, and Map implementations. These implementations extend the JDK List, Set, and Map implementations for easy interoperability. In Eclipse Collections 10.3.0, I introduced a new API MapIterable.getOrDefault(). In Java 8, &lt;a href=&quot;https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Map.html#getOrDefault(java.lang.Object,V)&quot;&gt;Map.getOrDefault()&lt;/a&gt; was introduced, so what makes it a new API for Eclipse Collections 10.3.0? Technically, it is new but not so new API! Consider the code snippets below, prior to Eclipse Collections 10.3.0:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*LGa2c3g3lUQrySCraWm9Ew.png&quot; /&gt;&lt;figcaption&gt;&lt;strong&gt;MutableMap&lt;/strong&gt;.getOrDefault() compiles and works fine&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Dm8GxkyqNWByQ3dpB7MaOQ.png&quot; /&gt;&lt;figcaption&gt;&lt;strong&gt;ImmutableMap&lt;/strong&gt;.getOrDefault() does not compile&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;As you can see in the code, MutableMap has getOrDefault() available, however ImmutableMap does not have it. But there is no reason why ImmutableMap should not have this read-only API. I found that MapIterable already had getIfAbsentValue() which has the same behavior. Then why did I still add getOrDefault() to MapIterable?&lt;/p&gt;&lt;p&gt;I added MapIterable.getOrDefault() mainly for easy interoperability. Firstly, most Java developers will be aware of the getOrDefault() method, only Eclipse Collections users would be aware of getIfAbsentValue(). By providing the API same as the JDK it reduces the necessity to learn a new API. Secondly, even though getOrDefault() is available on MutableMap, it is not available on the highest Map interface of Eclipse Collections. Thirdly, I got to learn a Java compiler check which I had not experienced before. I will elaborate this check a bit more in detail because I find it interesting.&lt;/p&gt;&lt;p&gt;After I added getOrDefault() to MapIterable, various Map interfaces in Eclipse Collections started giving compiler errors with messages like: &lt;em&gt;org.eclipse.collections.api.map.MutableMapIterable inherits unrelated defaults for getOrDefault(Object, V) from types org.eclipse.collections.api.map.MapIterable and java.util.Map&lt;/em&gt;. This I thought was cool, because at compile time, the Java compiler is ensuring that if there is an API with default implementation in more than one interface in a multi-interface scenario, then Java will not decide which implementation to pick but rather throw compiler errors. Hence, Java ensures at compile time that there is no ambiguity regarding which implementation will be used at runtime. How awesome is that?!? In order to fix the compile time errors, I had to add a default implementations on the interfaces which gave the errors. I always believe in Compiler Errors are better than Runtime Exceptions.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/stuartmarks&quot;&gt;Stuart Marks&lt;/a&gt; has put together an &lt;a href=&quot;https://stuartmarks.wordpress.com/2020/09/22/incompatibilities-with-jdk-15-charsequence-isempty/&quot;&gt;awesome blog&lt;/a&gt; which covers the specifics of such scenarios. I suggest reading that for in-depth understanding of how and why this behavior is observed.&lt;/p&gt;&lt;p&gt;Post Eclipse Collections 10.3.0 the below code samples will work:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ZHp2pOKpKMgAlYdf97aLcw.png&quot; /&gt;&lt;figcaption&gt;&lt;strong&gt;&lt;em&gt;MapIterable&lt;/em&gt;&lt;/strong&gt;.getOrDefault() compiles and works fine&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*MO5NLHLmkm7SlTdVYqc_Pg.png&quot; /&gt;&lt;figcaption&gt;&lt;strong&gt;MutableMap&lt;/strong&gt;.getOrDefault() compiles and works fine&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*-4uxJkMTp5NPT620jGzOhQ.png&quot; /&gt;&lt;figcaption&gt;&lt;strong&gt;ImmutableMap&lt;/strong&gt;.getOrDefault() compiles and works fine&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/10.3.0&quot;&gt;Eclipse Collections 10.3.0&lt;/a&gt; was released on 08/08/2020 and is one of our most feature packed releases. The release constitutes numerous contributions from the Java community.&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am a Project Lead and Committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Show your support &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/stargazers&quot;&gt;&lt;em&gt;star us on GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Resources:&lt;/strong&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; comes with it’s own implementations of &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/list/mutable/FastList.html&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/set/mutable/UnifiedSet.html&quot;&gt;Set&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/map/mutable/UnifiedMap.html&quot;&gt;Map&lt;/a&gt;. It also has additional data structures like &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;Multimap&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; and an entire Primitive Collections hierarchy. Each of our collections have a rich API for commonly required iteration patterns.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Source code on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md#eclipse-collections-reference-guide&quot;&gt;Reference Guide&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=1fbf2c38a508&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 23 Sep 2020 02:30:30 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: Using gRPC-java code generation to create OSGi Services</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-7451999693674560058</guid>
	<link>http://eclipseecf.blogspot.com/2020/09/using-grpc-java-code-generation-to.html</link>
	<description>&lt;p&gt;OSGi Services are usually first created by declaring a java service interface class.  As an OSGi service, this interface class serves as both the name for the service in the service registry, and defines the service contract (i.e. the interface method signatures...i.e. the method name, argument types, and return types) for that version of the service.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC &lt;/a&gt;(Google RPC) is a popular and high-performance rpc approach that allows developers to define networked services based upon protocol buffers (&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/proto3&quot;&gt;proto3&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;By extending &lt;a href=&quot;https://bndtools.org/&quot;&gt;bndtools &lt;/a&gt;recently-added &lt;a href=&quot;https://bnd.bndtools.org/instructions/generate.html&quot;&gt;code generation capability&lt;/a&gt;, it's now possible to generate an OSGi (remote) service API from just a proto3 service declaration.  All the classes necessary for an OSGi Remote Service API (service interface, arg and return types) can be generated by bndtools within Eclipse from a single proto3 file, immediately and completely.&lt;/p&gt;&lt;p&gt;Ready to implement-and-consume OSGi Services can be generated by Eclipse+bndtools + a proto3 service declaration.&lt;/p&gt;&lt;p&gt;Further, the proto3 service declaration can be modified, and the tooling will immediately generate new service API classes, compile, and package them into a bundle, all from within Eclipse+bndtools.&lt;/p&gt;&lt;p&gt;To get this bndtools-grpc generation with an example see &lt;a href=&quot;https://github.com/ECF/bndtools.grpc&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 22 Sep 2020 16:21:03 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Tanja Obradovic: 5 Talks Java Developers Won’t Want to Miss at EclipseCon 2020</title>
	<guid isPermaLink="false">6856 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/5-talks-java-developers-won%E2%80%99t-want-miss-eclipsecon-2020</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;Java is a major technology focus area for many members of the Eclipse community, and EclipseCon is always a great opportunity to expand and deepen your knowledge in this space. Last year’s EclipseCon featured about 20 Java-related sessions, and they’ve been popular&lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaT_yo5Dhajb9i-Pf0LbQ3z8&quot;&gt; YouTube replays&lt;/a&gt;.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;This year’s EclipseCon features another great lineup of Java-related sessions, including talks on Jakarta EE, Eclipse MicroProfile, and Java Development Tools (JDT). To help you plan your&lt;a href=&quot;https://www.eclipsecon.org/2020&quot;&gt; EclipseCon 2020&lt;/a&gt; experience, here are brief summaries of five talks you won’t want to miss:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·     &lt;a href=&quot;https://www.eclipsecon.org/node/3111&quot;&gt; Boost your APIs With GraphQL&lt;/a&gt;. GraphQL is an open source API query language originally developed by Facebook. Jean-François James will explain how GraphQL relates to REST and how it can be used. To demonstrate the potential, Jean-François will show you an&lt;a href=&quot;https://microprofile.io/&quot;&gt; Eclipse MicroProfile&lt;/a&gt; GraphQL project.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·     &lt;a href=&quot;https://www.eclipsecon.org/node/3141&quot;&gt; What's New in Java?&lt;/a&gt; With its six-month release cycle and preview features, Java evolves at a rapid pace. Manoj Palat will explore Java 14 and Java 15 features, including switch expressions, records, text blocks, pattern InstanceOf, and sealed types to help you understand how and when to use them. Manoj will also review features in upcoming Java releases&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·     &lt;a href=&quot;https://www.eclipsecon.org/node/3249&quot;&gt; What's New in JDT?&lt;/a&gt; Since last year’s EclipseCon, there have been four&lt;a href=&quot;https://www.eclipse.org/jdt/&quot;&gt; Eclipse JDT&lt;/a&gt; releases. Jeff Johnston will take you through new JDT features, focusing on those that aren’t part of supporting new Java language features. You’ll learn about new cleanup and quick fixes, enhanced completion support, formatting, and debug enhancements. Jeff will also provide live demos of the features and share related code samples.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·     &lt;a href=&quot;https://www.eclipsecon.org/node/3167&quot;&gt; AdoptOpenJDK — Making Java Free Again&lt;/a&gt;. With more than 140 million downloads in the last year, AdoptOpenJDK is a serious contender for production use of Java. Hendrik Eggers and George Adams will explain how they use AdoptOpenJDK to build on more than 15 different platforms, execute more than 87 million tests, and distribute OpenJDK binaries to millions of users. They’ll also explain how AdoptOpenJDK binaries compare to the Java binaries you use today.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·     &lt;a href=&quot;https://www.eclipsecon.org/node/3190&quot;&gt; Make your Microservices as Robust as Mission-Critical Systems With MicroProfile and Jakarta EE.&lt;/a&gt; Kenji Kazumura explains how to use and fine-tune Eclipse MicroProfile functions, such as fault tolerance, metrics, and OpenTracing to build microservices for mission-critical enterprise systems. You’ll also learn how to use these parameters in conjunction with Istio and tools such as Grafana and Kiali to monitor microservices.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Register for EclipseCon 2020 Today&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;EclipseCon is a virtual event this year and it’s being held October 19-22. There’s no cost to attend the sessions, but you do need to register. Space is limited, so be sure to register early to reserve your spot.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/2020/registration&quot;&gt;Get all the registration details and register now.&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; For event details, visit&lt;a href=&quot;https://www.eclipsecon.org/2020&quot;&gt; eclipsecon.org/2020&lt;/a&gt;.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;To join the EclipseCon conversation and get the latest updates:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·      Use #EclipseCon on social media&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·      Follow @EclipseCon on Twitter&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;And stay tuned for more insight into EclipseCon 2020. Our upcoming blogs will focus on:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·      Community Day events&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·      Tips to get the most out of EclipseCon&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 22 Sep 2020 12:57:04 +0000</pubDate>
</item>
<item>
	<title>Rohan Kumar: Migrating from Fabric8 Maven Plugin to Eclipse JKube 1.0.0</title>
	<guid isPermaLink="false">https://developers.redhat.com/blog/?p=781287</guid>
	<link>https://developers.redhat.com/blog/2020/09/21/migrating-from-fabric8-maven-plugin-to-eclipse-jkube-1-0-0/</link>
	<description>&lt;p&gt;The &lt;a href=&quot;https://developers.redhat.com/blog/2020/09/09/cloud-native-java-applications-made-easy-eclipse-jkube-1-0-0-now-available/&quot;&gt;recent release of Eclipse JKube 1.0.0&lt;/a&gt; means that the &lt;a href=&quot;https://github.com/fabric8io/fabric8-maven-plugin&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Fabric8 Maven Plugin&lt;/a&gt; is no longer supported. If you are currently using the Fabric8 Maven Plugin, this article provides instructions for migrating to &lt;a href=&quot;https://www.eclipse.org/jkube/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;JKube&lt;/a&gt; instead. I will also explain the relationship between Eclipse JKube and the Fabric8 Maven Plugin (they’re the same thing) and introduce the highlights of the new Eclipse JKube 1.0.0 release. These migration instructions are for developers working on the &lt;a href=&quot;https://developers.redhat.com/topics/kubernetes&quot;&gt;Kubernetes&lt;/a&gt; and &lt;a href=&quot;https://developers.redhat.com/products/openshift/overview&quot;&gt;Red Hat OpenShift&lt;/a&gt; platforms.&lt;/p&gt;
&lt;h2&gt;Eclipse JKube is the Fabric8 Maven Plugin&lt;/h2&gt;
&lt;p&gt;Eclipse JKube and the Fabric8 Maven Plugin are one and the same. Eclipse JKube was first released in 2014 under the name of Fabric8 Maven Plugin. The development team changed the name when we pre-released Eclipse JKube 0.1.0 in December 2019. For more about the name change, see my recent &lt;a href=&quot;https://developers.redhat.com/blog/2020/01/28/introduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift/&quot;&gt;introduction to Eclipse JKube&lt;/a&gt;. This article focuses on the migration path to JKube 1.0.0.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-781287&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;What’s new in Eclipse JKube 1.0.0&lt;/h2&gt;
&lt;p&gt;If you are hesitant about migrating to JKube, the following highlights from the new 1.0.0 release might change your mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Targeted migration with the new &lt;a href=&quot;https://search.maven.org/artifact/org.eclipse.jkube/kubernetes-maven-plugin&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Kubernetes Maven Plugin&lt;/a&gt; and &lt;a href=&quot;https://search.maven.org/search?q=a:openshift-maven-plugin&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;OpenShift Maven Plugin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://quay.io/organization/jkube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Improved base images&lt;/a&gt; based on &lt;a href=&quot;https://developers.redhat.com/articles/ubi-faq&quot;&gt;Red Hat Universal Base Images&lt;/a&gt; (UBI) and &lt;a href=&quot;https://developers.redhat.com/topics/enterprise-java&quot;&gt;JDK 11&lt;/a&gt;. (Fabric8 Maven Plugin’s images are based on JDK 8.)&lt;/li&gt;
&lt;li&gt;No coupling to the &lt;a href=&quot;http://fabric8.io/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;fabric8.io&lt;/a&gt; platform.&lt;/li&gt;
&lt;li&gt;Source-to-Image (S2I) support for web applications and &lt;a href=&quot;https://developers.redhat.com/products/quarkus/getting-started&quot;&gt;Quarkus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Better support for &lt;a href=&quot;https://developers.redhat.com/topics/containers&quot;&gt;containerizing&lt;/a&gt; your applications with &lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#_jib_java_image_builder&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;JIB integration&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:helm&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Helm support&lt;/a&gt; in the Kubernetes Maven Plugin and OpenShift Maven Plugin.&lt;/li&gt;
&lt;li&gt;Based on &lt;a href=&quot;https://github.com/eclipse/jkube/tree/master/jkube-kit&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;JKube Kit&lt;/a&gt;, which is independent of both &lt;a href=&quot;https://maven.apache.org/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Maven&lt;/a&gt; and &lt;a href=&quot;https://gradle.org/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support for &lt;a href=&quot;https://github.com/eclipse/jkube/issues/66&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Podman and Buildah&lt;/a&gt; is coming soon in Eclipse JKube 1.1.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fabric8 Maven Plugin generates both Kubernetes and Red Hat OpenShift artifacts, and it automatically detects and deploys resources to the underlying cluster. But developers who use Kubernetes don’t need OpenShift artifacts, and OpenShift developers don’t need Kubernetes manifests. We addressed this issue by splitting Fabric8 Maven Plugin into two plugins for &lt;a href=&quot;https://github.com/eclipse/jkube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Eclipse JKube&lt;/a&gt;: Kubernetes Maven Plugin and OpenShift Maven Plugin.&lt;/p&gt;
&lt;h2&gt;Eclipse JKube migration made easy&lt;/h2&gt;
&lt;p&gt;Eclipse JKube has a &lt;code&gt;migrate&lt;/code&gt; goal that automatically updates Fabric8 Maven Plugin references in your &lt;code&gt;pom.xml&lt;/code&gt; to the Kubernetes Maven Plugin or OpenShift Maven Plugin. In the next sections, I’ll show you how to migrate a Fabric8 Maven Plugin-based project to either platform.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/09/Untitled-Diagram.jpg&quot;&gt;&lt;img alt=&quot;Replace the code for the Fabric8 Maven plugin with either the code for the Kubernetes Maven plugin or the OpenShft Maven plugin.&quot; class=&quot; aligncenter  wp-image-781297 &quot; height=&quot;350&quot; src=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/09/Untitled-Diagram-1024x560.jpg&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For demonstration purposes, we can use my old random generator application, which displays a random JSON response at a &lt;code&gt;/random&lt;/code&gt; endpoint. To start, clone this repository:&lt;/p&gt;
&lt;pre&gt;$ git clone https://github.com/rohanKanojia/fmp-demo-project.git
cd fmp-demo-project
&lt;/pre&gt;
&lt;p&gt;Then build the project:&lt;/p&gt;
&lt;pre&gt;$ mvn clean install
&lt;/pre&gt;
&lt;h2&gt;Eclipse JKube migration for Kubernetes users&lt;/h2&gt;
&lt;p&gt;Use the following goal to migrate to Eclipse JKube’s Kubernetes Maven Plugin. Note that we have to specify a complete &lt;code&gt;artifactId&lt;/code&gt; and &lt;code&gt;groupId&lt;/code&gt; because the plugin is not automatically included in the &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;$ mvn org.eclipse.jkube:kubernetes-maven-plugin:migrate
&lt;/pre&gt;
&lt;p&gt;Here are the logs for the &lt;code&gt;migrate&lt;/code&gt; goal:&lt;/p&gt;
&lt;pre&gt;fmp-demo-project : $ mvn org.eclipse.jkube:kubernetes-maven-plugin:migrate
[INFO] Scanning for projects...
[INFO]
[INFO] ----------------------&amp;lt; meetup:random-generator &amp;gt;-----------------------
[INFO] Building random-generator 0.0.1
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- kubernetes-maven-plugin:1.0.0-rc-1:migrate (default-cli) @ random-generator ---
[INFO] k8s: Found Fabric8 Maven Plugin in pom with version 4.4.1
[INFO] k8s: Renamed src/main/fabric8 to src/main/jkube
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  3.154 s
[INFO] Finished at: 2020-09-08T19:32:01+05:30
[INFO] ------------------------------------------------------------------------
fmp-demo-project : $
&lt;/pre&gt;
&lt;p&gt;You’ll notice that all of the Fabric8 Maven Plugin references have been replaced by references to Eclipse JKube. The Kubernetes Maven Plugin is the same as the Fabric8 Maven Plugin. The only differences are the &lt;code&gt;k8s&lt;/code&gt; prefix and that it generates Kubernetes manifests.&lt;/p&gt;
&lt;p&gt;Once you’ve installed the Kubernetes Maven Plugin, you can deploy your application as usual:&lt;/p&gt;
&lt;pre&gt;$ mvn k8s:build k8s:resource k8s:deploy
&lt;/pre&gt;
&lt;h2&gt;Eclipse JKube migration for OpenShift users&lt;/h2&gt;
&lt;p&gt;Use the same migration process for the OpenShift Maven Plugin as you would for the Kubernetes Maven Plugin. Run the &lt;code&gt;migrate&lt;/code&gt; goal but with the OpenShift MavenPlugin specified:&lt;/p&gt;
&lt;pre&gt;$ mvn org.eclipse.jkube:openshift-maven-plugin:migrate
&lt;/pre&gt;
&lt;p&gt;Here are the logs for this &lt;code&gt;migrate&lt;/code&gt; goal:&lt;/p&gt;
&lt;pre&gt;fmp-demo-project : $ mvn org.eclipse.jkube:openshift-maven-plugin:migrate
[INFO] Scanning for projects...
[INFO]
[INFO] ----------------------&amp;lt; meetup:random-generator &amp;gt;-----------------------
[INFO] Building random-generator 0.0.1
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- openshift-maven-plugin:1.0.0-rc-1:migrate (default-cli) @ random-generator ---
[INFO] k8s: Found Fabric8 Maven Plugin in pom with version 4.4.1
[INFO] k8s: Renamed src/main/fabric8 to src/main/jkube
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  4.227 s
[INFO] Finished at: 2020-09-08T19:41:34+05:30
[INFO] ------------------------------------------------------------------------
&lt;/pre&gt;
&lt;p&gt;This goal replaces all of your Fabric8 Maven Plugin references with references to &lt;a href=&quot;https://www.eclipse.org/jkube/docs/openshift-maven-plugin&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;OpenShift Maven Plugin&lt;/a&gt;. You can then deploy your application to Red Hat OpenShift just as you normally would:&lt;/p&gt;
&lt;pre&gt;$ mvn oc:build oc:resource oc:deploy
&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;See the &lt;a href=&quot;https://www.eclipse.org/jkube/docs/migration-guide/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Eclipse JKube migration guide&lt;/a&gt; for more about migrating from the Fabric8 Maven Plugin on OpenShift or Kubernetes. Feel free to create a &lt;a href=&quot;https://github.com/eclipse/jkube/issues/new&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;GitHub issue&lt;/a&gt; to report any problems that you encounter during the migration. We really value your feedback, so please report bugs, ask for improvements, and tell us about your migration experience.&lt;/p&gt;
&lt;p&gt;Whether you are already using Eclipse JKube or just curious about it, don’t be shy about joining our welcoming community:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide feedback on &lt;a href=&quot;https://github.com/eclipse/jkube/issues&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Craft code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;push&lt;/a&gt; a &lt;a href=&quot;https://github.com/eclipse/jkube/pulls&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;pull request&lt;/a&gt; to the Eclipse JKube repository.&lt;/li&gt;
&lt;li&gt;Interact with the Eclipse JKube team on &lt;a href=&quot;https://gitter.im/eclipse/jkube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Gitter&lt;/a&gt; and the &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/jkube-dev&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;JKube mailing list&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ask questions and get answers on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/jkube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&quot;a2a_button_facebook&quot; href=&quot;https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F21%2Fmigrating-from-fabric8-maven-plugin-to-eclipse-jkube-1-0-0%2F&amp;amp;linkname=Migrating%20from%20Fabric8%20Maven%20Plugin%20to%20Eclipse%20JKube%201.0.0&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_twitter&quot; href=&quot;https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F21%2Fmigrating-from-fabric8-maven-plugin-to-eclipse-jkube-1-0-0%2F&amp;amp;linkname=Migrating%20from%20Fabric8%20Maven%20Plugin%20to%20Eclipse%20JKube%201.0.0&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Twitter&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_linkedin&quot; href=&quot;https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F21%2Fmigrating-from-fabric8-maven-plugin-to-eclipse-jkube-1-0-0%2F&amp;amp;linkname=Migrating%20from%20Fabric8%20Maven%20Plugin%20to%20Eclipse%20JKube%201.0.0&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;LinkedIn&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_email&quot; href=&quot;https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F21%2Fmigrating-from-fabric8-maven-plugin-to-eclipse-jkube-1-0-0%2F&amp;amp;linkname=Migrating%20from%20Fabric8%20Maven%20Plugin%20to%20Eclipse%20JKube%201.0.0&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Email&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_print&quot; href=&quot;https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F21%2Fmigrating-from-fabric8-maven-plugin-to-eclipse-jkube-1-0-0%2F&amp;amp;linkname=Migrating%20from%20Fabric8%20Maven%20Plugin%20to%20Eclipse%20JKube%201.0.0&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Print&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_reddit&quot; href=&quot;https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F21%2Fmigrating-from-fabric8-maven-plugin-to-eclipse-jkube-1-0-0%2F&amp;amp;linkname=Migrating%20from%20Fabric8%20Maven%20Plugin%20to%20Eclipse%20JKube%201.0.0&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Reddit&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_flipboard&quot; href=&quot;https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F21%2Fmigrating-from-fabric8-maven-plugin-to-eclipse-jkube-1-0-0%2F&amp;amp;linkname=Migrating%20from%20Fabric8%20Maven%20Plugin%20to%20Eclipse%20JKube%201.0.0&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Flipboard&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_dd addtoany_share_save addtoany_share&quot; href=&quot;https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F21%2Fmigrating-from-fabric8-maven-plugin-to-eclipse-jkube-1-0-0%2F&amp;amp;title=Migrating%20from%20Fabric8%20Maven%20Plugin%20to%20Eclipse%20JKube%201.0.0&quot;&gt;&lt;img alt=&quot;Share&quot; src=&quot;https://static.addtoany.com/buttons/favicon.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a href=&quot;https://developers.redhat.com/blog/2020/09/21/migrating-from-fabric8-maven-plugin-to-eclipse-jkube-1-0-0/&quot; rel=&quot;nofollow&quot;&gt;Migrating from Fabric8 Maven Plugin to Eclipse JKube 1.0.0&lt;/a&gt; appeared first on &lt;a href=&quot;https://developers.redhat.com/blog&quot; rel=&quot;nofollow&quot;&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 21 Sep 2020 07:00:19 +0000</pubDate>
</item>
<item>
	<title>Tanja Obradovic: Jakarta EE Community Update September 2020</title>
	<guid isPermaLink="false">6854 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/jakarta-ee-community-update-september-2020</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;After a pause with blogs in August, I am happy to report that momentum toward the Jakarta EE 9 final release is building, we have a release date, and there are a number of virtual events that will help you stay up to date on the latest advances in Jakarta EE and the Java ecosystem. Read on for details.&lt;br /&gt;
 &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;The Jakarta EE Working Group Is Growing&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;We’re very pleased to share the news that Jelastic has joined the Jakarta EE Working Group as a Participant member. Jelastic develops turnkey, multi-cloud Platform as a Service (PaaS) solutions that unify and automate cloud infrastructure management.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Welcome to the Jakarta EE Working Group, Jelastic!&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;For a complete list of Jakarta EE Working Group members, click&lt;a href=&quot;https://jakarta.ee/membership/members/&quot;&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt; &lt;/h2&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;More Tooling, IDE, and Cloud Providers Are Supporting Jakarta EE&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;Implementing the new namespace in Jakarta EE 9 allows vendors and solution providers to migrate faster and more cost effectively than waiting until Jakarta EE 10, which will also include new features, enhancements, and other major changes.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; Here are two of the most recent companies to announce their support of Jakarta EE 9:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  The Jelastic Platform as a Service (PaaS) team is actively integrating Jakarta EE 9 within the Jelastic cloud platform. For details, click&lt;a href=&quot;https://jelastic.com/blog/jakartaee-9-release/&quot;&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  The IntelliJ IDEA has also been migrated to the new Jakarta EE namespace. To help its users learn more about Jakarta EE 9, IntelliJ hosted a webinar entitled “Jakarta EE 9 and Beyond” by Ivar Grimstad, the Eclipse Foundation’s Jakarta EE developer advocate. To view a replay of the webinar, click&lt;a href=&quot;https://blog.jetbrains.com/idea/2020/09/webinar-jakarta-ee-9-and-beyond/&quot;&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;To help companies make the transition, the Jakarta EE community has developed a data sheet summarizing the namespace migration challenge and opportunity. You can download the data sheet,&lt;a href=&quot;https://jakarta.ee/resources/JakartaEE-Datasheet-July172020_final.pdf&quot;&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt; &lt;/h2&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;We Have a Jakarta EE 9 Final Release Date&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;With more Jakarta EE 9 specifications being approved and many others close to receiving approval, the Jakarta EE 9 final release date has been set for November 20, 2020. Here’s a visual summary of the latest approval status.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/CapturePieChart.PNG&quot; style=&quot;height: 345px; width: 554px;&quot; /&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;Save the Date: JakartaOne Livestream Is December 8&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;To coincide with the Jakarta EE 9 final release, the JakartaOne Livestream event will take place on December 8.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;This one-day virtual conference is a great way for everyone in the community to learn more about the technical benefits and architectural advances that become possible with cloud native Java, Jakarta EE, Eclipse MicroProfile, and Java EE technologies.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;If you have expertise or insight you’d like to share with attendees, there’s still time to submit a paper. The call for papers (CFP) deadline has been extended to October 1, 2020.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Stay tuned for registration details. In the meantime:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  &lt;a href=&quot;https://jakartaone.org/2020/&quot;&gt;Visit the JakartaOne Livestream website&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  &lt;a href=&quot;https://www.papercall.io/jakartaone-2020&quot;&gt;Submit a paper&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Follow @JakartaOneConf on Twitter for live event updates, speaker announcements, news, and more&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;JakartaOne Livestream — Brazil: Watch the Replay&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;The JakartaOne Livestream event in Brazil on August 29 was a huge success with 330 registered individuals: almost 200 people attending the live event and more than 130 watching the replay. The event included a keynote, vendor talks about compatible implementations by Red Hat, Tomitribe, Payara, and Oracle, and five technical talks.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; To see the session topics, click&lt;a href=&quot;https://jakartaone.org/2020/brazil/#plan-of-the-day&quot;&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; To watch the session replays, click&lt;a href=&quot;https://www.youtube.com/watch?v=gA5I4ilfs5k&amp;amp;list=PLutlXcN4EAwCMnHdqcRPfXBne5D7_hDZd&quot;&gt; here&lt;/a&gt;. Note that the sessions are delivered in Portuguese.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;Upcoming Events &lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;There are a number of upcoming events related to Jakarta EE. Here are brief summaries to help you choose the ones you want to attend.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;September 19: Delhi and NCR JUG Talk&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;This online event hosted by the Delhi and NCR Java User Group (JUG) will feature a talk on “Jakarta EE 9 and Beyond” by myself and Ivar Grimstad:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Time: 6:00 p.m. IST&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Details and registration:&lt;a href=&quot;https://www.meetup.com/Delhi-NCR-JUG/events/273027423/&quot;&gt; Delhi and NCR JUG Meetup site&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Twitter:&lt;a href=&quot;https://twitter.com/DelhiJUG&quot;&gt; twitter.com/DelhiJUG&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;October 12: JakartaOne Livestream — Español&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Event details:&lt;a href=&quot;https://jakartaone.org/2020/hispano/&quot;&gt; jakartaone.org/2020/hispano&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Registration:&lt;a href=&quot;https://www.crowdcast.io/e/jakartaone-livestream/register?utm_source=profile&amp;amp;utm_medium=profile_web&amp;amp;utm_campaign=profile&quot;&gt; Register through Crowdcast&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Sessions are in Spanish&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;October 13-14: Virtual Community Booth at the J4K Conference&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Because the community has expressed interest in public Steering Committee calls, the next &lt;em&gt;&lt;u&gt;Steering Committee call will take place on October 13 at 1:30 p.m. EDT from the J4K Conference virtual booth&lt;/u&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Also, our next &lt;em&gt;&lt;u&gt;Jakarta EE community update call will take place October 14 at 11:00 a.m. EDT at our virtual booth at the J4K Conference&lt;/u&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Finally, Jakarta EE and MicroProfile community experts will be hosting short talks, demos, and Q&amp;amp;A sessions at the virtual booth.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Be sure to register to visit the virtual booth. We’ll provide the links as soon as they’re available.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Join Community Update Calls&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Jakarta EE community calls are open to everyone! For upcoming dates and connection details, see the&lt;a href=&quot;https://calendar.google.com/calendar/embed?src=eclipse-foundation.org_3281qms6riu4kdf354jn5idon0%40group.calendar.google.com&amp;amp;ctz=America%2FToronto&quot;&gt; Jakarta EE Community Calendar&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;The next call will be October 14 at 11:00 a.m. EDT. This month’s call coincides with the virtual J4K Conference so we’ll take the opportunity to open the call to a wider audience by hosting it at the conference.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Topics will include:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Progress update on Jakarta EE 9 release&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  New on Jakarta EE 9 from Eclipse Foundation&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Topics and questions from the community&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;We know it’s not always possible to join calls in real time, so here are links to the recordings and presentations:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  &lt;a href=&quot;https://drive.google.com/drive/folders/16HhtBhtE-BWwO6ZmfusUoNRWwX2oFh-g&quot;&gt;September call presentations&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaSY0Um6Vbez3G5Lc2AMaMw7&quot;&gt;The complete playlist&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;Stay Connected With the Jakarta EE Community&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;The Jakarta EE community is very active and there are a number of channels to help you stay up to date with all of the latest and greatest news and information. Subscribe to your preferred channels today:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Social media:&lt;a href=&quot;https://twitter.com/jakartaee&quot;&gt; Twitter&lt;/a&gt;,&lt;a href=&quot;https://www.facebook.com/JakartaEE/&quot;&gt; Facebook&lt;/a&gt;,&lt;a href=&quot;https://www.linkedin.com/groups/13597511/&quot;&gt; LinkedIn Group&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Mailing lists: jakarta.ee-community@eclipse.org, jakarta.ee-wg@eclipse.org,&lt;a href=&quot;https://jakarta.ee/connect/mailing-lists/&quot;&gt; project mailing lists&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Newsletters, blogs, and emails:&lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/&quot;&gt; Eclipse newsletter&lt;/a&gt;,&lt;a href=&quot;https://jakartablogs.ee/#main-content&quot;&gt; Jakarta EE blogs&lt;/a&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;·  Meetings:&lt;a href=&quot;https://www.meetup.com/jakartatechtalks_/&quot;&gt; Jakarta Tech Talks&lt;/a&gt;,&lt;a href=&quot;https://calendar.google.com/calendar/embed?src=eclipse-foundation.org_3281qms6riu4kdf354jn5idon0%40group.calendar.google.com&amp;amp;ctz=America%2FToronto&quot;&gt; Jakarta EE Update&lt;/a&gt;, Jakarta Town Hall, and Eclipse Foundation events and conferences&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; You can find the complete list of channels,&lt;a href=&quot;https://jakarta.ee/connect/&quot;&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; To help shape the future of open source, cloud native Java, get involved in the&lt;a href=&quot;https://jakarta.ee/membership/&quot;&gt; Jakarta EE Working Group&lt;/a&gt;.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; To learn more about Jakarta EE-related plans and check the date for the next Jakarta Tech Talk, be sure to bookmark the&lt;a href=&quot;https://calendar.google.com/calendar/embed?src=eclipse-foundation.org_3281qms6riu4kdf354jn5idon0%40group.calendar.google.com&amp;amp;ctz=America%2FToronto&quot;&gt; Jakarta EE Community Calendar&lt;/a&gt;. &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/tk-ljFPnfL0y-xZ-CYwl-1W9qG9yhPo4lDSXSRhiYHSOmfP8MoF3RjxU3jIZFBtH9774PBlKSU0g6KRJC5YgP8qPUqa04BPQxCbU3R2ppT87DjKRqkQy89g1aPf4aBFIRZBMws9R&quot; style=&quot;height: 161px; width: 263px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 18 Sep 2020 15:33:20 +0000</pubDate>
</item>
<item>
	<title>itemis: After eight: How to set up Eclipse tool development with OpenJDK, GEF, and OpenJFX for newer Java versions</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/after-eight-eclipse-development-with-java-and-javafx</guid>
	<link>https://blogs.itemis.com/en/after-eight-eclipse-development-with-java-and-javafx</link>
	<description>&lt;p&gt;&lt;strong&gt;The article describes the solution to possible stumbling blocks in overcoming a transition from Oracle JDK to OpenJDK 11 in PDE development with GEF and JavaFX.&lt;/strong&gt;&lt;/p&gt;  
&lt;h2&gt;Eclipse development with Java and JavaFX&lt;/h2&gt; 
&lt;p&gt;&quot;Legacy – with concrete feet into the future&quot; I read in an &lt;em&gt;announcement&lt;/em&gt; and wondered whether Java 8 will soon be on the way to the technological future with concrete shoes. But before this happens, we prefer to strip them off and migrate to an up-to-date Java version.&lt;/p&gt; 
&lt;p&gt;We will focus on an eclipse-based application with JavaFX components below. The conversion is to be made to the latest Java-LTE version, i.e. Java 11. The following survey shows that many developers are still cautious about migrating to higher versions of Java:&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;jaxenter&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog%20(2020)/Eclipse-Anwendungen%20mit%20e(fx)clipse,%20JavaFX,%20OpenJDK%20mit%20Java%2011%20erfolgreich%20aufsetzen/jaxenter.png?width=600&amp;amp;name=jaxenter.png&quot; style=&quot;width: 600px; display: block; margin: 0px auto;&quot; width=&quot;600&quot; /&gt;
&lt;/div&gt; 
&lt;h2&gt;JavaFX is no longer a JRE component from Java 11&lt;/h2&gt; 
&lt;p&gt;The first hurdle is already apparent when switching to Java 11, because JavaFX is no longer part of the JDK, either at Oracle or in the open source distribution OpenJDK. There are several solutions to this problem. One would be to use a JDK distribution that delivers Java 11 with JavaFX, such as Bellsoft's Liberica JDK. However, this article focuses on using e(fx)clipse and the OpenJFX SDK.&lt;/p&gt; 
&lt;p&gt;We use JavaFX in our YAKINDU products and have successfully and successfully converted the development of the GEF framework to the following configuration:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/downloads/packages&quot; title=&quot;Link to www.eclipse.org (opens in a new tab)&quot;&gt;Eclipse IDE for Eclipse-Committers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://jdk.java.net/archive/&quot; title=&quot;Link to OpenJDK Version 11.0.2 (opens in a new tab)&quot;&gt;OpenJDK (Version 11.0.)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gluonhq.com/products/javafx/&quot; title=&quot;Link to OpenJFX SDK Version 11.0.2 (opens in a new tab)&quot;&gt;OpenJFX SDK (Version 11.0.2)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;e(fx)clipse – IDE – PDE (Version 3.6.0)&lt;br /&gt;&lt;br /&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In the following we on the one hand convert our development environment to OpenJDK 11 with OpenJFX and e(fx)clipse, and then turn to the transition for our development, including compiler and launch configurations.&lt;/p&gt; 
&lt;h2&gt;Transforming the development environment&lt;/h2&gt; 
&lt;p&gt;We download and install a new Eclipse IDE, ideally for Eclipse committers.&lt;/p&gt; 
&lt;p&gt;We upload &lt;strong&gt;OpenJDK 11&lt;/strong&gt;to any directory.&lt;/p&gt; 
&lt;p&gt;We download &lt;strong&gt;OpenJFX SDK&lt;/strong&gt;and store it in a directory.&lt;/p&gt; 
&lt;p&gt;We install &lt;span style=&quot;font-weight: bold;&quot;&gt;e(fx)clipse&lt;/span&gt; at least in version 3.6.0 in our Eclipse environment (Update-Site:&lt;a href=&quot;https://download.eclipse.org/efxclipse/updates-nightly/site/&quot; title=&quot;Link to www.eclipse.org (opens in a new tab)&quot;&gt; &lt;/a&gt;&lt;a href=&quot;https://download.eclipse.org/efxclipse/updates-nightly/site/&quot; title=&quot;Link to www.eclipse.org (opens in a new tab)&quot;&gt;https://download.eclipse.org/efxclipse/updates-nightly/site/&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;We finish Eclipse and insert the following lines below the &quot;-vmargs&quot; line into the &lt;code&gt;eclipse.ini&lt;/code&gt; file (&quot;---add-modules=ALL-SYSTEM&quot; does not need to be re-inserted if already available):&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;-Dosgi.framework.extensions=org.eclipse.fx.osgi
-Defxclipse.java-modules.dir=C:\Program&lt;br /&gt;Files\Java\javafx-sdk-11.0.2\lib
--add-modules=ALL-SYSTEM
&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We adjust the path to the OpenJFX libraries according to the operating system and the location in the file system. We don't use quotation marks, even if the path contains spaces. Otherwise, the setting would be tacitly ignored. Furthermore, the path must not be terminated with a slash or backslash. The changes to the &lt;code&gt;eclipse.ini &lt;/code&gt;must be made after the installation of e(fx)clipse, otherwise Eclipse will not start again.&lt;/p&gt; 
&lt;p&gt;If OpenJDK 11 is the only JDK installed, nothing else needs to be changed. If OpenJDK 11 is not installed, but is only unpacked or other Java versions are installed on the computer, then the following lines should also be inserted in the &lt;code&gt;eclipse.ini &lt;/code&gt;directly above the &quot;-vmargs&quot; line:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;-vm&lt;br /&gt;/path/to/jdk-11.0.5+10/Contents/Home/bin (adapt to your directory)&lt;/pre&gt; 
&lt;p&gt;Now let's start Eclipse again. We then install the end-user tools of GEF DOT via the eclipse release update site (for example, &lt;a href=&quot;http://download.eclipse.org/releases/2019-06&quot; title=&quot;Link to www.eclipse.org (v)&quot;&gt;http://download.eclipse.org/releases/2019-06&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;These use JavaFX (and SWT integration) so we can check if our installation worked. If successful, the &quot;DOT Graph&quot; view should look like this:&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Google%20Drive%20Integration/Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208-Sep-10-2020-07-32-24-83-AM.png?width=600&amp;amp;name=Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208-Sep-10-2020-07-32-24-83-AM.png&quot; style=&quot;width: 600px; display: block; margin: 0px auto;&quot; width=&quot;600&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt;Possible source of error here are the settings in the eclipse.ini, which we should look again step by step.&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Google%20Drive%20Integration/Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208-Sep-10-2020-07-32-24-94-AM.png?width=600&amp;amp;name=Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208-Sep-10-2020-07-32-24-94-AM.png&quot; style=&quot;width: 600px; display: block; margin: 0px auto;&quot; width=&quot;600&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt;Possible source of error here are the settings in the &lt;code&gt;eclipse.ini&lt;/code&gt;, which we should look again step by step.&lt;/p&gt; 
&lt;p&gt;If the IDE finally runs successfully with OpenJDK 11, OpenJFX 11 and e(fx)clipse, we now take care of the workspace and the runtime.&lt;/p&gt; 
&lt;h2&gt;Transforming the development&lt;/h2&gt; 
&lt;p&gt;In order to change the trend, the following must be done:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Set OpenJDK as JRE to use&lt;/li&gt; 
 &lt;li&gt;Ensure that this JRE is used as an execution environment&lt;/li&gt; 
 &lt;li&gt;Set the openjfx-libs folder in the e(fx)clipse preferences&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These changes should compile the workspace. The following section describes these steps in more detail.&lt;/p&gt; 
&lt;p&gt;We set OpenJDK as a runtime environment in the Eclipse preferences. To do this, we select  „Window → Preferences → Java → Installed JREs → Add … and the path to the bin directory of the JDK.&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Google%20Drive%20Integration/Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208-2.png?width=600&amp;amp;name=Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208-2.png&quot; style=&quot;width: 600px; display: block; margin: 0px auto;&quot; width=&quot;600&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt;We make sure that this JDK is applied to the execution environment we set. If necessary, we may remove all other JDKs to ensure that the OpenJDK is actually used:&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Google%20Drive%20Integration/Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208-1.png?width=600&amp;amp;name=Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208-1.png&quot; style=&quot;width: 600px; display: block; margin: 0px auto;&quot; width=&quot;600&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt;We set the OpenJFX SDK in the preferences for e(fx)clipse. Above, we saved the OpenJFX SDK to a directory. Its lib directory must be in the Eclipse Preferences &lt;em&gt;(Window → Preferences → JavaFX)&lt;/em&gt; JavaFX 11 + SDK. This should be the same path as before in the &lt;code&gt;eclipse.ini&lt;/code&gt;. This setting makes your Eclipse aware of the JavaFX libraries for development.&lt;/p&gt; 
&lt;div&gt;
 &lt;img alt=&quot;&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Google%20Drive%20Integration/Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208.png?width=600&amp;amp;name=Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208.png&quot; style=&quot;width: 600px; display: block; margin: 0px auto;&quot; width=&quot;600&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt;Now everything is done to compile the workspace. If we want to start the application in the runtime, there is still a small thing to do.&lt;/p&gt; 
&lt;p&gt;We'll add the following VM arguments in the launch configuration; they are the same ones that we have previously entered in the &lt;code&gt;eclipse.ini&lt;/code&gt; :&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;-Dosgi.framework.extensions=org.eclipse.fx.osgi
-Defxclipse.java-modules.dir=C:\Program&lt;br /&gt;Files\Java\javafx-sdk-11.0.2\lib
&lt;/pre&gt; 
&lt;div&gt;
 &lt;img alt=&quot;&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Google%20Drive%20Integration/Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208-3.png?width=600&amp;amp;name=Kopie%20von%20How%20to%20set%20up%20eclipse%20tool%20development%20with%20OpenJDK,%20GEF,%20OpenJFX%20with%20Java%20V%20%3E%208-3.png&quot; style=&quot;width: 600px; display: block; margin: 0px auto;&quot; width=&quot;600&quot; /&gt;
&lt;/div&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: #f9f9f9;&quot;&gt;If necessary, you can load the sources (https://github.com/eclipse/gef.git) of the GEF framework into the workspace and try out the above points directly. For more information on GEF development, see the developer documentation page: &lt;/span&gt; &lt;a href=&quot;https://github.com/eclipse/gef/wiki#developer-documentation&quot; title=&quot;Link to developer documentation page (opens in a new tab)&quot;&gt;https://github.com/eclipse/gef/wiki#developer-documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;The procedure above should be used to switch existing Eclipse applications to OpenJDK 11 and OpenJFX 11 with e(fx)clipse.&lt;/p&gt; 
&lt;p&gt;Are there any comments or questions about this approach?&lt;/p&gt; 
&lt;p&gt;We welcome any kind of feedback.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fafter-eight-eclipse-development-with-java-and-javafx&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 18 Sep 2020 08:00:00 +0000</pubDate>
	<author>svenja.wendler@itemis.de (Svenja Wendler)</author>
</item>
<item>
	<title>Webtools News: WTP 3.19 Released!</title>
	<guid isPermaLink="false">http://www.eclipse.org/webtools/news.php#permalink193</guid>
	<link>http://eclipse.org/webtools/releases/3.19</link>
	<description>&lt;div&gt;
		The Eclipse Web Tools Platform 3.19 has been released!
		&lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt;
		and updates can be performed using the
		Eclipse IDE 2020-09
		&lt;a href=&quot;http://download.eclipse.org/releases/2020-09/&quot;&gt;Update Site&lt;/a&gt;
		or through the
		&lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;
		.
		Release 3.19 is included in the 2020-09
		&lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2020-09/r/eclipse-ide-enterprise-java-developers&quot;&gt;
			Eclipse IDE for Enterprise Java Developers
		&lt;/a&gt;
		, with selected portions also included in several
		&lt;a href=&quot;http://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;
		. Adopters can download
		&lt;a href=&quot;http://download.eclipse.org/webtools/downloads/&quot;&gt;the R3.19.0 p2 repository&lt;/a&gt;
		directly and combine it with the necessary dependencies.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/webtools/news.php#permalink193&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 16 Sep 2020 22:55:18 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms and EMF Client Platform 1.25.0 released!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=43598</guid>
	<link>https://eclipsesource.com/blogs/2020/09/16/emf-forms-and-emf-client-platform-1-25-0-released/</link>
	<description>&lt;p&gt;We are happy to announce that with the Eclipse Release 2020-09, we have also shipped  EMF Forms and EMF Client Platform...&lt;/p&gt;&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2020/09/16/emf-forms-and-emf-client-platform-1-25-0-released/&quot; rel=&quot;nofollow&quot;&gt;EMF Forms and EMF Client Platform 1.25.0 released!&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 16 Sep 2020 14:35:03 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.17.0.AM1 for Eclipse 2020-09</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.17.0.am1.html</guid>
	<link>https://tools.jboss.org/blog/4.17.0.am1.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.17.0.AM1 (Developer Milestone 1) build for Eclipse 2020-09.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/2020-09/4.17.0.AM1.html&quot;&gt;JBoss Tools 4.17.0 AM1&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.17.0.AM1.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#quarkus&quot;&gt;&lt;/a&gt;Quarkus&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;support-for-yaml-configuration-file&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#support-for-yaml-configuration-file&quot;&gt;&lt;/a&gt;Support for YAML configuration file&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Quarkus supports configuration through YAML format. For more information,
      see the &lt;a href=&quot;https://quarkus.io/guides/config#yaml&quot;&gt;Quarkus documentation&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In order to use it, follow the steps:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;create a Quarkus project using the new Quarkus wizard&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;create a new &lt;code&gt;application.yaml&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; next to the &lt;code&gt;application.properties&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The editor will open and you will get content assist and syntax validation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime  providers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;new-runtime-provider&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#new-runtime-provider&quot;&gt;&lt;/a&gt;New Runtime Provider&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new runtime provider has been added for Hibernate 6.0. It incorporates Hibernate Core version 6.0.0.Alpha6 and Hibernate Tools version 6.0.0.Alpha2.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#runtime-provider-updates&quot;&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.4 runtime provider now incorporates Hibernate Core version 5.4.21.Final and Hibernate Tools version 5.4.21.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.3 runtime provider now incorporates Hibernate Core version 5.3.18.Final and Hibernate Tools version 5.3.18.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 16 Sep 2020 13:27:44 +0000</pubDate>
</item>
<item>
	<title>Tom Schindl: Browser like BoxShadow for JavaFX coming with e(fx)clipse 3.7.0</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=5298</guid>
	<link>https://tomsondev.bestsolution.at/2020/09/16/browser-like-boxshadow-for-javafx-coming-with-efxclipse-3-7-0/</link>
	<description>&lt;p&gt;Using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow&quot;&gt;BoxShadow&lt;/a&gt; is a very common thing in modern UIs, so it might not be suprising that designers defining UIs often also use them heavily.&lt;/p&gt;
&lt;p&gt;Unfortunately &lt;a href=&quot;https://openjfx.io/&quot;&gt;JavaFX&lt;/a&gt; has NO 100% compatible effect and even worse one who is closest (&lt;a href=&quot;https://openjfx.io/javadoc/14/javafx.graphics/javafx/scene/effect/DropShadow.html&quot;&gt;DropShadow&lt;/a&gt;) leads to a massive performance hit as shown in this video&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;On the left hand side is a Node who has a &lt;a href=&quot;https://openjfx.io/javadoc/14/javafx.graphics/javafx/scene/effect/DropShadow.html&quot;&gt;DropShadow-Effect&lt;/a&gt; applied to it and you notice that once the effect is applied that the animation isn’t smooth any more. On the right hand side you see a new Node we’ll release with &lt;a href=&quot;https://www.eclipse.org/efxclipse/index.html&quot;&gt;e(fx)clipse&lt;/a&gt; 3.7.0 who provides a new BoxShadow-Node (named BoxShadow2).&lt;/p&gt;
&lt;p&gt;Beside getting a huge performance win, the BoxShadow-Node uses the same semantics the browser counterpart does so you can port CSS definition to your JavaFX-Application. &lt;/p&gt;
&lt;p&gt;For completness here’s the code for this demo video.&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;package org.eclipse.fx.ui.controls.demo;

import org.eclipse.fx.ui.controls.effects.BoxShadow2;

import javafx.animation.Animation;
import javafx.animation.Animation.Status;
import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.effect.DropShadow;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.util.Duration;

public class InTheShadow extends Application {

	public static void main(String[] args) {
		launch(args);
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		BorderPane p = new BorderPane();
		p.setPadding(new Insets(20));

		Button shadowMe = new Button(&quot;Toggle Shadow&quot;);
		p.setTop(shadowMe);

		Region pane;

		if (Boolean.getBoolean(&quot;efxclipse-shadow&quot;)) {
			BoxShadow2 shadow = new BoxShadow2(createComplexUI());
			shadow.setShadowVisible(false);
			pane = shadow;
		} else {
			pane = new StackPane(createComplexUI());
		}

		p.setCenter(pane);

		shadowMe.setOnAction(evt -&amp;gt; toggleShadow(pane));

		Scene s = new Scene(p, 1200, 800);
		primaryStage.setTitle(&quot;efxclipse-shadow: &quot; + Boolean.getBoolean(&quot;efxclipse-shadow&quot;));
		primaryStage.setScene(s);
		primaryStage.show();
	}

	private void toggleShadow(Region pane) {
		if (pane instanceof BoxShadow2) {
			BoxShadow2 s = (BoxShadow2) pane;
			s.setShadowVisible(!s.isShadowVisible());
		} else {
			if (pane.getEffect() != null) {
				pane.setEffect(null);
			} else {
				DropShadow dropShadow = new DropShadow();
				dropShadow.setRadius(5.0);
				dropShadow.setOffsetX(3.0);
				dropShadow.setOffsetY(3.0);
				dropShadow.setColor(Color.color(0.4, 0.5, 0.5));
				pane.setEffect(dropShadow);
			}
		}
	}

	private Node createComplexUI() {
		StackPane pane = new StackPane();
		pane.setStyle(&quot;-fx-background-color: white&quot;);

		for (int i = 0; i &amp;lt; 100; i++) {
			Button b = new Button(&quot;Button &quot; + i);
			b.setTranslateX(i % 100);
			pane.getChildren().add(b);
		}

		Button animated = new Button(&quot;Animated&quot;);
		StackPane.setAlignment(animated, Pos.BOTTOM_CENTER);

		TranslateTransition t = new TranslateTransition(Duration.millis(1000), animated);
		t.setAutoReverse(true);
		t.setFromX(-300);
		t.setToX(300);
		t.setCycleCount(Animation.INDEFINITE);
		animated.setOnAction(evt -&amp;gt; {
			if (t.getStatus() == Status.RUNNING) {
				t.pause();
			} else {
				t.play();
			}
		});

		pane.getChildren().add(animated);

		return pane;
	}

}
&lt;/pre&gt;</description>
	<pubDate>Wed, 16 Sep 2020 09:54:08 +0000</pubDate>
</item>
<item>
	<title>N4JS: N4JS goes LSP</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-7424128506048625084</guid>
	<link>https://n4js.blogspot.com/2020/09/n4js-goes-lsp.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-weight: 700; white-space: pre-wrap;&quot;&gt;A few weeks ago we started to publish a VSCode extension for N4JS to the VSCode Marketplace. This was one of the last steps on our road to support LSP-based development tools. We chose to make this major change because of several reasons that affected both users and developers of N4JS.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-F2efQTbpqKM/X1YXgPPtOzI/AAAAAAAAARA/6GuSg2_-kc8F_CWYnhfQ0dUw1XL5bRmUgCLcBGAsYHQ/s1822/N4JS_VSCODE.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-F2efQTbpqKM/X1YXgPPtOzI/AAAAAAAAARA/6GuSg2_-kc8F_CWYnhfQ0dUw1XL5bRmUgCLcBGAsYHQ/s16000/N4JS_VSCODE.png&quot; width=&quot;600&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;An N4JS project in VSCode with the N4JS language extension&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span id=&quot;docs-internal-guid-302ce6de-7fff-db87-f1b6-82f1bec7268d&quot;&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Our &lt;/span&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=n4js.n4js-vscode-extension&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;language extension for N4JS&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; is hosted at the Microsoft VSCode Marketplace and will be updated regularly by our Jenkins jobs. Versions will be kept in sync with the language version, compiler version and version of the N4JS libraries to avoid incompatible setups. At the moment, the LSP server supports all main features of the language server protocol (LSP) such as validation, content assist, outline view, jump to definition and implementation, open symbol, the rename refactoring and many more. In addition, it will also generate output files whenever a source change is detected. We therefore heavily improved the incremental LSP builder of the Xtext framework and plan to migrate back those changes to the Xtext repository. For the near future we plan to work on stability, performance and also to support some of the less frequently used LSP features.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;When looking back, development of N4JS has been based on the Xtext framework from the start and thus it was straightforward to build an Eclipse-based IDE as our main development tool. Later on, we also implemented a headless compiler used for manual and automated testing from the command line. The development of the compiler already indicated some problems stemming from the tight integration of the Eclipse and the Xtext frameworks together with our language specific implementations. To name an example, we had two separate builder implementations: one for the IDE and the other for the headless compiler. Since the Eclipse IDE is using a specific workspace and project model, we also had two implementations for this abstraction. Another important problem we faced with developing an Eclipse-based IDE was that at some points we had to implement UI tests using the SWTBot framework. For us, SWTBot tests turned out to be very hard to develop, to maintain, and to keep from becoming flaky. Shifting to LSP-based development tools, i.e. the headless compiler and an LSP server, allows us to overcome the aforementioned problems.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Users of N4JS now have the option to either use our extension for VSCode or integrate our LSP server into their favorite IDE themselves, even into the Eclipse IDE. They also benefit from more lightweight tools regarding disk size and start-up performance, as well as a better integration into well-known tools from the JavaScript development ecosystem.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 08 Sep 2020 11:00:11 +0000</pubDate>
	<author>noreply@blogger.com (n4js dev)</author>
</item>
<item>
	<title>Eclipse Dirigible: Release 5.2</title>
	<guid isPermaLink="false">http://dirigible.io/release/2020/09/02/news_new_release_5_2</guid>
	<link>http://dirigible.io/release/2020/09/02/news_new_release_5_2.html</link>
	<description>&lt;p&gt;New version &lt;a href=&quot;https://download.eclipse.org/dirigible/drops/R-5.2-202009020052/index.html&quot;&gt;5.2&lt;/a&gt; has been released.&lt;/p&gt;

&lt;p&gt;Release is of &lt;em&gt;Type A&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;features&quot;&gt;Features&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;OData generation from Entity Data Model&lt;/li&gt;
  &lt;li&gt;OData rest layer added by default in the full stack application&lt;/li&gt;
  &lt;li&gt;Expand support for OData in templates&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fixes&quot;&gt;Fixes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Fix bpmn editor works with older version of jquery&lt;/li&gt;
  &lt;li&gt;Minor fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;statistics&quot;&gt;Statistics&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;54K+ Users&lt;/li&gt;
  &lt;li&gt;77K+ Sessions&lt;/li&gt;
  &lt;li&gt;184 Countries&lt;/li&gt;
  &lt;li&gt;395 Repositories in DirigibleLabs&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;operational&quot;&gt;Operational&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Available packages for download - &lt;a href=&quot;https://download.eclipse.org/dirigible/drops/R-5.2-202009020052/index.html&quot;&gt;https://download.eclipse.org/dirigible/drops/R-5.2-202009020052/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Docker images at Docker Hub under DirigibleLabs organization:	&lt;a href=&quot;https://hub.docker.com/u/dirigiblelabs/&quot;&gt;https://hub.docker.com/u/dirigiblelabs/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maven Central artifacts by org.eclipse.dirigible namespace: &lt;a href=&quot;https://search.maven.org/search?q=org.eclipse.dirigible&quot;&gt;https://search.maven.org/search?q=org.eclipse.dirigible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The full list of bug-fixes and enhancements can be found here: &lt;a href=&quot;https://github.com/eclipse/dirigible/milestone/36?closed=1&quot;&gt;https://github.com/eclipse/dirigible/milestone/36?closed=1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The source code is available at GitHub repository here: &lt;a href=&quot;https://github.com/eclipse/dirigible/tree/5.2.0&quot;&gt;https://github.com/eclipse/dirigible/tree/5.2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The instant trial is updated accordingly with the released version here: &lt;a href=&quot;http://trial.dirigible.io&quot;&gt;http://trial.dirigible.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;enjoy&quot;&gt;Enjoy!&lt;/h4&gt;</description>
	<pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Christopher Guindon: Website Updates For Eclipse Foundation AISBL</title>
	<guid isPermaLink="true">https://www.chrisguindon.com/post/website-updates-for-eclipse-foundation-aisbl/</guid>
	<link>https://www.chrisguindon.com/post/website-updates-for-eclipse-foundation-aisbl/</link>
	<description>&lt;p&gt;The Eclipse Foundation recently &lt;a href=&quot;https://newsroom.eclipse.org/news/announcements/open-source-software-leader-eclipse-foundation-announces-transition-europe-part&quot;&gt;announced&lt;/a&gt; its intention to transition to Europe as part of its continued global expansion.&lt;/p&gt;
&lt;p&gt;To support this initiative, we needed to start making some important changes to our website. This week, we made available the first round of these changes!&lt;/p&gt;
&lt;h3 id=&quot;1-eclipse-membership&quot;&gt;1. Eclipse Membership&lt;/h3&gt;
&lt;p&gt;First off, it was essential to rethink how we convey membership information on our website. Our main goal was to organize information effectively and highlight important links such as &lt;a href=&quot;https://accounts.eclipse.org/contact/membership&quot;&gt;how to contact us&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We decided to use tabs to make it easier for users to find our &lt;a href=&quot;https://www.eclipse.org/membership/#tab-fees&quot;&gt;membership fees&lt;/a&gt;, our &lt;a href=&quot;https://www.eclipse.org/membership/#tab-levels&quot;&gt;membership levels&lt;/a&gt;, how to &lt;a href=&quot;https://www.eclipse.org/membership/#tab-membership&quot;&gt;become a member&lt;/a&gt;, and our key &lt;a href=&quot;https://www.eclipse.org/membership/#tab-benefits&quot;&gt;services&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Folks are no longuer required to navigate between multiple pages to find the information they need.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/membership/&quot;&gt;&lt;img alt=&quot;Screenshot of the Eclipse Membership landing page&quot; src=&quot;https://www.chrisguindon.com/uploads/eclipse-membership-landing-page.jpg&quot; title=&quot;Screenshot of the Eclipse Membership landing page&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-eclipse-working-groups&quot;&gt;2. Eclipse Working Groups&lt;/h3&gt;
&lt;p&gt;Given that many of our new members are now interested in joining an &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/explore.php&quot;&gt;Eclipse Working Groups&lt;/a&gt;, we wanted to make sure that important documents, such as the Working Group Partipation Agreement or the Working Group Charter, were easy to find.&lt;/p&gt;
&lt;p&gt;Therefore, we thought changing the layout would help. We highlighted the Resources section to make it really visible on the page and now we have more space to grow and support additional documents in the future.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/org/workinggroups/explore.php&quot;&gt;&lt;img alt=&quot;Screenshot of how we now display Eclipse Working Groups on our website&quot; src=&quot;https://www.chrisguindon.com/uploads/eclipse-working-groups-list.jpg&quot; title=&quot;Screenshot of how we now display Eclipse Working Groups on our website&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-eclipse-members&quot;&gt;3. Eclipse Members&lt;/h3&gt;
&lt;p&gt;Finally, we simplified our &lt;a href=&quot;https://www.eclipse.org/membership/exploreMembership.php&quot;&gt;Members&lt;/a&gt; page, we thought the page would be more interesting by offering a simple list of logos and company name by removing the short description of each member.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/membership/exploreMembership.php&quot;&gt;&lt;img alt=&quot;Screenshot of Eclipse Members&quot; src=&quot;https://www.chrisguindon.com/uploads/eclipse-members-list.jpg&quot; title=&quot;Screenshot of Eclipse Members&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-work-ahead&quot;&gt;The Work Ahead&lt;/h2&gt;
&lt;p&gt;Our focus is now on the required content updates for Eclipse Foundation AISBL.&lt;/p&gt;
&lt;p&gt;We created &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=566455&quot;&gt;Bug 566455 - Website Updates For Eclipse Foundation AISBL&lt;/a&gt; to discuss these remaining changes.&lt;/p&gt;
&lt;p&gt;One of those changes is to publish the Eclipse Foundation AISBL Membership Agreement. This is a new agreement that members will be asked to sign as of October. To simplify the signing process, we will allow our members to sign the Membership Agreement with an eSignature.&lt;/p&gt;
&lt;p&gt;We also need to &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=566456&quot;&gt;update the currency&lt;/a&gt; of our membership fees. Our fees will no longer be stated in USD but in Euros.&lt;/p&gt;
&lt;p&gt;The list of remaining changes is available via the &lt;a href=&quot;https://bugs.eclipse.org/bugs/showdependencytree.cgi?id=566455&quot;&gt;dependency tree&lt;/a&gt; of this project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/showdependencytree.cgi?id=566455&quot;&gt;&lt;img alt=&quot;Screenshot of dependency tree&quot; src=&quot;https://www.chrisguindon.com/uploads/eclipse-membership-bug-list.jpg&quot; title=&quot;Screenshot of dependency tree&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To learn more about the Eclipse Foundation transition to Europe, please visit &lt;a href=&quot;https://www.eclipse.org/europe&quot;&gt;eclipse.org/europe&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 28 Aug 2020 13:25:00 +0000</pubDate>
</item>
<item>
	<title>Thabang Mashologu: 5 Talks IoT and Edge Developers Won’t Want to Miss at EclipseCon 2020</title>
	<guid isPermaLink="false">6846 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/thabang-mashologu/5-talks-iot-and-edge-developers-won%E2%80%99t-want-miss-eclipsecon-2020</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;EclipseCon 2020 is coming up October 19-22 and it’s time to start planning your experience. To help you target the talks you’re most interested in, we’re highlighting IoT and Edge sessions and speakers we’re sure you won’t want to miss.&lt;br /&gt;
 &lt;br /&gt;
&lt;strong&gt;Taking IoT to the Edge&lt;/strong&gt;&lt;br /&gt;
With the next generation of IoT applications extending to the network edge, and strong momentum in edge technologies at the Eclipse Foundation, we’ll start with three talks on edge innovations:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.eclipsecon.org/node/3130&quot;&gt;Developing IoT Edge — the Eclipse way&lt;/a&gt;&lt;/strong&gt;. Get insight into the pros and cons of current trends in edge computing and IoT from Dejan Bosanac. Dejan will also discuss the potential to integrate &lt;strong&gt;&lt;a href=&quot;https://www.eclipse.org/hono/&quot;&gt;Eclipse Hono&lt;/a&gt; &lt;/strong&gt;and&lt;strong&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/iot.iofog&quot;&gt; Eclipse ioFog&lt;/a&gt;&lt;/strong&gt; for a better off-the-shelf IoT edge experience.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.eclipsecon.org/node/3163&quot;&gt;Run Your Apps on Carrier Edge. An Open Source Solution&lt;/a&gt;&lt;/strong&gt;. Yang (Gabriel) Yu will look at multi-access edge computing (MEC) as a natural extension of 5G networks. You’ll learn how 5G MEC fits with the &lt;strong&gt;&lt;a href=&quot;https://edgenative.eclipse.org/&quot;&gt;Eclipse Edge Native Working Group&lt;/a&gt;&lt;/strong&gt; and how to develop applications for the MEC platform using open source tools, such as the &lt;strong&gt;&lt;a href=&quot;https://www.eclipse.org/eclipseide/&quot;&gt;Eclipse Desktop IDE&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.eclipsecon.org/node/3201&quot;&gt;Edge Robotics With ROS 2 and Eclipse Zenoh&lt;/a&gt;&lt;/strong&gt;. Using Robot Operating System 2 (ROS 2) in edge robotics applications creates communications challenges that must be resolved. Angelo Corsaro will explain how &lt;strong&gt;&lt;a href=&quot;http://zenoh.io/&quot;&gt;Eclipse Zenoh&lt;/a&gt; &lt;/strong&gt;addresses the challenges in current ROS 2 and micro-ROS 2 data planes to support edge robotics use cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;
&lt;strong&gt;Industrial Innovations&lt;/strong&gt;&lt;br /&gt;
Businesses in almost every industry are looking to IoT technologies to help them automate and accelerate their operations so they can work smarter and more efficiently. Here are two IoT talks with an industrial theme:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.eclipsecon.org/node/3175&quot;&gt;Building an Industrial IoT Solution — Open Source&lt;/a&gt;&lt;/strong&gt;. Julien Feinauer and Kevin Olotu will demonstrate how to build a full-featured industrial IoT platform with minimal effort using open source technologies. The integrated solution features Apache PLC4X, &lt;strong&gt;&lt;a href=&quot;https://www.eclipse.org/vorto/&quot;&gt;Eclipse Vorto&lt;/a&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;a href=&quot;https://www.eclipse.org/ditto/&quot;&gt;Eclipse Ditto&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.eclipsecon.org/node/3246&quot;&gt;Real-Time LiDAR Perception in Open Robotics ROS 2 Foxy With Eclipse Cyclone DDS&lt;/a&gt;&lt;/strong&gt;. We recently shared the news that the Eclipse Cyclone DDS will be tier one middleware in ROS 2 Foxy Fitzroy. In this session, Joe Speed, Erik Boasson, and Tom Panzarella will show you a multi-technology HD perception solution that features &lt;strong&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/iot.cyclonedds&quot;&gt;Eclipse Cyclone DDS&lt;/a&gt;&lt;/strong&gt; and enables warehouse vehicles to travel safely at higher speeds than previously possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br /&gt;
&lt;strong&gt;Register for EclipseCon 2020 Today&lt;/strong&gt;&lt;br /&gt;
At EclipseCon 2019, the IoT sessions were among the most popular and well-attended, and the recordings are among the most-watched on the &lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaT_yo5Dhajb9i-Pf0LbQ3z8&quot;&gt;EclipseCon Europe 2019 YouTube channel&lt;/a&gt;&lt;/strong&gt;.&lt;br /&gt;
 &lt;br /&gt;
Because EclipseCon 2020 is a virtual event, there’s no fee to attend sessions. But space is limited, so be sure to register early to reserve your spot.&lt;br /&gt;
 &lt;br /&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.eclipsecon.org/2020/registration&quot;&gt;Get all the registration details and register now&lt;/a&gt;&lt;/strong&gt;.&lt;br /&gt;
 &lt;br /&gt;
For event details, visit &lt;strong&gt;&lt;a href=&quot;https://www.eclipsecon.org/2020&quot;&gt;eclipsecon.org/2020&lt;/a&gt;.&lt;/strong&gt;&lt;br /&gt;
 &lt;br /&gt;
To join the EclipseCon conversation and get the latest updates:&lt;br /&gt;
·      Use #EclipseCon on social media&lt;br /&gt;
·      Follow @EclipseCon on Twitter&lt;br /&gt;
 &lt;br /&gt;
And keep an eye on our blog for more EclipseCon highlights. Over the coming weeks, we’ll feature:&lt;br /&gt;
·      Talks about tools&lt;br /&gt;
·      Talks for developers in the automotive industry&lt;br /&gt;
·      Talks for Java developers&lt;br /&gt;
·      Community Day events&lt;br /&gt;
·      Tips to get the most out of EclipseCon&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/eclipsecon&quot;&gt;EclipseCon&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/community&quot;&gt;Community&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/eclipse-iot-0&quot;&gt;Eclipse IoT&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/iiot&quot;&gt;IIoT&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/iot&quot;&gt;IoT&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/edge-computing&quot;&gt;edge computing&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 25 Aug 2020 20:52:28 +0000</pubDate>
</item>
<item>
	<title>Rohan Kumar: Java development on top of Kubernetes using Eclipse JKube</title>
	<guid isPermaLink="false">https://developers.redhat.com/blog/?p=738437</guid>
	<link>https://developers.redhat.com/blog/2020/08/24/java-development-on-top-of-kubernetes-using-eclipse-jkube/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/jkube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Eclipse JKube: Deploy maven applications to Kubernetes.&quot; class=&quot; size-full  wp-image-739047 &quot; height=&quot;101&quot; src=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-23-12-19-21.png&quot; width=&quot;316&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It has been 25 years since developers started adopting Java technology and making it part of their core application stack. Today, many Java developers and Java-based shops are migrating or looking to migrate their infrastructure to &lt;a href=&quot;https://developers.redhat.com/topics/kubernetes&quot;&gt;Kubernetes&lt;/a&gt;, or to related distributions like &lt;a href=&quot;https://developers.redhat.com/products/openshift/getting-started&quot;&gt;Red Hat OpenShift&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/eks/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Amazon EKS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt; has a steep learning curve, however, and it adds an additional layer of operations to the familiar Java development workflow. In this article, I introduce &lt;a href=&quot;https://github.com/eclipse/jkube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Eclipse JKube&lt;/a&gt; and show you how to use it to simplify the Kubernetes workflow. As you’ll see, Eclipse JKube provides a migration path to Kubernetes while letting you stay within the familiar Java ecosystem. I will also quickly show you how to deploy a Java application to OpenShift using OpenShift Maven plugin.&lt;/p&gt;
&lt;h2&gt;The traditional Java development workflow&lt;/h2&gt;
&lt;p&gt;In a traditional &lt;a href=&quot;https://developers.redhat.com/topics/enterprise-java/&quot;&gt;Java&lt;/a&gt; workflow, shown in Figure 1, a Java developer writes code, creates deployment units in the form of JAR or WAR files, and deploys and runs these files in a web server or application server. Developers mostly use Maven from the command line or use an IDE such as IntelliJ or Eclipse to code and package their applications. Developers are accustomed to making changes to their code and trying things out before committing and pushing the code to a version control system.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_738447&quot; style=&quot;width: 583px;&quot;&gt;&lt;a href=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/06/Traditional-Java-Development-1.png&quot;&gt;&lt;img alt=&quot;A diagram of the traditional Java development workflow.&quot; class=&quot; size-full  wp-image-738447 &quot; height=&quot;355&quot; src=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/06/Traditional-Java-Development-1.png&quot; width=&quot;573&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot; id=&quot;caption-attachment-738447&quot;&gt;Figure 1: The traditional Java development workflow.&lt;/p&gt;&lt;/div&gt;
&lt;h2&gt;The cloud-native Java development workflow&lt;/h2&gt;
&lt;p&gt;When we start writing cloud-native applications, Kubernetes and &lt;a href=&quot;https://developers.redhat.com/topics/containers/&quot;&gt;containers&lt;/a&gt; come into the picture. As developers, we are expected to package our Java applications into &lt;a href=&quot;https://developers.redhat.com/blog/2020/06/08/commit-to-excellence-java-in-containers/&quot;&gt;images&lt;/a&gt; and write Kubernetes manifests referencing those images. The manifests are then applied to the production server, which is running Kubernetes. Kubernetes pulls the images from the image registry and deploys applications based on the configuration we’ve provided in our manifests, which are typically YAML files.&lt;/p&gt;
&lt;p&gt;Figure 2 shows how the traditional Java development workflow changes in a cloud-native environment.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_738457&quot; style=&quot;width: 650px;&quot;&gt;&lt;a href=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow.png&quot;&gt;&lt;img alt=&quot;A diagram of the cloud-native Java development workflow.&quot; class=&quot; size-full  wp-image-738457 &quot; height=&quot;461&quot; src=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot; id=&quot;caption-attachment-738457&quot;&gt;Figure 2: A cloud-native Java development workflow.&lt;/p&gt;&lt;/div&gt;
&lt;h2&gt;Eclipse JKube&lt;/h2&gt;
&lt;p&gt;Adopting Kubernetes adds a new operations layer to the overall workflow, and that is troublesome for many developers. We want to focus on the application’s logic, not how the application is deployed. Here is the point where &lt;a href=&quot;https://github.com/eclipse/jkube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Eclipse JKube&lt;/a&gt; enters the picture. As a developer, you can use JKube’s libraries and plugins—&lt;a href=&quot;https://github.com/eclipse/jkube/tree/master/jkube-kit&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;JKube Kit&lt;/a&gt; along with the &lt;a href=&quot;https://github.com/eclipse/jkube/tree/master/kubernetes-maven-plugin&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Kubernetes Maven Plugin&lt;/a&gt; or the &lt;a href=&quot;https://github.com/eclipse/jkube/tree/master/openshift-maven-plugin&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;OpenShift Maven Plugin&lt;/a&gt;—to easily handle the Kubernetes and container operations outlined in Figure 2.&lt;/p&gt;
&lt;p&gt;In the rest of this article, you will learn how to use Eclipse JKube with the Kubernetes Maven Plugin to simplify the Java development workflow on top of Kubernetes.&lt;/p&gt;
&lt;h3&gt;Eclipse JKube in the cloud-native development workflow&lt;/h3&gt;
&lt;p&gt;Let’s consider a modified version of the cloud-native Java development workflow from Figure 2. Figure 3 shows that workflow after we’ve integrated Eclipse JKube and the Kubernetes Maven Plugin.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_738497&quot; style=&quot;width: 650px;&quot;&gt;&lt;a href=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow-Using-Eclipse-JKube.png&quot;&gt;&lt;img alt=&quot;A diagram of the cloud-native Java workflow simplified with Eclipse JKube.&quot; class=&quot; size-full  wp-image-738497 &quot; height=&quot;461&quot; src=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/06/Cloud-Native-Java-Workflow-Using-Eclipse-JKube.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot; id=&quot;caption-attachment-738497&quot;&gt;Figure 3: The cloud-native Java workflow simplified with Eclipse JKube.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;In this workflow, all of the operations that require engaging with Kubernetes or a container (highlighted in red) are replaced by the default Eclipse JKube goals. Table 1 offers a closer look at these goals.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;table align=&quot;center&quot;&gt;
&lt;caption&gt;Table 1: Default Eclipse JKube goals.&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Goal&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;Phase&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:build&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;k8s:build&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PRE_INTEGRATION_TEST&lt;/td&gt;
&lt;td&gt;Build docker images.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:push&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;k8s:push&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;INSTALL&lt;/td&gt;
&lt;td&gt;Push docker images to the registry.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:resource&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;k8s:resource&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PROCESS_RESOURCES&lt;/td&gt;
&lt;td&gt;Generate K8s manifests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:apply&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;k8s:apply&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;COMPILE&lt;/td&gt;
&lt;td&gt;Apply the generated manifests to K8s.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:undeploy&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;k8s:undeploy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UNDEPLOY&lt;/td&gt;
&lt;td&gt;Delete K8s resources that were deployed via &lt;code&gt;k8s:apply&lt;/code&gt; and &lt;code&gt;k8s:deploy&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p style=&quot;padding-left: 40px;&quot;&gt;&lt;b&gt;Note&lt;/b&gt;: If you don’t want the opinionated defaults for your goals, then you can manually configure Eclipse JKube, which provides both &lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#_xml_configuration&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;XML configuration&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#_resource_fragments&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;resource configuration&lt;/a&gt; options.&lt;/p&gt;
&lt;p&gt;Now we’re ready to explore an application example with Eclipse JKube and the Kubernetes Maven Plugin.&lt;/p&gt;
&lt;h2&gt;Deploying a Java application onto Kubernetes with Eclipse JKube&lt;/h2&gt;
&lt;p&gt;In this example, we will deploy a simple Java application onto a &lt;a href=&quot;https://kubernetes.io/docs/setup/learning-environment/minikube/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Minikube&lt;/a&gt; cluster using Eclipse JKube. Using the Kubernetes Maven Plugin, we can set up the deployment without providing any configuration.&lt;/p&gt;
&lt;p&gt;For our example application, we’ll use a &lt;a href=&quot;https://github.com/rohanKanojia/eclipse-jkube-demo-project&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;simple random number generation application&lt;/a&gt;. This application prints JSON output on a &lt;code&gt;/random&lt;/code&gt; endpoint, like this:&lt;/p&gt;
&lt;pre&gt;~/work/repos/eclipse-jkube-demo-project : $ curl localhost:8080/random | jq .
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    45    0    45    0     0    818      0 --:--:-- --:--:-- --:--:--   818
{
  &quot;id&quot;: &quot;e80a4d10-c79b-4b9a-aaac-7c286cb37f3c&quot;
}
&lt;/pre&gt;
&lt;h3&gt;Step 1: Get the Kubernetes Maven Plugin&lt;/h3&gt;
&lt;p&gt;The Kubernetes Maven Plugin is available from the &lt;a href=&quot;https://search.maven.org/search?q=g:org.eclipse.jkube%20AND%20a:kubernetes-maven-plugin&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Maven Central Repository&lt;/a&gt;. To start using Eclipse JKube, you need to add the Kubernetes Maven Plugin as a dependency in your &lt;code&gt;pom.xml&lt;/code&gt;, as shown here:&lt;/p&gt;
&lt;pre&gt;&amp;lt;plugin&amp;gt;
     &amp;lt;groupId&amp;gt;org.eclipse.jkube&amp;lt;/groupId&amp;gt;
     &amp;lt;artifactId&amp;gt;kubernetes-maven-plugin&amp;lt;/artifactId&amp;gt;
     &amp;lt;version&amp;gt;${jkube.version}&amp;lt;/version&amp;gt;
 &amp;lt;/plugin&amp;gt;
&lt;/pre&gt;
&lt;p&gt;If you are running the OpenShift version of Kubernetes, you will update your &lt;code&gt;pom.xml&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre&gt;&amp;lt;plugin&amp;gt;
     &amp;lt;groupId&amp;gt;org.eclipse.jkube&amp;lt;/groupId&amp;gt;
     &amp;lt;artifactId&amp;gt;openshift-maven-plugin&amp;lt;/artifactId&amp;gt;
     &amp;lt;version&amp;gt;${jkube.version}&amp;lt;/version&amp;gt;
 &amp;lt;/plugin&amp;gt;
&lt;/pre&gt;
&lt;h3&gt;Step 2: Build the docker image&lt;/h3&gt;
&lt;p&gt;You can build your application JAR using the &lt;code&gt;mvn package&lt;/code&gt; command, then you can use the &lt;code&gt;mvn k8s:build&lt;/code&gt; goal to build a docker image of your application. Note that I am overriding the default image name via this property:&lt;/p&gt;
&lt;pre&gt;&amp;lt;jkube.generator.name&amp;gt;docker.io/rohankanojia/random-generator:${project.version}&amp;lt;/jkube.generator.name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Before building an image, you need to make sure that you have exposed your docker daemon correctly. The command to expose the docker daemon is:&lt;/p&gt;
&lt;pre&gt;$ eval $(minikube docker-env)
&lt;/pre&gt;
&lt;p&gt;Next, you enter the goal, &lt;code&gt;mvn k8s:build&lt;/code&gt;. Here is the output for building the docker image with the Eclipse JKube build goal:&lt;br /&gt;
&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn k8s:build&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Scanning for projects...&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ----------------------&amp;lt; meetup:random-generator &amp;gt;-----------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --- kubernetes-maven-plugin:1.0.0:build (default-cli) @ random-generator ---&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Running in Kubernetes mode&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Building Docker image in Kubernetes mode&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Running generator spring-boot&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: spring-boot: Using Docker image quay.io/jkube/jkube-java-binary-s2i:0.0.7 as base / builder&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: [docker.io/rohankanojia/random-generator:0.0.1] &quot;spring-boot&quot;: Created docker-build.tar in 251 milliseconds&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: [docker.io/rohankanojia/random-generator:0.0.1] &quot;spring-boot&quot;: Built image sha256:a20e5&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] BUILD SUCCESS&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Total time:  5.053 s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Finished at: 2020-08-10T11:28:23+05:30&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3&gt;Step 3: Push the image to your docker registry&lt;/h3&gt;
&lt;p&gt;Once you’ve built your docker image with your push registry configured (&lt;code&gt;docker.io&lt;/code&gt;, in my case), you can push the image to the registry. Here is the output after entering the Eclipse JKube push goal, &lt;code&gt;mvn k8s:push&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn k8s:push&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Scanning for projects...&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ----------------------&amp;lt; meetup:random-generator &amp;gt;-----------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --- kubernetes-maven-plugin:1.0.0:push (default-cli) @ random-generator ---&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Running in Kubernetes mode&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Building Docker image in Kubernetes mode&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Running generator spring-boot&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: spring-boot: Using Docker image quay.io/jkube/jkube-java-binary-s2i:0.0.7 as base / builder&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: The push refers to repository [docker.io/rohankanojia/random-generator]&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;5dcd9556710f: Layer already exists &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;b7139ad07aa8: Layer already exists &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;b6f081e4b2b6: Layer already exists &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;d8e1f35641ac: Layer already exists &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: 0.0.1: digest: sha256:9f9eda2a13b8cab1d2c9e474248500145fc09e2922fe3735692f9bda4c76002d size: 1162&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Pushed docker.io/rohankanojia/random-generator:0.0.1 in 7 seconds &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] BUILD SUCCESS&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Total time:  11.222 s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Finished at: 2020-08-10T11:35:37+05:30&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ &lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After pushing the image, you can confirm that it was pushed to the specified image registry. In my case, I was able to see my pushed image on Docker Hub, as shown in Figure 4.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_738537&quot; style=&quot;width: 650px;&quot;&gt;&lt;a href=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-15-19-28-53.png&quot;&gt;&lt;img alt=&quot;A screenshot of the pushed image on Docker Hub.&quot; class=&quot;  size-full   wp-image-738537 &quot; height=&quot;361&quot; src=&quot;https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-15-19-28-53-1024x577.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot; id=&quot;caption-attachment-738537&quot;&gt;Figure 4: The pushed image is available on Docker Hub.&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;Step 4: Generate the Kubernetes resource manifests for your application&lt;/h3&gt;
&lt;p&gt;After you’ve built the application image, the next thing to do is to write the Kubernetes manifests. Eclipse JKube provides a goal for generating opinionated resource manifests based on the underlying Java framework, which could be &lt;a href=&quot;https://developers.redhat.com/topics/spring-boot&quot;&gt;Spring Boot&lt;/a&gt;, &lt;a href=&quot;https://developers.redhat.com/products/quarkus/getting-started&quot;&gt;Quarkus&lt;/a&gt;, Vert.x, or some other framework. Another option is to configure the manifest using an XML configuration file and provide raw fragments (a portion of the desired resource manifest) in the application’s &lt;code&gt;src/main/jkube&lt;/code&gt; folder. Your configuration would then be merged into the generated manifests.&lt;/p&gt;
&lt;p&gt;For this application, we will let Eclipse JKube generate a manifest for a default deployment and a service of type &lt;code&gt;ClusterIP&lt;/code&gt;. Next, we’ll customize the service manifest for a &lt;code&gt;Service&lt;/code&gt; of type &lt;code&gt;NodePort&lt;/code&gt;. Setting the following property overrides the default behavior:&lt;/p&gt;
&lt;pre&gt;&amp;lt;jkube.enricher.jkube-service.type&amp;gt;NodePort&amp;lt;/jkube.enricher.jkube-service.type&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Here is the output from entering the Eclipse JKube resource goal, &lt;code&gt;mvn k8s:resource&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn k8s:resource&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Scanning for projects...&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ----------------------&amp;lt; meetup:random-generator &amp;gt;-----------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --- kubernetes-maven-plugin:1.0.0:resource (default-cli) @ random-generator ---&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Running generator spring-boot&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: spring-boot: Using Docker image quay.io/jkube/jkube-java-binary-s2i:0.0.7 as base / builder&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: jkube-controller: Adding a default Deployment&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: jkube-service: Adding a default service 'random-generator' with ports [8080]&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: jkube-healthcheck-spring-boot: Adding readiness probe on port 8080, path='/actuator/health', scheme='HTTP', with initial delay 10 seconds&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: jkube-healthcheck-spring-boot: Adding liveness probe on port 8080, path='/actuator/health', scheme='HTTP', with initial delay 180 seconds&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: jkube-revision-history: Adding revision history limit to 2&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] BUILD SUCCESS&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Total time:  3.344 s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Finished at: 2020-08-10T11:38:11+05:30&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ ls target/classes/META-INF/jkube/kubernetes&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;random-generator-deployment.yml  random-generator-service.yml&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ cat target/classes/META-INF/jkube/kubernetes/random-generator-deployment.yml | head -n10&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;---&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;apiVersion: apps/v1&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;kind: Deployment&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;metadata:&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;  annotations:&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;    jkube.io/git-url: git@github.com:rohanKanojia/eclipse-jkube-demo-project.git&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;    jkube.io/git-commit: 1ef9ef2ef7a6fcbf8eb64c293f26f9c42d026512&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;    jkube.io/git-branch: master&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;    jkube.io/scm-url: https://github.com/spring-projects/spring-boot/spring-boot-starter-parent/random-generator&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;    jkube.io/scm-tag: HEAD&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3&gt;Step 5: Deploy your application in a Kubernetes cluster&lt;/h3&gt;
&lt;p&gt;Everything is now set up for the example application. We were able to generate the image for the application, and then automatically generate the resource manifests. Now, we only need to apply these artifacts onto a Kubernetes cluster. You could use &lt;code&gt;kubectl apply -f&lt;/code&gt; to deploy the application; however, the plugin also takes care of this for you. Here is the output after entering the Eclipse JKube apply goal, &lt;code&gt;mvn k8s:apply&lt;/code&gt;:&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn k8s:apply&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Scanning for projects...&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ----------------------&amp;lt; meetup:random-generator &amp;gt;-----------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --- kubernetes-maven-plugin:1.0.0:apply (default-cli) @ random-generator ---&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Using Kubernetes at https://192.168.39.145:8443/ in namespace default with manifest /home/rohaan/work/repos/eclipse-jkube-demo-project/target/classes/META-INF/jkube/kubernetes.yml &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Using namespace: default&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Creating a Service from kubernetes.yml namespace default name random-generator&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Created Service: target/jkube/applyJson/default/service-random-generator.json&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Creating a Deployment from kubernetes.yml namespace default name random-generator&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Created Deployment: target/jkube/applyJson/default/deployment-random-generator.json&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: HINT: Use the command `kubectl get pods -w` to watch your pods start up&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] BUILD SUCCESS&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Total time:  7.306 s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Finished at: 2020-08-10T11:40:57+05:30&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ kubectl get pods -w&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;NAME                                                     READY   STATUS             RESTARTS   AGE&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;random-generator-58b7847d7f-9m9df                        0/1     Running            0          7s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;random-generator-58b7847d7f-9m9df                        1/1     Running            0          17s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;^C~/work/repos/eclipse-jkube-demo-project : $ kubectl get svc&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;NAME                                    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)           AGE&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;io-openliberty-sample-getting-started   NodePort    10.110.4.104    &amp;lt;none&amp;gt;        9080:30570/TCP    44h&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;kubernetes                              ClusterIP   10.96.0.1       &amp;lt;none&amp;gt;        443/TCP           18d&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;random-generator                        NodePort    10.97.172.147   &amp;lt;none&amp;gt;        8080:32186/TCP    22s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ curl `minikube ip`:32186/random | jq .&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;                                 Dload  Upload   Total   Spent    Left  Speed&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;100    45    0    45    0     0   1800      0 --:--:-- --:--:-- --:--:--  1875&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;{&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;  &quot;id&quot;: &quot;42e5571f-a20f-44b3-8184-370356581d10&quot;&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3&gt;Step 6: Undeploy an application from the Kubernetes cluster&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;undeploy&lt;/code&gt; goal is the opposite of the &lt;code&gt;apply&lt;/code&gt; goal. It just deletes all of the resources applied during the &lt;code&gt;apply&lt;/code&gt; phase. Here is the output after initiating Eclipse JKube undeploy goal, &lt;code&gt;mvn k8s:undeploy&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ kubectl get all&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;NAME                                    READY   STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;pod/random-generator-58b7847d7f-9m9df   1/1     Running   0          5m21s&lt;/span&gt;

&lt;span style=&quot;color: #888888;&quot;&gt;NAME                       TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;service/kubernetes         ClusterIP   10.96.0.1       &amp;lt;none&amp;gt;        443/TCP          18d&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;service/random-generator   NodePort    10.97.172.147   &amp;lt;none&amp;gt;        8080:32186/TCP   5m21s&lt;/span&gt;

&lt;span style=&quot;color: #888888;&quot;&gt;NAME                               READY   UP-TO-DATE   AVAILABLE   AGE&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;deployment.apps/random-generator   1/1     1            1           5m21s&lt;/span&gt;

&lt;span style=&quot;color: #888888;&quot;&gt;NAME                                          DESIRED   CURRENT   READY   AGE&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;replicaset.apps/random-generator-58b7847d7f   1         1         1       5m21s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn k8s:undeploy&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Scanning for projects...&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ----------------------&amp;lt; meetup:random-generator &amp;gt;-----------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --- kubernetes-maven-plugin:1.0.0:undeploy (default-cli) @ random-generator ---&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Using Kubernetes at https://192.168.39.145:8443/ in namespace default with manifest /home/rohaan/work/repos/eclipse-jkube-demo-project/target/classes/META-INF/jkube/kubernetes.yml &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Using namespace: default&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Deleting resource Deployment default/random-generator&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: Deleting resource Service default/random-generator&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] k8s: HINT: Use the command `kubectl get pods -w` to watch your pods start up&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] BUILD SUCCESS&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Total time:  3.412 s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Finished at: 2020-08-10T11:46:22+05:30&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ kubectl get pods -w&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;^C~/work/repos/eclipse-jkube-demo-project : $ kubectl get all&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;service/kubernetes   ClusterIP   10.96.0.1    &amp;lt;none&amp;gt;        443/TCP   18d&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2&gt;Do more with Eclipse JKube&lt;/h2&gt;
&lt;p&gt;We’ve covered the core goals provided by Eclipse JKube and the Kubernetes Maven Plugin. You can use these goals to ease your Java application development workflow on top of Kubernetes. If you don’t like typing the goals repeatedly, you could simplify by adding a specified execution in the plugin configuration, like this:&lt;/p&gt;
&lt;pre&gt;&amp;lt;plugin&amp;gt;
     &amp;lt;groupId&amp;gt;org.eclipse.jkube&amp;lt;/groupId&amp;gt;
     &amp;lt;artifactId&amp;gt;kubernetes-maven-plugin&amp;lt;/artifactId&amp;gt;
     &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt;
     &amp;lt;executions&amp;gt;
         &amp;lt;execution&amp;gt;
             &amp;lt;goals&amp;gt;
                  &amp;lt;goal&amp;gt;build&amp;lt;/goal&amp;gt;
                  &amp;lt;goal&amp;gt;resource&amp;lt;/goal&amp;gt;
                  &amp;lt;goal&amp;gt;apply&amp;lt;/goal&amp;gt;
             &amp;lt;/goals&amp;gt;
         &amp;lt;/execution&amp;gt;
     &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/pre&gt;
&lt;p&gt;I haven’t covered all of the goals provided by Eclipse JKube and the Kubernetes Maven Plugin. Table 2 shows additional goals, which you could explore on your own.&lt;/p&gt;
&lt;table align=&quot;center&quot;&gt;
&lt;caption&gt;Table 2: Additional Eclipse JKube goals.&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Goal&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Phase&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:log&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;k8s:log&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;VALIDATE&lt;/td&gt;
&lt;td&gt;Get the logs from your application running inside of Kubernetes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:debug&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;k8s:debug&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PACKAGE&lt;/td&gt;
&lt;td&gt;Open the debug port so that you can debug an application running inside Kubernetes from your IDE.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:deploy&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;k8s:deploy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;INSTALL&lt;/td&gt;
&lt;td&gt;Fork the Install goal and apply your generated manifests onto a Kubernetes cluster, just like the Apply goal.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin#jkube:watch&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;k8s:watch&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PACKAGE&lt;/td&gt;
&lt;td&gt;Do an automatic hot deployment of your application by watching your application workspace.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Deploying Java applications to Red Hat OpenShift using OpenShift Maven Plugin&lt;/h2&gt;
&lt;p&gt;You can use the &lt;a href=&quot;https://www.eclipse.org/jkube/docs/openshift-maven-plugin&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;OpenShift Maven plugin&lt;/a&gt; to deploy the same application on Red Hat OpenShift. The only difference would be that the &lt;code&gt;k8s&lt;/code&gt; goal prefix would be replaced by the &lt;code&gt;oc&lt;/code&gt; goal prefix. The Kubernetes Maven plugin does &lt;a href=&quot;https://www.docker.com/get-started&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;docker&lt;/a&gt; builds by default, and the OpenShift Maven Plugin does &lt;a href=&quot;https://docs.openshift.com/enterprise/3.0/using_images/s2i_images/index.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;S2I&lt;/a&gt; builds by default. I haven’t made any changes in my project apart from removing the property &lt;code&gt;jkube.generator.name&lt;/code&gt; since I won’t be needing it for push (OpenShift pushes the image to its internal registry during the build phase). Here is an example, but instead of running one goal separately, I will deploy all of the resources and goals at once:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;&quot;&gt;
&lt;pre style=&quot;margin: 0; line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ mvn oc:build oc:resource oc:apply&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Scanning for projects...&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ----------------------&amp;lt; meetup:random-generator &amp;gt;-----------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Building random-generator 0.0.1&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --------------------------------[ jar ]---------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --- openshift-maven-plugin:1.0.0:build (default-cli) @ random-generator ---&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Using OpenShift build with strategy S2I&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Running in OpenShift mode&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Running generator spring-boot&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: spring-boot: Using Docker image quay.io/jkube/jkube-java-binary-s2i:0.0.7 as base / builder&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: [random-generator:0.0.1] &quot;spring-boot&quot;: Created docker source tar /home/rohaan/work/repos/eclipse-jkube-demo-project/target/docker/random-generator/0.0.1/tmp/docker-build.tar&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Adding to Secret pullsecret-jkube&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Using Secret pullsecret-jkube&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Creating BuildServiceConfig random-generator-s2i for Source build&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Creating ImageStream random-generator&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Starting Build random-generator-s2i&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Waiting for build random-generator-s2i-1 to complete...&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Caching blobs under &quot;/var/cache/blobs&quot;.&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Getting image source signatures&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:cf0f3ebe9f536c782ab3835049cfbd9a663761ded9370791ef6ea3965c823aad&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:57de4da701b511cba33bbdc424757f7f3b408bea741ca714ace265da9b59191a&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:f320f94d91a064281f5127d5f49954b481062c7d56cce3b09910e471cf849050&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying config sha256:52d6788fcfdd39595264d34a3959464a5dabc1d4ef0ae188802b20fc2d6a857b&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Writing manifest to image destination&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Storing signatures&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Generating dockerfile with builder image quay.io/jkube/jkube-java-binary-s2i:0.0.7&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: STEP 1: FROM quay.io/jkube/jkube-java-binary-s2i:0.0.7&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: STEP 2: LABEL &quot;io.openshift.build.source-location&quot;=&quot;/tmp/build/inputs&quot;       &quot;io.openshift.build.image&quot;=&quot;quay.io/jkube/jkube-java-binary-s2i:0.0.7&quot;&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: STEP 3: ENV JAVA_APP_DIR=&quot;/deployments&quot;     OPENSHIFT_BUILD_NAME=&quot;random-generator-s2i-1&quot;     OPENSHIFT_BUILD_NAMESPACE=&quot;default&quot;&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: STEP 4: USER root&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: STEP 5: COPY upload/src /tmp/src&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: STEP 6: RUN chown -R 1000:0 /tmp/src&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: STEP 7: USER 1000&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: STEP 8: RUN /usr/local/s2i/assemble&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: INFO S2I source build with plain binaries detected&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: INFO S2I binary build from fabric8-maven-plugin detected&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: INFO Copying binaries from /tmp/src/deployments to /deployments ...&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: random-generator-0.0.1.jar&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: INFO Copying deployments from deployments to /deployments...&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: '/tmp/src/deployments/random-generator-0.0.1.jar' -&amp;gt; '/deployments/random-generator-0.0.1.jar'&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: STEP 9: CMD /usr/local/s2i/run&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: STEP 10: COMMIT temp.builder.openshift.io/default/random-generator-s2i-1:48795e41&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: time=&quot;2020-08-10T06:37:49Z&quot; level=info msg=&quot;Image operating system mismatch: image uses \&quot;\&quot;, expecting \&quot;linux\&quot;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: time=&quot;2020-08-10T06:37:49Z&quot; level=info msg=&quot;Image architecture mismatch: image uses \&quot;\&quot;, expecting \&quot;amd64\&quot;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Getting image source signatures&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:d8e1f35641acb80b562f70cf49911341dfbe8c86f4d522b18efbf3732aa74223&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:b6f081e4b2b6de8be4b1dec132043d14c121e968384dd624fb69c2c07b482edb&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:b7139ad07aa8ce4ed5a132f7c5cc9f1de0f5099b5e155027a23d57f7fbe78b16&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:98972fc90a1108315cc5b05b2c691a0849a149727a7b81e76bc847ac2c6d9714&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying config sha256:27aaadaf28e24856a66db962b88118b8222b61d79163dceeeed869f7289bc230&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Writing manifest to image destination&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Storing signatures&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: --&amp;gt; 27aaadaf28e&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: 27aaadaf28e24856a66db962b88118b8222b61d79163dceeeed869f7289bc230&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Getting image source signatures&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Pushing image image-registry.openshift-image-registry.svc:5000/default/random-generator:0.0.1 ...&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:f320f94d91a064281f5127d5f49954b481062c7d56cce3b09910e471cf849050&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:cf0f3ebe9f536c782ab3835049cfbd9a663761ded9370791ef6ea3965c823aad&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:57de4da701b511cba33bbdc424757f7f3b408bea741ca714ace265da9b59191a&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying blob sha256:98972fc90a1108315cc5b05b2c691a0849a149727a7b81e76bc847ac2c6d9714&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Copying config sha256:27aaadaf28e24856a66db962b88118b8222b61d79163dceeeed869f7289bc230&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Writing manifest to image destination&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Storing signatures&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Successfully pushed image-registry.openshift-image-registry.svc:5000/default/random-generator@sha256:aa9e1a380c04ef9174ba56459c13d44420ebe653ebf32884d60fe4306b17306d&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Push successful&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Build random-generator-s2i-1 in status Complete&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Found tag on ImageStream random-generator tag: sha256:aa9e1a380c04ef9174ba56459c13d44420ebe653ebf32884d60fe4306b17306d&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: ImageStream random-generator written to /home/rohaan/work/repos/eclipse-jkube-demo-project/target/random-generator-is.yml&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --- openshift-maven-plugin:1.0.0:resource (default-cli) @ random-generator ---&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Using docker image name of namespace: default&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Running generator spring-boot&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: spring-boot: Using Docker image quay.io/jkube/jkube-java-binary-s2i:0.0.7 as base / builder&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: jkube-controller: Adding a default DeploymentConfig&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: jkube-service: Adding a default service 'random-generator' with ports [8080]&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: jkube-healthcheck-spring-boot: Adding readiness probe on port 8080, path='/actuator/health', scheme='HTTP', with initial delay 10 seconds&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: jkube-healthcheck-spring-boot: Adding liveness probe on port 8080, path='/actuator/health', scheme='HTTP', with initial delay 180 seconds&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: jkube-revision-history: Adding revision history limit to 2&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] --- openshift-maven-plugin:1.0.0:apply (default-cli) @ random-generator ---&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Using OpenShift at https://api.crc.testing:6443/ in namespace default with manifest /home/rohaan/work/repos/eclipse-jkube-demo-project/target/classes/META-INF/jkube/openshift.yml &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: OpenShift platform detected&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Using project: default&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Creating a Service from openshift.yml namespace default name random-generator&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Created Service: target/jkube/applyJson/default/service-random-generator.json&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Creating a DeploymentConfig from openshift.yml namespace default name random-generator&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Created DeploymentConfig: target/jkube/applyJson/default/deploymentconfig-random-generator.json&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: Creating Route default:random-generator host: null&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] oc: HINT: Use the command `oc get pods -w` to watch your pods start up&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] BUILD SUCCESS&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Total time:  01:07 min&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] Finished at: 2020-08-10T12:08:00+05:30&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;[INFO] ------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ oc get pods -w&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;NAME                           READY     STATUS      RESTARTS   AGE&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;random-generator-1-deploy      1/1       Running     0          14s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;random-generator-1-vnrm9       0/1       Running     0          11s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;random-generator-s2i-1-build   0/1       Completed   0          1m&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;random-generator-1-vnrm9   1/1       Running   0         24s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;random-generator-1-deploy   0/1       Completed   0         28s&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ oc get routes&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;NAME                HOST/PORT                                    PATH      SERVICES            PORT      TERMINATION   WILDCARD&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;random-generator    random-generator-default.apps-crc.testing              random-generator    8080                    None&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $ curl random-generator-default.apps-crc.testing/random &lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;                                 Dload  Upload   Total   Spent    Left  Speed&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;100    45    0    45    0     0   1666      0 --:--:-- --:--:-- --:--:--  1730&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;{&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;  &quot;id&quot;: &quot;d80052d9-2f92-43cb-b9eb-d7cffb879798&quot;&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #888888;&quot;&gt;~/work/repos/eclipse-jkube-demo-project : $&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2&gt;Watch a video demonstration&lt;/h2&gt;
&lt;p&gt;For more about simplifying Kubernetes development with Eclipse JKube, watch this demonstration video. You’ll learn how to quickly deploy a simple Spring Boot application onto Minikube:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, I showed you how to use Eclipse JKube to simplify your Kubernetes workloads. You can visit the Eclipse JKube &lt;a href=&quot;https://www.eclipse.org/jkube/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;project website&lt;/a&gt; to learn more about this collection. If you like Eclipse JKube, please support us by spreading the word about it on &lt;a href=&quot;https://twitter.com/jkubeio&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;. You can also &lt;a href=&quot;https://github.com/eclipse/jkube&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;watch and star the Eclipse JKube project on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;a2a_button_facebook&quot; href=&quot;https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;amp;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_twitter&quot; href=&quot;https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;amp;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Twitter&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_linkedin&quot; href=&quot;https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;amp;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;LinkedIn&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_email&quot; href=&quot;https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;amp;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Email&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_print&quot; href=&quot;https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;amp;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Print&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_reddit&quot; href=&quot;https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;amp;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Reddit&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_flipboard&quot; href=&quot;https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;amp;linkname=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot; title=&quot;Flipboard&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_dd addtoany_share_save addtoany_share&quot; href=&quot;https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F24%2Fjava-development-on-top-of-kubernetes-using-eclipse-jkube%2F&amp;amp;title=Java%20development%20on%20top%20of%20Kubernetes%20using%20Eclipse%20JKube&quot;&gt;&lt;img alt=&quot;Share&quot; src=&quot;https://static.addtoany.com/buttons/favicon.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a href=&quot;https://developers.redhat.com/blog/2020/08/24/java-development-on-top-of-kubernetes-using-eclipse-jkube/&quot; rel=&quot;nofollow&quot;&gt;Java development on top of Kubernetes using Eclipse JKube&lt;/a&gt; appeared first on &lt;a href=&quot;https://developers.redhat.com/blog&quot; rel=&quot;nofollow&quot;&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 24 Aug 2020 07:00:56 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: An update on the Eclipse Foundation’s move to Europe</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1555</guid>
	<link>https://eclipse-foundation.blog/2020/08/20/an-update-on-the-eclipse-foundations-move-to-europe/</link>
	<description>&lt;p&gt;In May &lt;a href=&quot;https://newsroom.eclipse.org/news/announcements/open-source-software-leader-eclipse-foundation-announces-transition-europe-part&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;we announced&lt;/a&gt; that the Eclipse Foundation is becoming a Belgian international nonprofit association. I wanted to take this opportunity to provide you with an update on the progress of the transition, the next steps, and what it all means to our global community of developers and diverse membership base.&lt;/p&gt;
&lt;p&gt;Let’s start with where we are in the process. At time of writing, all of the incorporation and related documents have been filed with the Belgian authorities, and we are waiting for the Royal Decree which will formally create our new entity, the Eclipse Foundation AISBL. This normally takes on the order of sixty days and we expect the process to be finalized by early-to-mid October.&lt;/p&gt;
&lt;p&gt;In parallel, the Board of Directors of the Eclipse Foundation, Inc. have approved a series of changes to the Bylaws and Membership Agreement of the existing Delaware, USA-based entity and we will be seeking the approval of the membership-at-large for those changes. To our members and committers, please stay tuned for your voting credentials in late August. In addition, some revisions have been made to our IP Policy and Antitrust Policy to enable both our US and Belgian entities to have exactly the same policies.&lt;/p&gt;
&lt;p&gt;Once the new Belgian entity Eclipse Foundation AISBL is created and the approvals are finalized to the Eclipse Foundation, Inc.’s Bylaws and Membership Agreement, all members will be required to update their Membership Agreement and related other agreements. You will be asked to join Eclipse Foundation AISBL, and to resign your membership in the existing US organization. At the same time, we will be asking you to re-sign your Member Committer and Contribution Agreement (MCCA) and any Working Group Participation Agreements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So exactly what’s changing?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As part of moving to European-based governance, effective October 1st we will be restating our membership dues for both the Belgian-based Eclipse Foundation AISBL and the existing Eclipse Foundation, Inc. in euros while retaining the same numeric value. So if you are currently paying $20,000, the dues in the new organization will be 20.000€. We understand that due to currency exchange rates this represents an increase in  dues. To help mitigate that, all members who renew between October 1, 2020 and September 30, 2021 will have their euro-based membership fees discounted by 10%. This modest increase is the first fee increase we have had in almost 15 years, and we hope that members appreciate the merit of stating all fees in euros as we complete this transition.&lt;/p&gt;
&lt;p&gt;As part of the European transition, we are changing the name of the Solutions Members membership level to Contributing Members. We feel that this will better reflect the current, diverse group of organizations who participate and contribute to the Eclipse ecosystem in many ways, including, but not limited to, leading and contributing to our open source projects, and offering products and services based on Eclipse Foundation technologies.&lt;/p&gt;
&lt;p&gt;Working Group Participation Agreements (WGPAs) will be updated to reflect the change of the corporate domicile to Belgium, as will the working group charters once approved by the respective Steering Committees. There are no fee changes to any working group participation associated with this transition, though some working groups may decide to restate their fees in Euros at some point in the future, similar to membership fees. As always, the budgets and fees established for each working group are determined by the Steering Committee of the working group.&lt;/p&gt;
&lt;p&gt;For our committers, if you are an individual Committer Member you will be asked to execute the new Belgian Membership Agreement. If you have previously executed a committer agreement with the Eclipse Foundation as an individual, then you will need to re-execute the new version of the Individual Contributor Agreement.&lt;/p&gt;
&lt;p&gt;For committers who are employees or consultants of a member company who has a Member Committer and Contributor Agreement (MCCA), your employer will be asked to execute the new MCCA, and no actions will be required on your part.&lt;/p&gt;
&lt;p&gt;Our new GitLab-based forge physically hosted in Europe is operational and available as a choice for any projects that would like to use it. As we expand our presence in Europe, we anticipate new exciting opportunities for our global community members to participate and contribute in new open source projects. More announcements on this front will be coming soon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s staying the same?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As far as day-to-day interactions with the Eclipse Foundation, nothing will change for member organizations or committer members. Our projects and working groups will continue to run as is, and the recently modified IP Policy and Antitrust Policy of the Eclipse Foundation AISBL are identical to those of the US organization. Eclipse Foundation AISBL will become the steward of the Eclipse Public License and govern our community’s license going forward. The bulk of the Foundation’s operations will continue to be split between Europe and Canada, and you can expect your engagement with the staff of the Foundation to remain unchanged.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When is this all happening?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of moving parts with this corporate restructuring, and we ask in advance for both your patience and your active engagement and support. Here are some upcoming key dates that members and committers need to be aware of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;August 31, 2020: Voting begins on approving the necessary changes to the Eclipse Foundation, Inc. (EF-US) Bylaws and Membership Agreement. Voting will go until September 29th. The new EF-US Bylaws and Membership Agreement will go into effect as soon as practicable after the completion of the membership vote.&lt;/li&gt;
&lt;li&gt;October 1, 2020: The new dues structure stated in euros will go into effect. Renewals for existing members will receive a 10% discount for the following twelve months.&lt;/li&gt;
&lt;li&gt;Soon after the Royal Decree which legally establishes the Eclipse Foundation AISBL we will be contacting all of our members and committers to update their agreements with the new Belgian entity. This may include your membership agreement, committer agreements, and working group participation agreements as applicable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope that this post has helped update you on the execution of the transition and the way forward for the next exciting phase of our community’s expansion. If you have questions or feedback, feel free to reach out to me, or to our team at &lt;a href=&quot;mailto:eclipse-europe@eclipse.org&quot;&gt;eclipse-europe@eclipse.org&lt;/a&gt;. Thank you for your continued support!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</description>
	<pubDate>Thu, 20 Aug 2020 10:03:43 +0000</pubDate>
</item>
<item>
	<title>Ed Merks: No Java? No Problem!</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3879044552984472733.post-6596989719963525978</guid>
	<link>https://ed-merks.blogspot.com/2020/08/no-java-no-problem.html</link>
	<description>&lt;p&gt;For the 2020-09 Eclipse Simultaneous Release, the Eclipse IDE will require Java 11 or higher to run.  If the user doesn't have that installed, Eclipse simply won't start, instead popping up this dialog:  &lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-0sWgK4UlI2w/XzuCCZMXseI/AAAAAAAAC3Q/2p5CYOLDLt4Az5NpyV6aCpPTGAHoNzp0gCLcBGAsYHQ/s584/IncompatibleJVM.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;131&quot; src=&quot;https://1.bp.blogspot.com/-0sWgK4UlI2w/XzuCCZMXseI/AAAAAAAAC3Q/2p5CYOLDLt4Az5NpyV6aCpPTGAHoNzp0gCLcBGAsYHQ/w320-h131/IncompatibleJVM.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;That of course begs the question, what should I do now? The Eclipse Installer itself is an Eclipse application so it too will fail to start for the same reason.  At least on Windows the Eclipse Installer is distributed as a native executable, so it will open a &lt;a href=&quot;https://download.eclipse.org/oomph/jre/?vm=1_11_0_0_64_0&amp;amp;pn=Eclipse%20Installer&amp;amp;pu=http://wiki.eclipse.org/Eclipse_Installer&amp;amp;pi=http://download.eclipse.org/oomph/jre/128x128.png&quot;&gt;semi-helpful page&lt;/a&gt; in the browser to direct the user find a suitable JRE or JDK to install rather than popping up the above dialog.&lt;/p&gt;&lt;p&gt;Of course we are concerned that many users will update 2020-06 to 2020-09 only to find that Eclipse fails to start afterwards because they are currently running with Java 8.  But Mickael Istria has planned ahead for this as part of the 2020-06 release, adding a validation check during the update process to determine if the current JVM is suitable for the update, thereby helping prevent this particular problem.&lt;/p&gt;&lt;p&gt;Now that &lt;a href=&quot;https://www.eclipse.org/justj/&quot;&gt;JustJ&lt;/a&gt; is available for building Eclipse products with an embedded JRE, we can do even better.  Several of the Eclipse Packaging Project's products will include a JustJ JRE in the packages for 2020-09, i.e., the C/C++, Rust, and JavaScript packages.  Also the Eclipse Installer for 2020-09 will provide product variants that include a JustJ JRE.  So they all will simply run out of the box regardless of which version of Java is installed and of course even when Java is not installed at all.&lt;/p&gt;&lt;p&gt;Even better, the Eclipse Installer will provide JustJ JREs as choices in the dialogs.  A user who does not have Java installed will be offered JustJ JRE 14.02 as the default JRE. &lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-xpZhpceqWL4/XzuCM0P-TGI/AAAAAAAAC3U/-1gvMtOltfws79deVlTd96b3Yfbjuir7QCLcBGAsYHQ/s937/EclipseInstallerJustJ.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;203&quot; src=&quot;https://1.bp.blogspot.com/-xpZhpceqWL4/XzuCM0P-TGI/AAAAAAAAC3U/-1gvMtOltfws79deVlTd96b3Yfbjuir7QCLcBGAsYHQ/w320-h203/EclipseInstallerJustJ.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Choices of JustJ JREs will always be available in the Eclipse Installer; it will be the default only if no suitable version of Java is currently installed on the machine.&lt;/p&gt;&lt;p&gt;Eclipse Installers with an embedded JustJ JRE will be available starting with 2020-09 M3 for all supported platforms.  For a sneak preview, you can find them in the &lt;a href=&quot;https://download.eclipse.org/justj/?file=oomph/products/latest&quot;&gt;nightly builds folder&lt;/a&gt;.  The ones with &quot;-jre&quot; in the name contain an embedded JRE (and the ones with &quot;-restricted&quot; in the name will only install 2020-09 versions of the products).&lt;/p&gt;&lt;p&gt;It was a &lt;b&gt;lot of work &lt;/b&gt;getting this all in place, both building the JREs and updating Oomph's build to consume them.  Not only that, just this week I had to rework EMF's build so that it functions with the latest platform where some of the JDT bundles have incremented their BREEs to Java 11.  There's always something disruptive that creates a lot of work.  I should point out that no one funds this work, so I often question how this is all actually sustainable in the long term (not to mention questioning my personal sanity).&lt;/p&gt;&lt;p&gt;I did found a small GmbH here in Switzerland.  It's very pretty here!&lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-0B499FykO6A/XzuG-sxC9xI/AAAAAAAAC3k/VUgeP9BoWc4CO-MRFireV7E9cRrNQ60hwCLcBGAsYHQ/s5184/IMG_3326.JPG&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;https://1.bp.blogspot.com/-0B499FykO6A/XzuG-sxC9xI/AAAAAAAAC3k/VUgeP9BoWc4CO-MRFireV7E9cRrNQ60hwCLcBGAsYHQ/w320-h240/IMG_3326.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;If you need help, consider that &lt;a href=&quot;https://www.macromodeling.com/&quot;&gt;help is available&lt;/a&gt;. If no one pays for anything, at some point you will only get what you pay for, i.e., nothing. But that's a topic for another blog...&lt;/p&gt;</description>
	<pubDate>Tue, 18 Aug 2020 07:50:06 +0000</pubDate>
	<author>noreply@blogger.com (Ed Merks)</author>
</item>
<item>
	<title>Patrick Paulin: Eclipse RCP and REST – JAX-RS Extensions</title>
	<guid isPermaLink="false">https://modumind.com/?p=4520</guid>
	<link>https://modumind.com/2020/07/23/eclipse-rcp-and-rest-jax-rs-extensions/</link>
	<description>&lt;p&gt;This is a continuation of a series of blog posts demonstrating the use of the &lt;a href=&quot;https://github.com/ECF/JaxRSProviders&quot;&gt;ECF Remote Services JAX-RS Jersey Client&lt;/a&gt; within an Eclipse RCP application. The previous posts are:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://modumind.com/2020/05/19/eclipse-rcp-and-rest-an-introduction/&quot;&gt;Eclipse RCP and REST: An Introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://modumind.com/2020/06/18/eclipse-rcp-and-rest-making-asynchronous-calls/&quot;&gt;Eclipse RCP and REST: Making Asynchronous Calls&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;In this post I’ll demonstrate how to use standard JAX-RS extensions in this environment.&lt;/p&gt;



&lt;h3&gt;Introduction to JAX-RS extensions&lt;/h3&gt;



&lt;p&gt;JAX-RS extensions can be used to customize many different aspects of REST service requests and responses. The current extensions supported by the ECF Remote Services JAX-RS Jersey Client are:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;ClientRequestFilter and ClientResponseFilter&lt;/li&gt;&lt;li&gt;ContextResolver&lt;/li&gt;&lt;li&gt;ExceptionMapper&lt;/li&gt;&lt;li&gt;Feature&lt;/li&gt;&lt;li&gt;MessageBodyReader and MessageBodyWriter&lt;/li&gt;&lt;li&gt;ReaderInterceptor and WriterInterceptor&lt;/li&gt;&lt;/ul&gt;



&lt;p&gt;The specific uses of these extensions is beyond the scope of this article, but I will show a few examples below that should provide a starting point.&lt;/p&gt;



&lt;h2&gt;Extending JAX-RS using Declarative Services&lt;/h2&gt;



&lt;p&gt;As the ECF client (and Eclipse RCP for that matter) is built on OSGi, the best way to register JAX-RS extensions is by contributing them as OSGi services. It is fairly trivial to create and register an extension using Declarative Services annotations. For example, here is the code for a ClientRequestFilter.&lt;/p&gt;


&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;@Component(service = ClientRequestFilter.class)
public class LaunchServiceClientRequestFilter implements ClientRequestFilter {

	@Override
	public void filter(ClientRequestContext context) throws IOException {
		MultivaluedMap&amp;lt;String, Object&amp;gt; headers = context.getHeaders();
		Map&amp;lt;String, Cookie&amp;gt; cookies = context.getCookies();
		
		/* Manipulate headers or cookies before request is made */
	}
}
&lt;/pre&gt;


&lt;p&gt;A common use case for this type of filter is to intercept and modify the request headers and cookies being sent to the REST service. For example, you may want to manage cookies that relate to back-end security services.&lt;/p&gt;



&lt;h3&gt;Contributing a custom ObjectMapper&lt;/h3&gt;



&lt;p&gt;One of the most common JAX-RS customizations to make is to contribute a service-specific ObjectMapper. A REST service client will often need a custom ObjectMapper to control the way JSON is serialized and/or deserialized into Java POJOs.&lt;/p&gt;



&lt;p&gt;In the &lt;a href=&quot;https://docs.spacexdata.com/?version=latest#bc65ba60-decf-4289-bb04-4ca9df01b9c1&quot;&gt;SpaceX Launch Service&lt;/a&gt; that we’ve been using as an example, the Launch POJO is currently configured to map from the SpaceX JSON format to Java camel casing using an annotation on the POJO.&lt;/p&gt;


&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class) // r/SpaceX uses underscored field names
public class Launch {

	private String flightNumber;
	private String missionName;
	
	public String getFlightNumber() {
		return flightNumber;
	}
	
	public String getMissionName() {
		return missionName;
	}
}
&lt;/pre&gt;


&lt;p&gt;But as the number of POJOs used to define the service increases, it makes more sense to centralize this customization in a contributed ObjectMapper. This contribution can be made with a ContextResolver defined as an OSGi service using DS annotations.&lt;/p&gt;


&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;@Component(service = ContextResolver.class)
public class LaunchServiceObjectMapperResolver implements ContextResolver&amp;lt;ObjectMapper&amp;gt; {

	private ObjectMapper objectMapper;
	
	public LaunchServiceObjectMapperResolver() {
	    objectMapper = new ObjectMapper();
	    objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
	    objectMapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);
	    
	    /* Add custom serializers or deserializers, etc. if needed */
	}

	@Override
	public ObjectMapper getContext(Class&amp;lt;?&amp;gt; type) {
		return objectMapper;
	}
}
&lt;/pre&gt;


&lt;p&gt;At this point, the JAX-RS annotation can be removed from the Launch POJO.&lt;/p&gt;



&lt;h3&gt;Wrapping up&lt;/h3&gt;



&lt;p&gt;JAX-RS extensions give you the power to customize many aspects of REST calls within an Eclipse RCP application, and it’s very simple to contribute these extensions using OSGi Declarative Services annotations. The example code on GitHub has been updated to demonstrate how this works.&lt;/p&gt;



&lt;p&gt;Note that if you’ve been using earlier versions of the ECF Remote Services JAX-RS Jersey Client, you’ll need to reload the target to bring in the latest version (1.13.8 or later).&lt;/p&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/modular-mind/spacex-client&quot;&gt;https://github.com/modular-mind/spacex-client&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 23 Jul 2020 16:40:44 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Dogfooding the Eclipse Dash License Tool</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5692</guid>
	<link>https://waynebeaton.wordpress.com/2020/07/22/dogfooding-the-eclipse-dash-license-tool/</link>
	<description>&lt;p&gt;There’s background information about this post in my &lt;a href=&quot;https://waynebeaton.wordpress.com/2020/05/07/revising-the-eclipse-ip-due-diligence-process-for-third-party-content/&quot;&gt;previous post&lt;/a&gt;. I’ve been using the &lt;a href=&quot;https://github.com/eclipse/dash-licenses&quot;&gt;Eclipse Dash License Tool&lt;/a&gt; on itself.&lt;/p&gt;
&lt;pre&gt;$ mvn dependency:list | grep -Poh &quot;\S+:(system|provided|compile)$&quot; | java -jar licenses.jar -
Querying Eclipse Foundation for license data for 7 items.
Found 6 items.
Querying ClearlyDefined for license data for 1 items.
Found 1 items.
Vetted license information was found for all content. No further investigation is required.
$ _&lt;/pre&gt;
&lt;p&gt;Note that in this example, I’ve removed the paths to try and reduce at least some of the clutter. I also tend to add a filter to sort the dependencies and remove duplicates (&lt;code&gt;| sort | uniq&lt;/code&gt;), but that’s not required here so I’ve left it out.&lt;/p&gt;
&lt;p&gt;The message that “[v]etted license information was found for all content”, means that the tool figures that all of my project’s dependencies have been fully vetted and that I’m good to go. I could, for example, create a release with this content and be fully aligned with the Eclipse Foundation’s Intellectual Property Policy.&lt;/p&gt;
&lt;p&gt;The tool is, however, only as good as the information that it’s provided with. Checking only the Maven build completely misses the third party content that was introduced by Jonah’s helpful contribution that helps us obtain dependency information from a &lt;code&gt;yarn.lock&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;$ cd yarn
$ node index.js | java -jar licenses.jar -
Querying Eclipse Foundation for license data for 1 items.
Found 0 items.
Querying ClearlyDefined for license data for 1 items.
Rejected: https://clearlydefined.io/definitions/npm/npmjs/@yarnpkg/lockfile/1.1.0
Found 0 items.
License information could not automatically verified for the following content:

npm/npmjs/@yarnpkg/lockfile/1.1.0 (null)

Please create contribution questionnaires for this content.

$ _&lt;/pre&gt;
&lt;p&gt;So… oops. Missed one.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note that the updates to the IP Policy include a change that allows project teams to leverage third-party content (that they believe to be license compatible) in their project code during development. All content must be vetted by the IP due diligence process before it may be leveraged by any &lt;em&gt;release&lt;/em&gt;. So the project in its current state is completely onside, but the license of that identified bit of content needs to be resolved before it can be declared as proper release as defined by the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/&quot;&gt;Eclipse Foundation Development Process&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This actually demonstrates why I opted to create the tool as CLI that takes a flat list of dependencies as input: we use all sorts of different technologies, and I wanted to focus the tool on providing license information for arbitrary lists of dependencies.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I’m sure that Denis will be able to rewrite my bash one-liner in seven keystrokes, but here’s how I’ve combined the two so that I can get complete picture with a “single” command:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;$ { mvn dependency:list | grep -Poh &quot;\S+:(system|provided|compile)$&quot; ; cd yarn &amp;amp;&amp;amp; node index.js; } | java -jar licenses.jar -
Querying Eclipse Foundation for license data for 8 items.
Found 6 items.
Querying ClearlyDefined for license data for 2 items.
Rejected: https://clearlydefined.io/definitions/npm/npmjs/@yarnpkg/lockfile/1.1.0
Found 1 items.
License information could not automatically verified for the following content:

npm/npmjs/@yarnpkg/lockfile/1.1.0 (null)

Please create contribution questionnaires for this content.
$ _&lt;/pre&gt;
&lt;p&gt;I have some work to do before I can release. I’ll need to engage with the Eclipse Foundation’s IP Team to have that one bit of content vetted.&lt;/p&gt;
&lt;p&gt;As a side effect, the tool generates a &lt;code&gt;DEPENDENCIES&lt;/code&gt; file. The dependency file lists all of the dependencies provided in the input in &lt;a href=&quot;https://clearlydefined.io&quot;&gt;ClearlyDefined&lt;/a&gt; coordinates along with license information, whether or not the content is &lt;em&gt;approved&lt;/em&gt; for use or is &lt;em&gt;restricted&lt;/em&gt; (meaning that further investigation is required), and the authority that determined the status.&lt;/p&gt;
&lt;pre&gt;maven/mavencentral/org.glassfish/jakarta.json/1.1.6, EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0, approved, emo_ip_team
maven/mavencentral/commons-codec/commons-codec/1.11, Apache-2.0, approved, CQ15971
maven/mavencentral/org.apache.httpcomponents/httpcore/4.4.13, Apache-2.0, approved, CQ18704
maven/mavencentral/commons-cli/commons-cli/1.4, Apache-2.0, approved, CQ13132
maven/mavencentral/org.apache.httpcomponents/httpclient/4.5.12, Apache-2.0, approved, CQ18703
maven/mavencentral/commons-logging/commons-logging/1.2, Apache-2.0, approved, CQ10162
maven/mavencentral/org.apache.commons/commons-csv/1.8, Apache-2.0, approved, clearlydefined
npm/npmjs/@yarnpkg/lockfile/1.1.0, unknown, &lt;strong&gt;restricted&lt;/strong&gt;, none&lt;/pre&gt;
&lt;p&gt;Most of the content was vetted by the Eclipse Foundation’s IP Team (the entries marked “CQ*” have corresponding entries in IPZilla), one was found in ClearlyDefined, and one requires further investigation.&lt;/p&gt;
&lt;p&gt;The tool produces good results. But, as I stated earlier, it’s only as good as the input that it’s provided with and it only does what it is designed to do (it doesn’t, for example, distinguish between &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-third-party-prereq&quot;&gt;prerequisite dependencies&lt;/a&gt; and dependencies of “&lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-third-party-workswith&quot;&gt;works with&lt;/a&gt;” dependencies; more on this later). The output of the tool is obviously a little rough and could benefit from the use of a proper configurable &lt;a href=&quot;https://github.com/eclipse/dash-licenses/issues/9&quot;&gt;logging framework&lt;/a&gt;. There’s a handful of &lt;a href=&quot;https://github.com/eclipse/dash-licenses/issues&quot;&gt;other open issues&lt;/a&gt; for your consideration.&lt;/p&gt;</description>
	<pubDate>Wed, 22 Jul 2020 15:43:38 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: ECF 3.14.12 released - Now with gRPC for OSGi Remote Services</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-6714142835918115475</guid>
	<link>http://eclipseecf.blogspot.com/2020/07/ecf-31412-released-now-with-grpc-for.html</link>
	<description>&lt;a href=&quot;https://www.eclipse.org/ecf/&quot;&gt;ECF 3.14.12 was just released&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Highlights of this Release&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;New &lt;a href=&quot;https://github.com/ECF/grpc-RemoteServicesProvider&quot;&gt;OSGi Remote Services Distribution provider&lt;/a&gt; based upon &lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt;/Protocol Buffers. Along with a &lt;a href=&quot;https://github.com/ECF/grpc-osgi-generator&quot;&gt;grpc-osgi-generator project&lt;/a&gt;...which allows the generation of a service API from a proto3 service declaration...this provider allows gRPC-based services to be exported and imported as OSGi Remote Services.  This now includes support for unary, server-streaming, and client-streaming gRPC calls.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://wiki.eclipse.org/Bndtools_Support_for_Remote_Services_Development&quot;&gt;Enhanced Support for Bndtools-based development of OSGi Remote Services&lt;/a&gt;.   The ECF Bndtools Workspace now includes the latest version of &lt;a href=&quot;https://wiki.eclipse.org/ECF&quot;&gt;ECF Remote Services&lt;/a&gt;, along with the gRPC distribution provider, a Hazelcast-based discovery and distribution provider, and project and bndrun templates for creating, running, testing, and debugging OSGi Remote Services in Eclipse+Bndtools 5.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Wed, 15 Jul 2020 00:16:42 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Alex Blewitt: Why ServiceCaller is better (than ServiceTracker)</title>
	<guid isPermaLink="false">https://alblue.bandlem.com/2020/07/why-servicecaller-is-better</guid>
	<link>https://alblue.bandlem.com/2020/07/why-servicecaller-is-better.html</link>
	<description>&lt;p&gt;My &lt;a href=&quot;http://alblue.bandlem.com/2020/07/why-servicetracker-is-bad.html&quot;&gt;previous post&lt;/a&gt; spurned a
reasonable amount of discussion, and I promised to also talk about the new
&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCaller&lt;/code&gt; which simplifies a number of these issues. I also thought it
was worth looking at what the criticisms were because they made valid points.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://github.com/alblue/why-servicetracker-is-bad/pull/1/files&quot;&gt;first observation&lt;/a&gt;
is that it’s possible to use both DS and &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; to track
&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceReference&lt;/code&gt;s instead. In this mode, the services aren’t triggered by
default; instead, they only get accessed upon resolving the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt;
using the &lt;code class=&quot;highlighter-rouge&quot;&gt;getService()&lt;/code&gt; call. This isn’t the default out of the box, because
you have to write a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTrackerCustomizer&lt;/code&gt; adapter that intercepts the
&lt;code class=&quot;highlighter-rouge&quot;&gt;addingService()&lt;/code&gt; call to wrap the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; for future use. In other
words, if you change:&lt;/p&gt;

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;serviceTracker = new ServiceTracker&amp;lt;&amp;gt;(bundleContext, Runnable.class, null);
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;serviceTracker.open();&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;to the slightly more verbose:&lt;/p&gt;

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;serviceTracker = new ServiceTracker&amp;lt;&amp;gt;(bundleContext, Runnable.class,
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  new ServiceTrackerCustomizer&amp;lt;Runnable, Wrapped&amp;lt;Runnable&amp;gt;&amp;gt;() {
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    public Wrapped&amp;lt;Runnable&amp;gt; addingService(ServiceReference&amp;lt;Runnable&amp;gt; ref) {
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;      return new Wrapped&amp;lt;&amp;gt;(ref, bundleContext);
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	}
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  }
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;}
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;static class Wrapped&amp;lt;T&amp;gt; {
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  private ServiceReference&amp;lt;T&amp;gt; ref;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  private BundleContext context;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  public Wrapped(ServiceReference&amp;lt;T&amp;gt; ref, BundleContext context) {
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    this.ref = ref;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	this.context = context;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  }
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  public T getService() {
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    try {
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;      return context.getService(ref);
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	} finally {
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;      context.ungetService(ref);
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;	}
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  }
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;Obviously, no practical code uses this approach because it’s too verbose, and
if you’re in an environment where DS services aren’t widely used, the benefits
of the deferred approach are outweighed by the quantity of additional
code that needs to be written in order to implement this pattern.&lt;/p&gt;

&lt;p&gt;(The code above is also slightly buggy; we’re getting the service, returning
it, then ungetting it afterwards. We should really just be using it during
that call instead of returning it in that case.)&lt;/p&gt;

&lt;h2 id=&quot;introducing-servicecaller&quot;&gt;Introducing &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCaller&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is where &lt;a href=&quot;https://github.com/eclipse/rt.equinox.bundles/blob/master/bundles/org.eclipse.equinox.common/src/org/eclipse/core/runtime/ServiceCaller.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCaller&lt;/code&gt;&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;The approach of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCaller&lt;/code&gt; is to optimise out the over-eager
dereferencing of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; approach, and apply a functional approach
to calling the service when required. It also has a mechanism to do single-shot
lookups and calling of services; helpful, for example, when logging an obscure
error condition or other rarely used code path.&lt;/p&gt;

&lt;p&gt;This allows us to elegantly call functional interfaces in a single line of code:&lt;/p&gt;

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;Class callerClass = getClass();
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;ServiceCaller.callOnce(callerClass, Runnable.class, Runnable:run);&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;This call looks for &lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt; service types, as visible from the caller class,
and then invoke the function &lt;code class=&quot;highlighter-rouge&quot;&gt;getClass()&lt;/code&gt; as lambda. We can use a method
reference (as in the above case) or you can supply a &lt;code class=&quot;highlighter-rouge&quot;&gt;Consumer&amp;lt;T&amp;gt;&lt;/code&gt; which will
be passed the reference that is resolved from the lookup.&lt;/p&gt;

&lt;p&gt;Importantly, this call doesn’t acquire the service until the &lt;code class=&quot;highlighter-rouge&quot;&gt;callOnce&lt;/code&gt; call is
made. So, if you have an expensive logging factory, you don’t have to
initialise it until the first time it’s needed – and even better, if the error
condition never occurs, you never need to look it up. This is in direct
contrast to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; approach (which actually needs more characters
to type) that accesses the services eagerly, and is an order of magnitude
better than having to write a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTrackerCustomiser&lt;/code&gt; for the purposes of
working around a broken API.&lt;/p&gt;

&lt;p&gt;However, note that such one-shot calls are not the most efficient way of doing
this, especially if it is to be called frequently. So the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCaller&lt;/code&gt; has
another mode of operation; you can create a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCaller&lt;/code&gt; instance, and hang
onto it for further use. Like its single-shot counterpart, this will defer the
resolution of the service until needed. Furthermore, once resolved, it will
cache that instance so you can repeatedly re-use it, in the same way that you
could do with the service returned from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;private ServiceCaller&amp;lt;Runnable&amp;gt; service;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;public void start(BundleContext context) {
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  this.service = new ServiceCaller&amp;lt;&amp;gt;(getClass(), Runnable.class);
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;}
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;public void stop(BundleContext context) {
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  this.service.unget();
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;}
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;public void doSomething() {
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  service.call(Runnable::run);
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;This doesn’t involve significantly more effort than using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt;
that’s widely in use in Eclipse Activators at the moment, yet will defer the
lookup of the service until it’s actually needed. It’s obviously better than
writing many lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTrackerCustomiser&lt;/code&gt; and performs better as a
result, and is in most cases a type of drop-in replacement. However, unlike
&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; (which returns you a service that you can then do something
with afterwards), this call provides a functional consumer interface that
allows you to pass in the action to take.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;We’ve looked at why &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; has problems with eager instantiation of
services, and the complexity of code required to do it the right way. A scan
of the Eclipse codebase suggests that outside of Equinox, there are very few
uses of &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTrackerCustomiser&lt;/code&gt; and there are several hundred calls to
&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker(xxx,yyy,null)&lt;/code&gt; – so there’s a lot of improvements that can
be made fairly easily.&lt;/p&gt;

&lt;p&gt;This pattern can also be used to push down the acquisition of the service
from a generic Plugin/Activator level call to where it needs to be used.
Instead of standing this up in the &lt;code class=&quot;highlighter-rouge&quot;&gt;BundleActivator&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCaller&lt;/code&gt;
can be used anywhere in the bundle’s code. This is where the real benefit
comes in; by packaging it up into a simple, functional consumer, we can
use it to incrementally rid ourselves of the various &lt;code class=&quot;highlighter-rouge&quot;&gt;BundleActivator&lt;/code&gt;s that
take up the majority of Eclipse’s start-up.&lt;/p&gt;

&lt;p&gt;A final note on the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCaller&lt;/code&gt; – it’s possible that when you run the
&lt;code class=&quot;highlighter-rouge&quot;&gt;callOnce&lt;/code&gt; method (or the &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; method if you’re holding on to it) that a
service instance won’t be available. If that’s the case, you get notified by a
&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; return call from the &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; method. If a service is found and is
processed, you’ll get a &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; returned. For some operations, a no-op is a fine
behaviour if the service isn’t present – for example, if there’s no
&lt;code class=&quot;highlighter-rouge&quot;&gt;LogService&lt;/code&gt; then you’re probably going to drop the log event anyway – but it
allows you to take the corrective action you need.&lt;/p&gt;

&lt;p&gt;It does mean that if you want to capture return state from the method call then
you’ll need to have an alternative approach. The easiest way is to have an
&lt;code class=&quot;highlighter-rouge&quot;&gt;final Object result[] = new Object[1];&lt;/code&gt; before the call, and then the lambda
can assign the return value to the array. That’s because local state captured
by lambdas needs to be a final reference, but a final reference to a mutable
single element array allows us to poke a single value back. You could of course
use a different class for the array, depending on your requirements.&lt;/p&gt;

&lt;p&gt;So, we have seen that &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCaller&lt;/code&gt; is better than &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt;, but can
we do even better than that? We certainly can, and that’s the purpose of the
next post.&lt;/p&gt;</description>
	<pubDate>Tue, 07 Jul 2020 20:00:00 +0000</pubDate>
</item>
<item>
	<title>Alex Blewitt: Why ServiceTracker is Bad (for DS)</title>
	<guid isPermaLink="false">https://alblue.bandlem.com/2020/07/why-servicetracker-is-bad</guid>
	<link>https://alblue.bandlem.com/2020/07/why-servicetracker-is-bad.html</link>
	<description>&lt;p&gt;In a presentation I gave at EclipseCon Europe in 2016, I noted that there were prolems when using &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; and on &lt;a href=&quot;https://speakerdeck.com/alblue/optimising-eclipse-plug-ins?slide=37&quot;&gt;slide 37 of my presentation&lt;/a&gt; noted that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker.open()&lt;/code&gt; is a blocking call&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker.open()&lt;/code&gt; results in DS activating services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=564876#c3&quot;&gt;not everyone agrees&lt;/a&gt; because it seems insane that &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; should do this.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; is insane.&lt;/p&gt;

&lt;p&gt;The advantage of Declarative Services (aka SCR, although no-one calls it that)
is that you can register services declaratively, but more importantly, the DS
runtime will present the existence of the service but defer instantiation of
the component until it’s first requested.&lt;/p&gt;

&lt;p&gt;The great thing about this is that you can have a service which does many class
loads or timely actions and defer its use until the service is actually needed.
If your service isn’t required, then you don’t pay the cost for instantiating
that service. I don’t think there’s any debate that this is a Good Thing and
everyone, so far, is happy.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;The problem, specifically when using &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt;, is that you have to do a two-step process to use it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You create a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; for your particular service class&lt;/li&gt;
  &lt;li&gt;You call &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; on it to start looking for services&lt;/li&gt;
  &lt;li&gt;Time passes&lt;/li&gt;
  &lt;li&gt;You acquire the service form the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; to do something with it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a generally held mistaken belief that the DS component is not
instantiated until you hit step 4 in the above. After all, if you’re calling
the service from another component – or even looking up the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceReference&lt;/code&gt;
yourself – that’s what would happen.&lt;/p&gt;

&lt;p&gt;What &lt;em&gt;actually&lt;/em&gt; happens is that the DS component is instantiated in step 2
above. That’s because the &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; call – which is nicely thread-safe by the
way, in the way that &lt;code class=&quot;highlighter-rouge&quot;&gt;getService()&lt;/code&gt; isn’t – starts looking for services, and
then caches the &lt;code class=&quot;highlighter-rouge&quot;&gt;InitialTracked&lt;/code&gt; service, which causes DS to instantiate the
component for you. Since most DS components often have a default, no-arg
constructor, this generally misses most people’s attention.&lt;/p&gt;

&lt;p&gt;If your component’s constructor – or more importantly, the fields therein,
cause many classes to be loaded or perform substantial work or calculation, the
fact that you’re hitting a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker.open()&lt;/code&gt; synchronized call can take
some non-trivial amount of time. And since this is typically in an
&lt;code class=&quot;highlighter-rouge&quot;&gt;Activator.start()&lt;/code&gt; method, it means that your nicely delay-until-its-needed
component is now on the critical path of this bundle’s start-up, despite not
actually needing the service right now.&lt;/p&gt;

&lt;p&gt;This is one of the main problems in Eclipse’s start-up; many, many thousands of
classes are loaded too eagerly. I’ve been working over the years to try and
reduce the problem but it’s an uphill struggle and bad patterns (particularly
the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;Activator&lt;/code&gt;) are endemic in a non-trivial subset of the Eclipse
ecosystem. Of course, there are many fine and historical reasons why this is
the case, not the least of which is that we didn’t start shipping DS in the
Eclipse runtime until fairly recently.&lt;/p&gt;

&lt;h2 id=&quot;repo-repro&quot;&gt;Repo repro&lt;/h2&gt;

&lt;p&gt;Of course, when you point this out, not everyone is aware of this subtle
behaviour. And while opinions may differ, code does not. I have put together a
&lt;a href=&quot;https://github.com/alblue/why-servicetracker-is-bad&quot;&gt;sample project&lt;/a&gt; which has
two bundles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client, which has an &lt;code class=&quot;highlighter-rouge&quot;&gt;Activator&lt;/code&gt; (yeah I know, I’m using it to make a point) that uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; to look for &lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt; instances&lt;/li&gt;
  &lt;li&gt;Runner, which has a DS component that provides a &lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt; interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When launched together, as soon as the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker.open()&lt;/code&gt; method is called, you can see the console printing &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Component has been instantiated&quot;&lt;/code&gt; message. This is despite the &lt;code class=&quot;highlighter-rouge&quot;&gt;Client&lt;/code&gt; bundle never actually using the service that the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; causes to be obtained.&lt;/p&gt;

&lt;p&gt;If you run it with the system property &lt;code class=&quot;highlighter-rouge&quot;&gt;-DdisableOpen=true&lt;/code&gt;, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker.open()&lt;/code&gt; statement is not called, and the component is not
instantiated.&lt;/p&gt;

&lt;p&gt;This is a non-trivial reason as to why Eclipse startup can be slow. There are
many, many uses of &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; to reach out to other parts of the system,
and regardless of whether these are lazy DS components or have been actively
instantiated, the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker.open()&lt;/code&gt; causes them to all be eagerly
activated, even before they’re needed. We can migrate Eclipse’s services to DS
(and in fact, I’m working on doing just that) but until we eliminate the
&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; from various Activators, we won’t see the benefit.&lt;/p&gt;

&lt;p&gt;The code in the &lt;a href=&quot;https://github.com/alblue/why-servicetracker-is-bad&quot;&gt;github repository&lt;/a&gt; essentially boils down to:&lt;/p&gt;

&lt;figure class=&quot;code-highlight-figure&quot;&gt;&lt;div class=&quot;code-highlight&quot;&gt;&lt;pre class=&quot;code-highlight-pre&quot;&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BundleContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundleContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;serviceTracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceTracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBoolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disableOpen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;serviceTracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This will cause a DS component to be instantiated even though we don't use it&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;code-highlight-row numbered&quot;&gt;&lt;div class=&quot;code-highlight-line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, there’s no way to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt; to listen to lazily activated services, and as an OSGi standard, the behaviour is baked in to it.&lt;/p&gt;

&lt;p&gt;Fortunately, there’s a lighter-weight tracker you can use called
&lt;a href=&quot;https://github.com/eclipse/rt.equinox.bundles/blob/master/bundles/org.eclipse.equinox.common/src/org/eclipse/core/runtime/ServiceCaller.java&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCaller&lt;/code&gt;&lt;/a&gt;
– but that’s a topic for another blog post.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker.open()&lt;/code&gt; will cause lazily instantiated DS components to
be activated eagerly, before the service is used. Instead of using
&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceTracker&lt;/code&gt;, try moving your service out to a DS component, and then DS
will do the right thing.&lt;/p&gt;</description>
	<pubDate>Thu, 02 Jul 2020 20:00:00 +0000</pubDate>
</item>
<item>
	<title>Wim Jongman: How to install RDi in the latest version of Eclipse</title>
	<guid isPermaLink="false">693 at https://remainsoftware.com</guid>
	<link>https://remainsoftware.com/blog/how-install-rdi-latest-version-eclipse</link>
	<description>&lt;span class=&quot;datestamp&quot;&gt;
      &lt;span class=&quot;date-display-single&quot;&gt;Monday, June 29, 2020&lt;/span&gt;  &lt;/span&gt;
        &lt;div class=&quot;field-item even&quot;&gt;
      In this blog, I am going to show you how to install IBM RDi into the latest and the greatest version of Eclipse. If you prefer to watch a video then scroll down to the end.

**EDIT** DOES NOT WORK WITH ECLIPSE 2020/09 AND HIGHER.

      &lt;p class=&quot;clearfix&quot;&gt;&lt;a href=&quot;https://remainsoftware.com/node/693&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;</description>
	<pubDate>Tue, 30 Jun 2020 15:57:41 +0000</pubDate>
</item>
<item>
	<title>Jens Reimann: Quarkus – Supersonic Subatomic IoT</title>
	<guid isPermaLink="false">https://dentrassi.de/?p=4423</guid>
	<link>https://dentrassi.de/2020/06/30/quarkus-supersonic-subatomic-iot/</link>
	<description>&lt;p&gt;Quarkus is advertised as a “Kubernetes Native Java stack, â€¦”, so we took it to a test, and checked what benefits we can get, by replacing an existing service from the IoT components of &lt;a href=&quot;https://enmasse.io/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;EnMasse&lt;/a&gt;, the cloud-native, self-service messaging system.&lt;/p&gt;



&lt;h2&gt;The context&lt;/h2&gt;



&lt;p&gt;For quite a while, I wanted to try out Quarkus. I wanted to see what benefits it brings us in the context of EnMasse. The IoT functionality of EnMasse is provided by &lt;a href=&quot;https://www.eclipse.org/hono/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;img alt=&quot;â„¢&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/13.0.0/72x72/2122.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/a&gt;, which is a micro-service based IoT connectivity platform. Hono is written in Java, makes heavy use of Vert.x, and the application startup and configuration is being orchestrated by Spring Boot.&lt;/p&gt;



&lt;p&gt;EnMasse provides the scalable messaging back-end, based on AMQP 1.0. It also takes care of the Eclipse Hono deployment, alongside EnMasse. Wiring up the different services, based on an infrastructure &lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;custom resource&lt;/a&gt;. In a nutshell, you create a snippet of YAML, and EnMasse takes care and deploys a messaging system for you, with first-class support for IoT.&lt;/p&gt;



&lt;div class=&quot;wp-block-image&quot;&gt;&lt;figure class=&quot;aligncenter size-large&quot;&gt;&lt;img alt=&quot;Architecture diagram, explaining the tenant service.&quot; class=&quot;wp-image-4446&quot; height=&quot;116&quot; src=&quot;https://dentrassi.de/wp-content/uploads/architecture.svg&quot; width=&quot;239&quot; /&gt;&lt;figcaption&gt;Architectural overview – showing the Tenant Service&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;This system requires a service called the “tenant service”. That service is responsible for looking up an IoT tenant, whenever the system needs to validate that a tenant exists or when its configuration is required. Like all the other services in Hono, this service is implemented using the default stack, based on Java, Vert.x, and Spring Boot. Most of the implementation is based on Vert.x alone, using its reactive and asynchronous programming model. Spring Boot is only used for wiring up the application, using dependency injection and configuration management. So this isn’t a typical Spring Boot application, it is neither using Spring Web or any of the Spring Messaging components. And the reason for choosing Vert.x over Spring in the past was performance. Vert.x provides an excellent performance, which we tested a while back in our &lt;a href=&quot;https://dentrassi.de/2018/07/25/scaling-iot-eclipse-hono/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;IoT scale test with Hono&lt;/a&gt;.&lt;/p&gt;



&lt;h2&gt;The goal&lt;/h2&gt;



&lt;p&gt;The goal was simple: make it use fewer resources, having the same functionality. We didn’t want to re-implement the whole service from scratch. And while the tenant service is specific to EnMasse, it still uses quite a lot of the base functionality coming from Hono. And we wanted to re-use all of that, as we did with Spring Boot. So this wasn’t one of those nice “greenfield” projects, where you can start from scratch, with a nice and clean “Hello World”. This is code is embedded in two bigger projects, passes system tests, and has a history of its own.&lt;/p&gt;



&lt;p&gt;So, change as little as possible and get out as much as we can. What else could it be?! And just to understand from where we started, here is a screenshot of the metrics of the tenant service instance on my test cluster:&lt;/p&gt;



&lt;div class=&quot;wp-block-image&quot;&gt;&lt;figure class=&quot;aligncenter size-large&quot;&gt;&lt;img alt=&quot;Screenshot of original resource consumption.&quot; class=&quot;wp-image-4456&quot; height=&quot;358&quot; src=&quot;https://dentrassi.de/wp-content/uploads/before-1024x358.png&quot; width=&quot;1024&quot; /&gt;&lt;figcaption&gt;Metrics for the original Spring Boot application&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;Around 200MiB of RAM, a little bit of CPU, and not much to do. As mentioned before, the tenant service only gets queries to verify the existence of a tenant, and the system will cache this information for a bit.&lt;/p&gt;



&lt;h2&gt;Step #1 â€“ Migrate to Quarkus&lt;/h2&gt;



&lt;p&gt;To use Quarkus, we started to tweak our existing project, to adopt the different APIs that Quarkus uses for dependency injection and configuration. And to be fair, that mostly meant saying good-bye to Spring Boot specific APIs, going for something more open. &lt;a href=&quot;https://quarkus.io/guides/cdi-reference&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Dependency Injection in Quarkus&lt;/a&gt; comes in the form of CDI. And &lt;a href=&quot;https://quarkus.io/guides/config#injecting-configuration-value&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Quarkus’ configuration is based on Eclipse MicroProfile Config&lt;/a&gt;. In a way, we didn’t migrate to Quarkus, but away from Spring Boot specific APIs.&lt;/p&gt;



&lt;h3&gt;First steps&lt;/h3&gt;



&lt;p&gt;Starting with adding the Quarkus Maven plugin and some basic dependencies to our Maven build, and off we go.&lt;/p&gt;



&lt;p&gt;And while replacing dependency inject was a rather smooth process, the configuration part was a bit more tricky. Both Hono and Microprofile Config have a rather opinionated view on the configuration. Which made it problematic to enhance the Hono configuration in the way that Microprofile was happy. So for the first iteration, we ended up wrapping the Hono configuration classes to make them play nice with Microprofile. However, this is something that we intend to improve in Hono in the future.&lt;/p&gt;



&lt;p&gt;Packaging the JAR into a container was no different than with the existing version. We only had to adapt the EnMasse operator to provide application arguments in the form Quarkus expected them.&lt;/p&gt;



&lt;h3&gt;First results&lt;/h3&gt;



&lt;p&gt;From a user perspective, nothing has changed. The tenant service still works the way it is expected to work and provides all the APIs as it did before. Just running with the Quarkus runtime, and the same &lt;abbr title=&quot;Java Virtual Machine&quot;&gt;JVM&lt;/abbr&gt; as before:&lt;/p&gt;



&lt;div class=&quot;wp-block-image&quot;&gt;&lt;figure class=&quot;aligncenter size-large&quot;&gt;&lt;img alt=&quot;Screenshot of resource consumption with Quarkus in JVM mode.&quot; class=&quot;wp-image-4457&quot; height=&quot;355&quot; src=&quot;https://dentrassi.de/wp-content/uploads/quarkus_jvm-1024x355.png&quot; width=&quot;1024&quot; /&gt;&lt;figcaption&gt;Metrics after the conversion to Quarkus, in JVM mode&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;We can directly see a drop of 50MiB from 200MiB to 150MiB of RAM, that isn’t bad. CPU isn’t really different, though. There also is a slight improvement of the startup time, from ~2.5 seconds down to ~2 seconds. But that isn’t a real game-changer, I would say. Considering that ~2.5 seconds startup time, for a Spring Boot application, is actually not too bad, other services take much longer.&lt;/p&gt;



&lt;h2&gt;Step #2 â€“ The native image&lt;/h2&gt;



&lt;p&gt;Everyone wants to do Java “native compilation”. I guess the expectation is that native compilation makes everything go much faster. There are different tests by different people, comparing native compilation and JVM mode, and the outcomes vary a lot. I don’t think that “native images” are a silver bullet to performance issues, but still, we have been curious to give it a try and see what happens.&lt;/p&gt;



&lt;h3&gt;Native image with Quarkus&lt;/h3&gt;



&lt;p&gt;Enabling native image mode in Quarkus is trivial. You need to add a Maven profile, set a few properties and you have native image generation enabled. With setting a single property in the Maven POM file, you can also instruct the Quarkus plugin to perform the native compilation step in a container. With that, you don’t need to worry about the GraalVM installation on your local machine.&lt;/p&gt;



&lt;p&gt;Native image generation can be tricky, we knew that. However, we didn’t expect this to be as complex as being “Step #2”. In a nutshell, creating a native image compiles your code to CPU instruction, rather than JVM bytecode. In order to do that, it traces the call graph, and it fails to do so when it comes to reflection in Java. GraalVM supports reflection, but you need to provide the information about types, classes, and methods that want to participate in the reflection system, from the outside. Luckily Quarkus provides tooling to generate this information during the build. Quarkus knows about constructs like de-serialization in Jackson and can generate the required information for GraalVM to compile this correctly.&lt;/p&gt;



&lt;p&gt;However, the magic only works in areas that Quarkus is aware of. So we did run into some weird issues, strange behavior that was hard to track down. Things that worked in JVM mode all of a sudden were broken in native image mode. Not all the hints are in the documentation. And we also didn’t read (or understand) all of the hints that are there. It takes a bit of time to learn, and with a lot of help from some colleagues (many thanks to &lt;a href=&quot;https://twitter.com/geoand86&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Georgios&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/xstefank&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Martin&lt;/a&gt;, and of course &lt;a href=&quot;https://twitter.com/dejanb&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Dejan&lt;/a&gt; for all the support), we got it running.&lt;/p&gt;



&lt;h3&gt;What is the benefit?&lt;/h3&gt;



&lt;p&gt;After all the struggle, what did it give us?&lt;/p&gt;



&lt;div class=&quot;wp-block-image&quot;&gt;&lt;figure class=&quot;aligncenter size-large&quot;&gt;&lt;img alt=&quot;Screenshot of resource consumption with Quarkus in native image mode.&quot; class=&quot;wp-image-4458&quot; height=&quot;355&quot; src=&quot;https://dentrassi.de/wp-content/uploads/quarkus_native-1024x355.png&quot; width=&quot;1024&quot; /&gt;&lt;figcaption&gt;Metrics when running as native image Quarkus application&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;So, we are down another 50MiB of RAM. Starting from ~200MiB, down to ~100MiB. That is only half the RAM! Also, this time, we see a reduction in CPU load. While in JVM mode (both Quarkus and Spring Boot), the CPU load was around 2 &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;millicores&lt;/a&gt;, now the CPU is always below that, even during application startup. Startup time is down from ~2.5 seconds with Spring Boot, to ~2 seconds with Quarkus in JVM mode, to ~0.4 seconds for Quarkus in native image mode. Definitely an improvement, but still, neither of those times is really bad.&lt;/p&gt;



&lt;h2&gt;Pros and cons of Quarkus&lt;/h2&gt;



&lt;p&gt;Switching to Quarkus was no problem at all. We found a few areas in the Hono configuration classes to improve. But in the end, we can keep the original Spring Boot setup and have Quarkus at the same time. Possibly other Microprofile compatible frameworks as well, though we didn’t test that. Everything worked as before, just using less memory. And except for the configuration classes, we could pretty much keep the whole application as it was.&lt;/p&gt;



&lt;p&gt;Native image generation was more complex than expected. However, we also saw some real benefits. And while we didn’t do any performance tests on that, here is a thought: if the service has the same performance as before, the fact that it requires only half the of memory, and half the CPU cycles, this allows us to run twice the amount of instances now. Doubling throughput, as we can scale horizontally. I am really looking forward to another scale test since we did do all other kinds of optimizations as well.&lt;/p&gt;



&lt;p&gt;You should also consider that the process of building a native image takes quite an amount of time. For this, rather simple service, it takes around 3 minutes on an above-than-average machine, just to build the native image. I did notice some decent improvement when trying out GraalVM 20.0 over 19.3, so I would expect some more improvements on the toolchain over time. Things like hot code replacement while debugging, are things that are not possible with the native image profile though. It is a different workflow, and that may take a bit to adapt. However, you don’t need to commit to either way. You can still have both at the same time. You can work with JVM mode and the &lt;a href=&quot;https://quarkus.io/guides/getting-started#development-mode&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Quarkus development mode&lt;/a&gt;, and then &lt;a href=&quot;https://quarkus.io/guides/building-native-image&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;enable the native image profile&lt;/a&gt;, whenever you are ready.&lt;/p&gt;



&lt;p&gt;Taking a look at the size of the container images, I noticed that the native image isn’t smaller (~85 MiB), compared to the uber-JAR file (~45 MiB). Then again, our “java base” image alone is around ~435 MiB. And it only adds the JVM on top of the Fedora minimal image. As you don’t need the JVM when you have the native image, you can go directly with the Fedora minimal image, which is around ~165 MiB, and end up with a much smaller overall image.&lt;/p&gt;



&lt;h2&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;Switching our existing Java project to Quarkus wasn’t a big deal. It required some changes, yes. But those changes also mean, using some more open APIs, governed by the Eclipse Foundation’s development process, compared to using Spring Boot specific APIs. And while you can still use Spring Boot, changing the configuration to Eclipse MicroProfile opens up other possibilities as well. Not only Quarkus.&lt;/p&gt;



&lt;p&gt;Just by taking a quick look at the numbers, comparing the figures from Spring Boot to Quarkus with native image compilation: RAM consumption was down to 50% of the original, CPU usage also was down to at least 50% of original usage, and the container image shrank to ~50% of the original size. And as mentioned in the beginning, we have been using Vert.x for all the core processing. Users that make use of the other Spring components should see more considerable improvement.&lt;/p&gt;



&lt;p&gt;Going forward, I hope we can bring the changes we made to the next versions of EnMasse and Eclipse Hono. There is a real benefit here, and it provides you with some awesome additional choices. And in case you don’t like to choose, the EnMasse operator has some reasonable defaults for you &lt;img alt=&quot;ðŸ˜‰&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/13.0.0/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;



&lt;hr class=&quot;wp-block-separator&quot; /&gt;



&lt;h2&gt;Also see&lt;/h2&gt;



&lt;p&gt;This work is based on the work of others. Many thanks to:&lt;/p&gt;



&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/geoand86&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Georgios Andrianakis&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/dejanb&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Dejan Bosanac&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/xstefank&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Martin Stefanko&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;



&lt;div class=&quot;wp-block-group&quot;&gt;&lt;div class=&quot;wp-block-group__inner-container&quot;&gt;
&lt;div class=&quot;wp-block-group&quot;&gt;&lt;div class=&quot;wp-block-group__inner-container&quot;&gt;
&lt;p&gt;GitHub branch: &lt;a href=&quot;https://github.com/ctron/enmasse/tree/feature/quarkus_tenant_1&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;ctron/enmasse#feature/quarkus_tenant_1&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;



&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://dentrassi.de/2020/06/30/quarkus-supersonic-subatomic-iot/&quot; rel=&quot;nofollow&quot;&gt;Quarkus â€“ Supersonic Subatomic IoT&lt;/a&gt; appeared first on &lt;a href=&quot;https://dentrassi.de&quot; rel=&quot;nofollow&quot;&gt;ctron's blog&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 30 Jun 2020 15:22:14 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Updates to the Eclipse IP Due Diligence Process</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5705</guid>
	<link>https://waynebeaton.wordpress.com/2020/06/25/updates-to-the-eclipse-ip-due-diligence-process/</link>
	<description>&lt;p&gt;In October 2019, The Eclipse Foundation’s Board of Directors approved an update to the IP Policy that introduces several significant changes in our IP due diligence process. I’ve just pushed out an update to the &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip&quot;&gt;Intellectual Property&lt;/a&gt; section in the Eclipse Foundation Project Handbook.&lt;/p&gt;
&lt;p&gt;I’ll apologize in advance that the updates are still a little rough and require some refinements. Like the rest of the handbook, we continually revise and rework the content based on your feedback.&lt;/p&gt;
&lt;p&gt;Here’s a quick summary of the most significant changes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;License certification only for third-party content.&lt;/strong&gt; This change removes the requirement to perform deep copyright, provenance and scanning of anomalies for third-party content unless it is being modified and/or if there are &lt;em&gt;special&lt;/em&gt; considerations regarding the content. Instead, the focus for third-party content is on &lt;em&gt;license compatibility&lt;/em&gt; only, which had previously been referred to as &lt;em&gt;Type A&lt;/em&gt; due diligence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leverage other sources of license information for third-party content.&lt;/strong&gt; With this change to license certification only for third-party content, we are able to leverage existing sources of information license information. That is, the requirement that the Eclipse IP Team personally review every bit of third-party content has been removed and we can now leverage other &lt;em&gt;trusted&lt;/em&gt; sources.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ClearlyDefined is a &lt;em&gt;trusted&lt;/em&gt; source of license information.&lt;/strong&gt; We currently have two trusted sources of license information: The Eclipse Foundation’s &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-ipzilla&quot;&gt;IPZilla&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-clearlydefined&quot;&gt;ClearlyDefined&lt;/a&gt;. The IPZilla database has been painstakingly built over most of the lifespan of the Eclipse Foundation; it contains a vast wealth of deeply vetted information about many versions of many third-party libraries. ClearlyDefined is an OSI project that combines automated harvesting of software repositories and curation by trusted members of the community to produce a massive database of license (and other) information about content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Piggyback CQs are no longer required.&lt;/strong&gt; CQs had previously been used for tracking both the vetting process and the use of third-party content. With the changes, we are no longer required track the use of third-party content using CQs, so piggyback CQs are no longer necessary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parallel IP is used in all cases.&lt;/strong&gt; Previously, our so-called &lt;em&gt;Parallel IP&lt;/em&gt; process, the means by which project teams could leverage content during development while the IP Team completed their due diligence review was available only to projects in the &lt;em&gt;incubation phase&lt;/em&gt; and only for content with specific conditions. This is no longer the case: full vetting is now always applied in parallel in all cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CQs are not required for third-party content in all cases.&lt;/strong&gt; In the case of third-party content due diligence, &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-cq&quot;&gt;CQs&lt;/a&gt; are now only used to track the vetting process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CQs are no longer required &lt;em&gt;before&lt;/em&gt; third-party content is introduced.&lt;/strong&gt; Previously, the IP Policy required that all third-party content must be vetted by the Eclipse IP Team before it can be used by an Eclipse Project. The IP Policy updates turn this around. Eclipse project teams may now introduce new third-party content during a development cycle without first checking with the IP Team. That is, a project team may commit build scripts, code references, etc. to third-party content to their source code repository without first creating a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-cq&quot;&gt;CQ&lt;/a&gt; to request IP Team review and approval of the third-party content. At least during the development period between releases, the onus is on the project team to—​with reasonable confidence—​ensure any third-party content that they introduce is license compatible with the project’s license. Before any content may be included in any formal release the project team must engage in the &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-prereq-diligence&quot;&gt;due diligence process&lt;/a&gt; to validate that the third-party content licenses are compatible with the project license.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;History may be retained when an existing project moves to the Eclipse Foundation.&lt;/strong&gt; We had previously required that the commit history for a project moving to the Eclipse Foundation be squashed and that the &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-initial-contribution&quot;&gt;initial contribution&lt;/a&gt; be the very first commit in the repository. This is no longer the case; existing projects are now encouraged (but not required) to retain their commit history. The initial contribution must still be provided to the IP Team via &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-cq&quot;&gt;CQ&lt;/a&gt; as a snapshot of the &lt;code&gt;HEAD&lt;/code&gt; state of the existing repository (if any).&lt;/p&gt;
&lt;p&gt;The due diligence process for project content is unchanged.&lt;/p&gt;
&lt;p&gt;If you notice anything that looks particularly wrong or troubling, please either open a &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Dash&amp;amp;component=Handbook&quot;&gt;bug report&lt;/a&gt;, or send a note to EMO.&lt;/p&gt;</description>
	<pubDate>Thu, 25 Jun 2020 19:23:05 +0000</pubDate>
</item>
<item>
	<title>Ed Merks: Eclipse JustJ</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3879044552984472733.post-4024802254839825841</guid>
	<link>https://ed-merks.blogspot.com/2020/06/eclipse-justj.html</link>
	<description>&lt;div&gt;I've recently completed the initial support for provisioning the new &lt;a href=&quot;https://www.eclipse.org/justj/&quot;&gt;Eclipse JustJ&lt;/a&gt; project, complete with a logo for it.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/--SJ-lAj4jZU/XvRXKtFcMVI/AAAAAAAACzE/rK6Bv1AXbdgdCC8LvFBLcdfjWNjpqmQMgCK4BGAsYHg/s200/justj_title.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/--SJ-lAj4jZU/XvRXKtFcMVI/AAAAAAAACzE/rK6Bv1AXbdgdCC8LvFBLcdfjWNjpqmQMgCK4BGAsYHg/justj_title.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I've learned several new technologies and honed existing technology skills to make this happen. For example, I've previously used Inkscape to create nicer images for Oomph; a *.png with alpha is much better than a *.gif with a transparent pixel, particularly with the vogue, dark-theme fashion trend, which for old people like me feels more like the old days of CRT monitors than something modern, but hey, to each their own. In any case, a *.svg is cool, definitely looks great at every resolution, and can easily be rendered to a *.png.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;By the way, did you know that artwork derivative of  Eclipse artwork requires special approval? Previously the Eclipse Board of Directors had to review and approve such logos, but now our beloved, supreme leader, Mike Milinkovich, is empowered to do that personally.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Getting to the point where we can redistribute JREs at Eclipse has been a long and winding road.  This of course required Board approval and your elected Committer Representatives helped push that to fruition last year.  Speaking of which, now there is an exciting late-breaking development: the move of &lt;a href=&quot;https://adoptopenjdk.net/&quot; target=&quot;_blank&quot;&gt;AdoptOpenJDK&lt;/a&gt; to &lt;a href=&quot;https://www.infoq.com/news/2020/06/adoptopenjdk-eclipse-adoptium/?utm_campaign=infoq_content&amp;amp;utm_source=infoq&amp;amp;utm_medium=feed&amp;amp;utm_term=Eclipse&quot; target=&quot;_blank&quot;&gt;Eclipse Adoptium&lt;/a&gt;.  This will be an important source JREs for JustJ!&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One of the primary goals of JustJ is to provide JREs via p2 update sites such that a product build can easily incorporate a JRE into the product. With that in place, the product runs out-of-the-box regardless of the JRE installed on the end-user's computer, which is particularly useful for products that are not Java-centric where the end-user doesn't care about the fact that Eclipse is implemented using Java.  This will also enable the Eclipse Installer to run out-of-the-box and will enable the installer to create an installation that, at the user's discretion, uses a JRE provided by Eclipse. In all cases, this includes the ability to update the installation's embedded JRE as new ones are released.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The first stage is to build a JRE from a JDK using &lt;a href=&quot;https://www.eclipse.org/justj/?page=index#jlink&quot;&gt;jlink&lt;/a&gt;.  This must run natively on the JDK's actual supported operating system and hardware architecture.  Of course we want to automate this step, and all the steps involved in producing a p2 repository populated with JREs.  This is where I had to learn about Jenkins pipeline scripts.  I'm particularly grateful to MikaÃ«l Barbero for helping me get started with a simple example.  Now I am a pipeline junkie, and of course I had to learn Groovy as well. &lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In the initial stage, we &lt;a href=&quot;https://www.eclipse.org/justj/?page=index#jre&quot;&gt;generate the JREs&lt;/a&gt; themselves, and that involves using shell scripts effectively.  I'm not a big fan of shell scripts, but they're a necessary evil.  I authored a single script that produces JREs on all the supported operating systems; one that I can run locally on Windows and on my two virtual boxes as well. The pipeline itself needs to run certain stages on specific agents such that their steps are performed on the appropriate operating system and hardware.  I'm grate to &lt;span class=&quot;gD&quot; name=&quot;Robert.Hilbrich@dlr.de&quot; tabindex=&quot;&quot;&gt;Robert Hilbrich of &lt;a href=&quot;https://www.dlr.de&quot;&gt;DLR&lt;/a&gt; for supporting JustJ's builds with their organization's resource packs!  He's also been kind enough to be one of our first test guinea pigs building a product with a JustJ JRE.  The initial stage produces a &lt;a href=&quot;https://download.eclipse.org/justj/www/?page=download#jre-downloads&quot;&gt;set of JREs&lt;/a&gt;.&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;gD&quot; name=&quot;Robert.Hilbrich@dlr.de&quot; tabindex=&quot;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-r2RYf3l1ZUk/XvRaGEkiLTI/AAAAAAAACzg/9w6Na3rjlEU7rTY_v51gFtZMRzxpibM6QCK4BGAsYHg/s5184/IMG_2959.JPG&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-r2RYf3l1ZUk/XvRaGEkiLTI/AAAAAAAACzg/9w6Na3rjlEU7rTY_v51gFtZMRzxpibM6QCK4BGAsYHg/s320/IMG_2959.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span class=&quot;gD&quot; name=&quot;Robert.Hilbrich@dlr.de&quot; tabindex=&quot;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;In the next stage, JREs need to be wrapped into plugins and features to produce a p2 repository via a Maven/Tycho build.  This is a huge amount of boiler plate scaffolding that is error-prone to author and challenging to maintain, especially when providing multiple JRE flavors.  So of course we want to automate the generation of this scaffolding as well.  Naturally if we're going to generate something, we need a model to capture the boiled-down essence of what needs to be generated.  So I whipped together an &lt;a href=&quot;https://www.eclipse.org/modeling/emf/&quot;&gt;EMF&lt;/a&gt; model and used JET templates to sketch out the scaffolding. With the super cool &lt;a href=&quot;https://help.eclipse.org/2020-03/index.jsp?topic=%2Forg.eclipse.emf.doc%2Ftutorials%2Fjet%2Fjet.html&amp;amp;cp%3D30_1_3&quot;&gt;JET Editor&lt;/a&gt;, these are really easy to author and maintain.  This stage is &lt;a href=&quot;https://www.eclipse.org/justj/?page=index#jre-p2&quot;&gt;described in the documentation&lt;/a&gt; and produces a &lt;a href=&quot;https://download.eclipse.org/justj/www/?page=download#p2-update-sites&quot;&gt;p2 update site&lt;/a&gt;.  The sites are automatically maintained and the index pages are automatically generated.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To author nice documentation I had to learn PHP much better.  It's really quite cool and very powerful, particularly for producing pages with dynamic content.  For example, I used it to implement more flexible browsing support of &lt;a href=&quot;https://download.eclipse.org/justj/?file=&quot;&gt;download.eclipse.org&lt;/a&gt; so that one can really see all the files present, even when there is an index.html or index.php in the folder.  In any case, there is now lots of documentation for JustJ to describe everything in detail, and it was authored with the help of PHP scaffolding.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Last but not least, there is an &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Oomph_Authoring&quot;&gt;Oomph&lt;/a&gt; setup to automate the provisioning of a full development environment along with &lt;a href=&quot;https://www.eclipse.org/justj/?page=developer#setup&quot;&gt;a tutorial&lt;/a&gt; to describe in detail everything in that workspace.  There's no excuse not to contribute.  While authoring this tutorial, I found that creating nice, appropriately-clipped screen captures is super annoying and very time consuming, so I dropped a little goodie into Oomph to make that easier.   You might want to try it. Just add &quot;-Dorg.eclipse.oomph.ui.screenshot=&amp;lt;some-folder-location&amp;gt;&quot; to your eclipse.ini to enable it.  Then, if you hit Ctrl twice quickly, screen captures will be produced immediately based on where your application currently has focus.  If you hit Shift twice quickly, screen captures will be produced after a short delay.  This allows you to bring up a menu from the menu bar, from a toolbar button, or a context menu, and capture that menu.  In all cases, the captures include the &quot;simulated&quot; mouse cursor and starts with the &quot;focus&quot;, expanding outward to the full enclosing window.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The bottom line, JustJ generates &lt;b&gt;everything&lt;/b&gt; given just a set of URLs to JDKs as input, and it maintains &lt;b&gt;everything&lt;/b&gt; automatically.  It even provides an &lt;a href=&quot;https://www.eclipse.org/justj/?page=documentation#products&quot;&gt;example&lt;/a&gt; of how to build a product with an embedded JRE to get you started quickly.  And thanks to some test guinea pigs, we know it really works as advertised.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-BPgLVPZJvXg/XvRatdCFZ6I/AAAAAAAACz0/lYjJuA3eyikploEn7oxbwSA05ZmksryHQCK4BGAsYHg/s5184/IMG_3029.JPG&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-BPgLVPZJvXg/XvRatdCFZ6I/AAAAAAAACz0/lYjJuA3eyikploEn7oxbwSA05ZmksryHQCK4BGAsYHg/s320/IMG_3029.JPG&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;On the personal front, during this time period, I finished my move to Switzerland.  Getting up early here is a feast for the eyes! The movers were scurrying around my apartment the same days as the 2020-06 release, which was also the same day as one of the Eclipse Board meetings.  That was a little too much to juggle at once! &lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;At this point, I can make anything work and I can make anything that already works work even better. Need help with something?  I'm easy to find...&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 25 Jun 2020 08:18:32 +0000</pubDate>
	<author>noreply@blogger.com (Ed Merks)</author>
</item>
<item>
	<title>InfoQ Eclipse feed: AdoptOpenJDK to Become Eclipse Adoptium</title>
	<guid isPermaLink="true">https://www.infoq.com/news/2020/06/adoptopenjdk-eclipse-adoptium/?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>https://www.infoq.com/news/2020/06/adoptopenjdk-eclipse-adoptium/?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;https://res.infoq.com/news/2020/06/adoptopenjdk-eclipse-adoptium/en/headerimage/Wave-1592574050999.jpg&quot; /&gt;&lt;p&gt;The AdoptOpenJDK project is to move under the Eclipse umbrella as Eclipse Adoptium as part of a transition to an open-source foundation. Having a vendor-neutral open-source foundation to steward the AdoptOpenJDK project will give a strong basis for the future. Read on to find out what it means from a practical perspective and how the transition will play out.&lt;/p&gt; &lt;i&gt;By Alex Blewitt&lt;/i&gt;</description>
	<pubDate>Fri, 19 Jun 2020 16:00:00 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.18 Released!</title>
	<guid isPermaLink="false">http://www.eclipse.org/webtools/news.php#permalink192</guid>
	<link>http://eclipse.org/webtools/releases/3.18</link>
	<description>&lt;div&gt;
		The Eclipse Web Tools Platform 3.18 has been released!
		&lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt;
		and updates can be performed using the
		Eclipse IDE 2020-06
		&lt;a href=&quot;http://download.eclipse.org/releases/2020-06/&quot;&gt;Update Site&lt;/a&gt;
		or through the
		&lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;
		.
		Release 3.18 is included in the 2020-06
		&lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2020-06/r/eclipse-ide-enterprise-java-developers&quot;&gt;
			Eclipse IDE for Enterprise Java Developers
		&lt;/a&gt;
		, with selected portions also included in several
		&lt;a href=&quot;http://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;
		. Adopters can download
		&lt;a href=&quot;http://download.eclipse.org/webtools/downloads/&quot;&gt;the R3.18.0 p2 repository&lt;/a&gt;
		directly and combine it with the necessary dependencies.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/webtools/news.php#permalink192&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 17 Jun 2020 23:55:18 +0000</pubDate>
</item>
<item>
	<title>Frank Appel: Clean Sheet Service Update (0.8)</title>
	<guid isPermaLink="false">https://www.codeaffine.com/?p=31975</guid>
	<link>https://www.codeaffine.com/2020/05/23/clean-sheet-service-update-0-8/</link>
	<description>&lt;p&gt;Written by &lt;a href=&quot;https://www.codeaffine.com/author/fappel/&quot; rel=&quot;nofollow&quot;&gt;Frank Appel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to a community contribution we’re able to announce another Clean Sheet Service Update (0.8).&lt;/p&gt;
&lt;div class=&quot;notification lock cannothide&quot;&gt;&lt;div class=&quot;boximg infoimg&quot;&gt;&lt;/div&gt;&lt;h2&gt;The Clean Sheet Eclipse Design&lt;/h2&gt;

In case you've missed out on the topic and you are wondering what I'm talking about, here is a screenshot of my real world setup using the Clean Sheet theme (click on the image to enlarge).

&lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet-screenshot.html&quot;&gt;&lt;img alt=&quot;Eclipse IDE Look and Feel: Clean Sheet Screenshot&quot; class=&quot;alignnone size-full wp-image-12279&quot; height=&quot;408&quot; src=&quot;https://www.codeaffine.com/wp-content/uploads/2015/11/clean-sheet-eclipse-theme.png&quot; width=&quot;850&quot; /&gt;&lt;/a&gt;

For more information please refer to the features landing page at &lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet.html&quot; target=&quot;_blank&quot;&gt;http://fappel.github.io/xiliary/clean-sheet.html&lt;/a&gt;, read the introductory Clean Sheet feature description &lt;a href=&quot;https://www.codeaffine.com/2015/11/04/clean-sheet-an-ergonomic-eclipse-theme-for-windows-10/&quot;&gt;blog post&lt;/a&gt;, and check out the &lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet-new-and-noteworthy.html&quot; target=&quot;_blank&quot;&gt;New &amp;amp; Noteworthy&lt;/a&gt; page.&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;Clean Sheet Service Update (0.8)&lt;/h2&gt;
&lt;p&gt;This service update fixes a rendering issue of ruler numbers. Kudos to &lt;a href=&quot;https://twitter.com/_Pyves&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Pierre-Yves B.&lt;/a&gt; for contributing the necessary fixes. Please refer to the issue &lt;a href=&quot;https://github.com/fappel/xiliary/issues/87&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;#87&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Clean Sheet Installation&lt;/h2&gt;

&lt;p&gt;Drag the 'Install' link below to your running Eclipse instance&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;drag&quot; href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2588223&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;img alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; class=&quot;img-responsive&quot; src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;Select Help &amp;gt; Install New Software.../Check for Updates.&lt;br /&gt;
P2 repository software site: @ &lt;a href=&quot;http://fappel.github.io/xiliary/&quot;&gt;http://fappel.github.io/xiliary/&lt;/a&gt;&lt;br /&gt;
Feature: Code Affine Theme&lt;/p&gt;

&lt;p&gt;After feature installation and workbench restart select the ‘Clean Sheet’ theme:&lt;br /&gt;
Preferences: General &amp;gt; Appearance &amp;gt; Theme: Clean Sheet&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;On a Final Note, …&lt;/h2&gt;
&lt;p&gt;Of course, it’s interesting to hear suggestions or find out about potential issues that need to be resolved. Feel free to use the &lt;a href=&quot;https://github.com/fappel/xiliary/issues&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Xiliary Issue Tracker&lt;/a&gt; or the comment section below for reporting.&lt;/p&gt;
&lt;p&gt;I’d like to thank all the Clean Sheet adopters for the support! Have fun with the latest update :-)&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.codeaffine.com/2020/05/23/clean-sheet-service-update-0-8/&quot; rel=&quot;nofollow&quot;&gt;Clean Sheet Service Update (0.8)&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.codeaffine.com&quot; rel=&quot;nofollow&quot;&gt;Code Affine&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Sat, 23 May 2020 09:25:30 +0000</pubDate>
</item>
<item>
	<title>Frank Appel: Clean Sheet Service Update (0.7)</title>
	<guid isPermaLink="false">https://www.codeaffine.com/?p=31608</guid>
	<link>https://www.codeaffine.com/2020/04/24/clean-sheet-service-update-0-7/</link>
	<description>&lt;p&gt;Written by &lt;a href=&quot;https://www.codeaffine.com/author/fappel/&quot; rel=&quot;nofollow&quot;&gt;Frank Appel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s been a while, but today we’re happy to announce a Clean Sheet Service Update (0.7).&lt;/p&gt;
&lt;div class=&quot;notification lock cannothide&quot;&gt;&lt;div class=&quot;boximg infoimg&quot;&gt;&lt;/div&gt;&lt;h2&gt;The Clean Sheet Eclipse Design&lt;/h2&gt;

In case you've missed out on the topic and you are wondering what I'm talking about, here is a screenshot of my real world setup using the Clean Sheet theme (click on the image to enlarge).

&lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet-screenshot.html&quot;&gt;&lt;img alt=&quot;Eclipse IDE Look and Feel: Clean Sheet Screenshot&quot; class=&quot;alignnone size-full wp-image-12279&quot; height=&quot;408&quot; src=&quot;https://www.codeaffine.com/wp-content/uploads/2015/11/clean-sheet-eclipse-theme.png&quot; width=&quot;850&quot; /&gt;&lt;/a&gt;

For more information please refer to the features landing page at &lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet.html&quot; target=&quot;_blank&quot;&gt;http://fappel.github.io/xiliary/clean-sheet.html&lt;/a&gt;, read the introductory Clean Sheet feature description &lt;a href=&quot;https://www.codeaffine.com/2015/11/04/clean-sheet-an-ergonomic-eclipse-theme-for-windows-10/&quot;&gt;blog post&lt;/a&gt;, and check out the &lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet-new-and-noteworthy.html&quot; target=&quot;_blank&quot;&gt;New &amp;amp; Noteworthy&lt;/a&gt; page.&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;Clean Sheet Service Update (0.7)&lt;/h2&gt;
&lt;p&gt;This service update provides the long overdue JRE 11 compatibility on windows platforms. Kudos to &lt;a href=&quot;https://twitter.com/_Pyves&quot; target=&quot;_blank&quot;&gt;Pierre-Yves B.&lt;/a&gt; for contributing the necessary fixes. Please refer to the issues &lt;a href=&quot;https://github.com/fappel/xiliary/issues/88&quot; target=&quot;_blank&quot;&gt;#88&lt;/a&gt; and &lt;a href=&quot;https://github.com/fappel/xiliary/issues/90&quot; target=&quot;_blank&quot;&gt;#90&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Clean Sheet Installation&lt;/h2&gt;

&lt;p&gt;Drag the 'Install' link below to your running Eclipse instance&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;drag&quot; href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2588223&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;img alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; class=&quot;img-responsive&quot; src=&quot;https://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;Select Help &amp;gt; Install New Software.../Check for Updates.&lt;br /&gt;
P2 repository software site: @ &lt;a href=&quot;http://fappel.github.io/xiliary/&quot;&gt;http://fappel.github.io/xiliary/&lt;/a&gt;&lt;br /&gt;
Feature: Code Affine Theme&lt;/p&gt;

&lt;p&gt;After feature installation and workbench restart select the ‘Clean Sheet’ theme:&lt;br /&gt;
Preferences: General &amp;gt; Appearance &amp;gt; Theme: Clean Sheet&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;On a Final Note, …&lt;/h2&gt;
&lt;p&gt;Of course, it’s interesting to hear suggestions or find out about potential issues that need to be resolved. Feel free to use the &lt;a href=&quot;https://github.com/fappel/xiliary/issues&quot; target=&quot;_blank&quot;&gt;Xiliary Issue Tracker&lt;/a&gt; or the comment section below for reporting.&lt;/p&gt;
&lt;p&gt;I’d like to thank all the Clean Sheet adopters for the support! Have fun with the latest update :-)&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.codeaffine.com/2020/04/24/clean-sheet-service-update-0-7/&quot; rel=&quot;nofollow&quot;&gt;Clean Sheet Service Update (0.7)&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.codeaffine.com&quot; rel=&quot;nofollow&quot;&gt;Code Affine&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 24 Apr 2020 08:49:57 +0000</pubDate>
</item>
<item>
	<title>Mat Booth: Using the remote OSGi console with Equinox</title>
	<guid isPermaLink="false">tag:blog.matbooth.co.uk,2020-04-23:/14-remote-osgi-console-with-equinox.html/</guid>
	<link>http://blog.matbooth.co.uk/14-remote-osgi-console-with-equinox.html</link>
	<description>&lt;p&gt;You may be familiar with the OSGi shell you get when you pass the &quot;-console&quot; option to Equinox on the command line. Did you know you can also use this console over Telnet sessions or SSH sessions? This article shows you the bare minimum needed to do so.&lt;/p&gt;</description>
	<pubDate>Thu, 23 Apr 2020 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: EclipseCon 2020 CFP is Open</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/Duq-xjtcPnk/eclipsecon-2020-cfp-open</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/Duq-xjtcPnk/eclipsecon-2020-cfp-open</link>
	<description>If you are interested in speaking, our call for proposals is now open. Please visit the CFP page for information on how to submit your talk.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/Duq-xjtcPnk&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 16 Apr 2020 20:30:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Add Your Voice to the 2020 Jakarta EE Developer Survey</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/BgIQC6uoC7Y/add-your-voice-2020-jakarta-ee-developer-survey</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/BgIQC6uoC7Y/add-your-voice-2020-jakarta-ee-developer-survey</link>
	<description>Our third annual Jakarta EE Developer Survey is now open and I encourage everyone to take a few minutes and complete the survey before the April 30 deadline.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/BgIQC6uoC7Y&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 07 Apr 2020 13:00:00 +0000</pubDate>
</item>
<item>
	<title>Christopher Guindon: Eclipse IoT Website Redesign</title>
	<guid isPermaLink="true">https://www.chrisguindon.com/post/eclipse-iot-website-redesign/</guid>
	<link>https://www.chrisguindon.com/post/eclipse-iot-website-redesign/</link>
	<description>&lt;p&gt;The &lt;a href=&quot;https://iot.eclipse.org&quot;&gt;Eclipse IoT&lt;/a&gt; website redesign is now live! This project was a &lt;a href=&quot;https://github.com/EclipseFdn/iot.eclipse.org/pull/339&quot;&gt;huge undertaking&lt;/a&gt; for us; we added 5,245 lines of code, closed &lt;a href=&quot;https://github.com/EclipseFdn/iot.eclipse.org/projects/3#column-6757970&quot;&gt;15 issues&lt;/a&gt;, removed 82,361 lines of code and made &lt;a href=&quot;https://github.com/EclipseFdn/iot.eclipse.org/pull/339/commits&quot;&gt;84 commits&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse IoT Homepage&quot; src=&quot;https://www.chrisguindon.com/uploads/iot-2020.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Yes, you got that right, the end result was &lt;strong&gt;-77,116 lines of code&lt;/strong&gt; because we took the opportunity to clean up our codebase.&lt;/p&gt;
&lt;p&gt;To kickoff this initiative, the community help us define the &lt;a href=&quot;https://github.com/EclipseFdn/iot.eclipse.org/issues/179&quot;&gt;goals&lt;/a&gt; for this project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Improve our information architecture&lt;/strong&gt;: &lt;br /&gt;
Led by &lt;a href=&quot;https://accounts.eclipse.org/users/fdesbiens&quot;&gt;Frédéric Desbiens&lt;/a&gt;, the Eclipse IoT community created a new &lt;a href=&quot;https://github.com/EclipseFdn/iot.eclipse.org/files/3591212/iot.eclipse.org.new.structure.v2.pdf&quot;&gt;structure&lt;/a&gt; for the website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contribute to the recruitment of new members and adopters&lt;/strong&gt;: &lt;br /&gt;
&lt;a href=&quot;https://iot.eclipse.org/adopters/&quot;&gt;Adopters&lt;/a&gt; and &lt;a href=&quot;https://iot.eclipse.org/membership/&quot;&gt;Members&lt;/a&gt; are now top-level menu items. We also created a new “&lt;a href=&quot;https://iot.eclipse.org/adopters/how-to-be-listed-as-an-adopter/&quot;&gt;How to be Listed as an Adopter&lt;/a&gt;” page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ensure the website cathers to both technical and non-technical visitors&lt;/strong&gt;: &lt;br /&gt;
We made some big improvements to our &lt;a href=&quot;https://iot.eclipse.org/community/&quot;&gt;Community&lt;/a&gt; and &lt;a href=&quot;https://iot.eclipse.org/community/resources/&quot;&gt;Resources&lt;/a&gt; sections. These sections cathers to both technical and non-technical users since you can find Case-Studies, Market Reports, Videos, White Papers and some additional information on how you can stay informed about what’s currently going on with Eclipse IoT.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Drive adoption for our technologies&lt;/strong&gt;: &lt;br /&gt;
We now fetch project information from the &lt;a href=&quot;https://projects.eclipse.org&quot;&gt;Eclipse PMI&lt;/a&gt; each time we push a change to the website. Our stale project page is now a thing of the past!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In an effort to communicate our project plans with our community, we created a public &lt;a href=&quot;https://github.com/EclipseFdn/iot.eclipse.org/projects/3&quot;&gt;GitHub project&lt;/a&gt; with &lt;a href=&quot;https://github.com/EclipseFdn/iot.eclipse.org/milestones&quot;&gt;two milestones&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Being open and transparent allows us to natually inform our communities about our efforts and we think it’s a great way for us to collaborate and share tasks. As the project manager, this workflow allows me to ensure that the project is moving forward as planned.&lt;/p&gt;
&lt;p&gt;We also created a set of &lt;a href=&quot;https://www.eclipse.org/artwork/zip_file_v2/Eclipse-IoT-Brand-Guidelines.pdf&quot;&gt;brand guidelines&lt;/a&gt; for the Eclipse IoT Working Group. These guidelines include the brand font (Roboto), logo variations, color swatches, and acceptable logo treatments. This will help us consistently deploy the brand across different digital and print channels as well as Eclipse IoT events.&lt;/p&gt;
&lt;p&gt;Overall, I am very happy with this new redesign! A huge thank you to &lt;a href=&quot;https://accounts.eclipse.org/users/epoirier&quot;&gt;Eric Poirier&lt;/a&gt;, &lt;a href=&quot;https://accounts.eclipse.org/users/mjoanisse4m4&quot;&gt;Matt Joanisse&lt;/a&gt;, a graphic designer hired by the Foundation to work on the site, &lt;a href=&quot;https://accounts.eclipse.org/users/cwitt&quot;&gt;Christie Witt&lt;/a&gt;, &lt;a href=&quot;https://accounts.eclipse.org/users/jspeedn7e&quot;&gt;Joe Speed&lt;/a&gt;, &lt;a href=&quot;https://accounts.eclipse.org/users/fdesbiens&quot;&gt;Frédéric Desbiens&lt;/a&gt; and &lt;a href=&quot;https://accounts.eclipse.org/users/malowe&quot;&gt;Martin Lowe&lt;/a&gt;!&lt;/p&gt;</description>
	<pubDate>Tue, 24 Mar 2020 14:12:32 +0000</pubDate>
</item>
<item>
	<title>Karsten Thoms: Eclipse Oomph: Suppress Welcome Page</title>
	<guid isPermaLink="false">http://kthoms.wordpress.com/?p=1052</guid>
	<link>https://kthoms.wordpress.com/2020/03/19/eclipse-oomph-suppress-welcome-page/</link>
	<description>&lt;p&gt;I am frequently spawning Eclipse workspaces with Oomph setups and the first action I do when a new workspace is provisioned is to close Eclipse’s welcome page. So I wanted to suppress that for a current project setup. So I started searching where Eclipse stores the preference that disables the intro page. The location of that preference is within the workspace directory at&lt;/p&gt;
&lt;pre&gt;.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.ui.prefs&lt;/pre&gt;
&lt;p&gt;The content of the preference file is&lt;/p&gt;
&lt;pre&gt;eclipse.preferences.version=1
showIntro=false&lt;/pre&gt;
&lt;p&gt;So to make Oomph create the preference file before the workspace is started the first time use a &lt;em&gt;Resource Creation&lt;/em&gt; task and set the &lt;em&gt;Target URL&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;${workspace.location|uri}/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.ui.prefs&lt;/pre&gt;
&lt;p&gt;Then put the above mentioned preference content as &lt;em&gt;Content&lt;/em&gt; value.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-1058&quot; height=&quot;344&quot; src=&quot;https://kthoms.files.wordpress.com/2020/03/oomph_disable_welcome_page.png?w=584&amp;amp;h=344&quot; width=&quot;584&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 19 Mar 2020 16:37:54 +0000</pubDate>
</item>
<item>
	<title>Niko Stotz: MPS’ Quest of the Holy GraalVM of Interpreters</title>
	<guid isPermaLink="false">https://www.nikostotz.de/blog/?p=458</guid>
	<link>https://www.nikostotz.de/blog/mps-quest-of-the-holy-graalvm-of-interpreters/</link>
	<description>&lt;p&gt;A vision how to combine MPS and GraalVM&lt;/p&gt;
&lt;p&gt;Way too long ago, I &lt;a href=&quot;https://www.nikostotz.de/blog/high-performance-interpreters-for-jetbrains-mps/&quot;&gt;prototyped&lt;/a&gt; a way to use &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt; and &lt;a href=&quot;https://github.com/oracle/graal/tree/master/truffle&quot;&gt;Truffle&lt;/a&gt; inside &lt;a href=&quot;https://www.jetbrains.com/mps/&quot;&gt;JetBrains MPS&lt;/a&gt;. I hope to pick up this work soon. In this article, I describe the &lt;em&gt;grand picture&lt;/em&gt; of what might be possible with this combination.&lt;/p&gt;
&lt;h2 id=&quot;_part_i_get_it_working&quot;&gt;Part I: Get it Working&lt;/h2&gt;
&lt;h3 id=&quot;_step_0_teach_annotation_processors_to_mps&quot;&gt;Step 0: Teach Annotation Processors to MPS&lt;/h3&gt;
&lt;p&gt;Truffle uses &lt;a href=&quot;https://docs.oracle.com/en/java/javase/13/docs/api/java.compiler/javax/annotation/processing/Processor.html&quot;&gt;Java Annotation Processors&lt;/a&gt; heavily. Unfortunately, MPS doesn’t support them during its internal Java compilation. The &lt;a href=&quot;https://youtrack.jetbrains.com/issue/MPS-27653&quot;&gt;feature request&lt;/a&gt; doesn’t show any activity.&lt;/p&gt;
&lt;p&gt;So, we have to do it ourselves. A little less time ago, I started with an &lt;a href=&quot;https://github.com/enikao/mps-annotation-processor-facet/tree/intermediate-state&quot;&gt;alternative Java Facet&lt;/a&gt; to include Annotation Processors. I just pushed my work-in-progress state from 2018. As far as I remember, there were no fundamental problems with the approach.&lt;/p&gt;
&lt;h3 id=&quot;_optional_step_1_teach_truffle_structured_sources&quot;&gt;Optional Step 1: Teach Truffle Structured Sources&lt;/h3&gt;
&lt;p&gt;For Truffle, all executed programs stem from a &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/source/Source.html&quot;&gt;&lt;tt&gt;Source&lt;/tt&gt;&lt;/a&gt;. However, this &lt;tt&gt;Source&lt;/tt&gt; can only provide &lt;tt&gt;Byte&lt;/tt&gt;s or &lt;tt&gt;Character&lt;/tt&gt;s. In our case, we want to provide the input model. The prototype just put the &lt;em&gt;Node id&lt;/em&gt; of the input model as a String into the Source; later steps resolved the id against MPS API. This approach works and is acceptable; directly passing the input node as object would be much nicer.&lt;/p&gt;
&lt;h3 id=&quot;_step_2_implement_truffle_annotations_as_mps_language&quot;&gt;Step 2: Implement Truffle Annotations as MPS Language&lt;/h3&gt;
&lt;p&gt;We have to provide all additional hints as Annotations to Truffle. They are complex enough, so we want to leverage MPS’ language features to directly represent all Truffle concepts.&lt;/p&gt;
&lt;p&gt;This might be a simple one-to-one representation of Java Annotations as MPS Concepts, but I’d guess we can add some more semantics and checks. Such feedback within MPS should simplify the next steps: Annotation Processors (and thus, Truffle) have only limited options to report issues back to us.&lt;/p&gt;
&lt;p&gt;We use this MPS language to implement the interpreter for our DSL. This results in a &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/TruffleLanguage.html&quot;&gt;&lt;tt&gt;TruffleLanguage&lt;/tt&gt;&lt;/a&gt; for our DSL.&lt;/p&gt;
&lt;h3 id=&quot;_step_3_start_truffle_within_mps&quot;&gt;Step 3: Start Truffle within MPS&lt;/h3&gt;
&lt;p&gt;At the time when I wrote the proof-of-concept, a &lt;tt&gt;TruffleLanguage&lt;/tt&gt; had to be loaded at JVM startup. To my understanding, Truffle overcame this limitation. I haven’t looked into the current possibilities in detail yet.&lt;/p&gt;
&lt;p&gt;I can imagine two ways to provide our DSL interpreter to the Truffle runtime:&lt;/p&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;Always register &lt;tt&gt;MpsTruffleLanguage1&lt;/tt&gt;, &lt;tt&gt;MpsTruffleLanguage2&lt;/tt&gt;, etc. as placeholders. This would also work at JVM startup. If required, we can register additional placeholders with one JVM restart.&lt;br /&gt;
All &lt;em&gt;non-colliding&lt;/em&gt; DSL interpreters would be &lt;tt&gt;MpsTruffleLanguage1&lt;/tt&gt; from Truffle’s point of view. This works, as we know the MPS language for each input model, and can make sure Truffle uses the right evaluation for the node at hand. We might suffer a performance loss, as Truffle had to manage more evaluations.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;What are non-colliding interpreters? Assume we have a state machine DSL, an expression DSL, and a test DSL. The expression DSL is used within the state machines; we provide an interpreter for both of them.&lt;br /&gt;
We provide two interpreters for the test DSL: One executes the test and checks the assertions, the other one only marks model nodes that are covered by the test.&lt;br /&gt;
The state machine interpreter, the expression interpreter, and the first test interpreter are non-colliding, as they never want to execute on the same model node. All of them go to &lt;tt&gt;MpsTruffleLanguage1&lt;/tt&gt;.&lt;br /&gt;
The second test interpreter &lt;em&gt;does&lt;/em&gt; collide, as it wants to do something with a node also covered by the other interpreters. We put it to &lt;tt&gt;MpsTruffleLanguage2&lt;/tt&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;We register every DSL interpreter as a separate &lt;tt&gt;TruffleLanguage&lt;/tt&gt;. Nice and clean one-to-one relation. In this scenario, we probably had to get &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/interop/InteropLibrary.html&quot;&gt;Truffle Language Interop&lt;/a&gt; right. I have not yet investigated this topic.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;translate-input-model&quot;&gt;Step 4: Translate Input Model to Truffle Nodes&lt;/h3&gt;
&lt;p&gt;A lot of Truffle’s magic stems from its AST representation. Thus, we need to translate our input model (a.k.a. DSL instance, a.k.a. program to execute) from MPS nodes into &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/nodes/Node.html&quot;&gt;Truffle &lt;tt&gt;Node&lt;/tt&gt;s&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ideally, the Truffle AST would dynamically adopt any changes of the input model — like hot code replacement in a debugger, except we don’t want to stop the running program. From Truffle’s point of view this shouldn’t be a problem: It rewrites the AST all the time anyway.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ModelingValueGroup/DclareForMPS&quot;&gt;DclareForMPS&lt;/a&gt; seems a fitting technology. We define mapping rules from MPS node to Truffle &lt;tt&gt;Node&lt;/tt&gt;. Dclare makes sure they are in sync, and input changes are propagated optimally. These rules could either be generic, or be generated from the interpreter definition.&lt;/p&gt;
&lt;p&gt;We need to take care that Dclare doesn’t try to adapt the MPS nodes to Truffle’s optimizing AST changes (no back-propagation).&lt;/p&gt;
&lt;p&gt;We require special handling for edge cases of MPS → Truffle change propagation, e.g. the user deletes the currently executed part of the program.&lt;/p&gt;
&lt;p&gt;For memory optimization, we might translate only the entry nodes of our input model immediately. Instead of the actual child Truffle &lt;tt&gt;Node&lt;/tt&gt;s, we’d add special nodes that translate the next part of the AST.&lt;br /&gt;
Unloading the not required parts might be an issue. Also, on-demand processing seems to conflict with Dclare’s rule-based approach.&lt;/p&gt;
&lt;h2 id=&quot;_part_ii_adapt_to_mps&quot;&gt;Part II: Adapt to MPS&lt;/h2&gt;
&lt;h3 id=&quot;_step_5_re_create_interpreter_language&quot;&gt;Step 5: Re-create Interpreter Language&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;http://mbeddr.com/interpreter/Interpreter.html&quot;&gt;MPS interpreter framework&lt;/a&gt; removes even more boilerplate from writing interpreters than Truffle. The same language concepts should be built again, as abstraction on top of the Truffle Annotation DSL. This would be a new language aspect.&lt;/p&gt;
&lt;h3 id=&quot;migrate-framework&quot;&gt;Step 6: Migrate MPS Interpreter Framework&lt;/h3&gt;
&lt;p&gt;Once we had the Truffle-based interpreter language, we want to use it! Also, we don’t want to rewrite all our nice interpreters.&lt;/p&gt;
&lt;p&gt;I think it’s feasible to automatically migrate at least large parts of the existing MPS interpreter framework to the new language. I would expect some manual adjustment, though. That’s the price we had to pay for two orders of magnitude performance improvement.&lt;/p&gt;
&lt;h3 id=&quot;plumbing&quot;&gt;Step 7: Provide Plumbing for BaseLanguage, Checking Rules, Editors, and Tests&lt;/h3&gt;
&lt;p&gt;Using the interpreter should be as easy as possible. Thus, we have to provide the appropriate utilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call the interpreter from any BaseLanguage code.&lt;br /&gt;
We had to make sure we get language / model loading and dependencies right. This should be easier with Truffle than with the current interpreter, as most language dependencies are only required at interpreter build time.&lt;/li&gt;
&lt;li&gt;Report interpreter results in Checking Rules.&lt;br /&gt;
Creating warnings or errors based on the interpreter’s results is a standard use-case, and should be supported by dedicated language constructs.&lt;/li&gt;
&lt;li&gt;Show interpreter results in an editor.&lt;br /&gt;
As another standard use-case, we might want to show the interpreter’s results (or a derivative) inside an MPS editor. Especially for long-running or asynchronous calculations, getting this right is tricky. Dedicated editor extensions should take care of the details.&lt;/li&gt;
&lt;li&gt;Run tests that involve the interpreter.&lt;br /&gt;
Yet another standard use-case: our DSL defines both calculation rules and examples. We want to assure they are in sync, meaning executing the rules in our DSL interpreter and comparing the results with the examples. This must work both inside MPS, and in a headless build / CI test environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;_step_8_support_asynchronous_interpretation_andor_caching&quot;&gt;Step 8: Support Asynchronous Interpretation and/or Caching&lt;/h3&gt;
&lt;p&gt;The simple implementation of interpreter support accepts a language, parameters, and a program (a.k.a. input model), and blocks until the interpretation is complete.&lt;/p&gt;
&lt;p&gt;This working mode is useful in various situations. However, we might want to run long-running interpretations in the background, and notify a callback once the computation is finished.&lt;/p&gt;
&lt;p&gt;Example: An MPS editor uses an interpreter to color a rule red if it is not in accordance with a provided example. This interpretation result is very useful, even if it takes several seconds to calculate. However, we don’t want to block the editor (or even whole MPS) for that long.&lt;/p&gt;
&lt;p&gt;Extending the example, we might also want to show an error on such a rule. The typesystem runs asynchronously anyways, so blocking is not an issue. However, we now run the same expensive interpretation twice. The interpreter support should provide configurable caching mechanisms to avoid such waste.&lt;/p&gt;
&lt;p&gt;Both asynchronous interpretation and caching benefit from proper &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#plumbing&quot;&gt;language extensions&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;_step_9_integrate_with_mps_typesystem_and_scoping&quot;&gt;Step 9: Integrate with MPS Typesystem and Scoping&lt;/h3&gt;
&lt;p&gt;Truffle needs to know about our DSL’s types, e.g. for resolving overloaded functions or type casting. We already provide this information to the MPS typesystem. I didn’t look into the details yet; I’d expect we could generate at least part of the Truffle input from MPS’ type aspect.&lt;/p&gt;
&lt;p&gt;Truffle requires scoping knowledge to store variables in the right stack frame (and possibly other things I don’t understand yet). I’d expect we could use the resolved references in our model as input to Truffle. I’m less optimistic to re-use MPS’ actual scoping system.&lt;/p&gt;
&lt;p&gt;For both aspects, we can amend the missing information in the Interpreter Language, similar to the existing one.&lt;/p&gt;
&lt;h3 id=&quot;_step_10_support_interpreter_development&quot;&gt;Step 10: Support Interpreter Development&lt;/h3&gt;
&lt;p&gt;As DSL developers, we want to make sure we implemented our interpreter correctly. Thus, we write tests; they are similar to other &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#plumbing&quot;&gt;tests involving the interpreter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, if they fail, we &lt;em&gt;don’t&lt;/em&gt; want to &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#debugger&quot;&gt;debug the program expressed in our DSL&lt;/a&gt;, but our interpreter. For example, we might implement the interpreter for a &lt;tt&gt;switch&lt;/tt&gt;-like construct, and had forgotten to handle an implicit &lt;tt&gt;default&lt;/tt&gt; case.&lt;/p&gt;
&lt;p&gt;Using a regular Java debugger (attached to our running MPS instance) has only limited use, as we had to debug through the highly optimized Truffle code. We cannot use Truffle’s debugging capabilities, as they work on the DSL.&lt;br /&gt;
There might be ways to attach a regular Java debugger running inside MPS in a different thread to its own JVM. Combining the direct debugger access with our knowledge of the interpreter’s structure, we might be able to provide sensible stepping through the interpreter to the DSL developer.&lt;/p&gt;
&lt;p&gt;Simpler ways to support the developers might be providing traces through the interpreter, or ship test support where the DSL developer can assure specific evaluators were (not) executed.&lt;/p&gt;
&lt;h3 id=&quot;_step_11_create_language_for_interop&quot;&gt;Step 11: Create Language for Interop&lt;/h3&gt;
&lt;p&gt;Truffle provides a framework to describe any runtime in-memory data structure as &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/object/Shape.html&quot;&gt;&lt;tt&gt;Shape&lt;/tt&gt;&lt;/a&gt;, and to convert them between languages. This should be a nice extension of MPS’ multi-language support into the runtime space, supported by an appropriate Meta-DSL (a.k.a. language aspect).&lt;/p&gt;
&lt;h2 id=&quot;_part_iii_leverage_programming_language_tooling&quot;&gt;Part III: Leverage Programming Language Tooling&lt;/h2&gt;
&lt;h3 id=&quot;debugger&quot;&gt;Step 12: Connect Truffle to MPS’ Debugger&lt;/h3&gt;
&lt;p&gt;MPS contains the standard interactive debugger inherited from IntelliJ platform.&lt;/p&gt;
&lt;p&gt;Truffle exposes a standard &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/debug/DebuggerSession.html&quot;&gt;interface for interactive debuggers&lt;/a&gt; of the interpreted input. It takes care of the heavy lifting from Truffle AST to MPS input node.&lt;/p&gt;
&lt;p&gt;If we ran Truffle in a different thread than the MPS debugger, we should manage to connect both parts.&lt;/p&gt;
&lt;h3 id=&quot;instrumentation&quot;&gt;Step 13: Integrate Instrumentation&lt;/h3&gt;
&lt;p&gt;Truffle also exposes an &lt;a href=&quot;https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/instrumentation/TruffleInstrument.html&quot;&gt;instrumentation interface&lt;/a&gt;. We could provide standard instrumentation applications like “code” coverage (in our case: DSL node coverage) and tracing out-of-the-box.&lt;/p&gt;
&lt;p&gt;One might think of nice visualizations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Color node background based on coverage&lt;/li&gt;
&lt;li&gt;Mark the currently executed part of the model&lt;/li&gt;
&lt;li&gt;Project runtime values inline&lt;/li&gt;
&lt;li&gt;Show traces in trace explorer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other possible applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Snapshot mechanism for current interpreter state&lt;/li&gt;
&lt;li&gt;Provide traces for offline debugging, and play them back&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;_part_iv_beyond_mps&quot;&gt;Part IV: Beyond MPS&lt;/h2&gt;
&lt;h3 id=&quot;_step_14_serialize_truffle_nodes&quot;&gt;Step 14: Serialize Truffle Nodes&lt;/h3&gt;
&lt;p&gt;If we could serialize Truffle &lt;tt&gt;Node&lt;/tt&gt;s (before any run-time optimization), we would have an MPS-independent representation of the executable DSL. Depending on the serialization format (implement &lt;a href=&quot;https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/io/Serializable.html&quot;&gt;Serializable&lt;/a&gt;, custom binary format, JSON, etc.), we could optimize for use-case, size, loading time, or other priorities.&lt;/p&gt;
&lt;h3 id=&quot;_step_15_execute_dsl_stand_alone_without_generator&quot;&gt;Step 15: Execute DSL stand-alone without Generator&lt;/h3&gt;
&lt;p&gt;Assume an insurance calculation DSL.&lt;br /&gt;
Usually, we would implement&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an interpreter to execute test cases within MPS,&lt;/li&gt;
&lt;li&gt;a Generator to C to execute on the production server,&lt;/li&gt;
&lt;li&gt;and a Generator to Java to provide an preview for the insurance agent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With serialized Truffle &lt;tt&gt;Node&lt;/tt&gt;s, we need only one interpreter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It runs out-of-the-box in MPS,&lt;/li&gt;
&lt;li&gt;Works stand-alone through GraalVM’s &lt;a href=&quot;https://github.com/oracle/graal/tree/master/substratevm&quot;&gt;ahead-of-time compiler Substrate VM&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;and can be used on any JVM using Truffle runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;_part_v_crazy_ideas&quot;&gt;Part V: Crazy Ideas&lt;/h2&gt;
&lt;h3 id=&quot;step-back&quot;&gt;Step 16: Step Back Debugger&lt;/h3&gt;
&lt;p&gt;By combining &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#instrumentation&quot;&gt;Instrumentation&lt;/a&gt; and &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#debugger&quot;&gt;debugger&lt;/a&gt;, it might be feasible to provide step-back debugging.&lt;/p&gt;
&lt;p&gt;In the interpreter, we know the complete global state of the program, and can store deltas (to reduce memory usage). For quite some DSLs, this might be sufficient to store every intermediate state and thus arbitrary debug movement.&lt;/p&gt;
&lt;h3 id=&quot;side-step&quot;&gt;Step 17: Side Step Debugger&lt;/h3&gt;
&lt;p&gt;By &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#step-back&quot;&gt;stepping back&lt;/a&gt; through our execution and following different execution paths, we could explore alternate outcomes. The different execution path might stem from other input values, or &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#translate-input-model&quot;&gt;hot code replacement&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;_step_18_explorative_simulations&quot;&gt;Step 18: Explorative Simulations&lt;/h3&gt;
&lt;p&gt;If we had a &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#side-step&quot;&gt;side step debugger&lt;/a&gt;, nice support to &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#plumbing&quot;&gt;project interpretation results&lt;/a&gt;, and a &lt;a href=&quot;https://www.nikostotz.de/blog/feed/#migrate-framework&quot;&gt;really fast interpreter&lt;/a&gt;, we could run explorative simulations on lots of different executions paths. This might enable &lt;a href=&quot;https://vimeo.com/36579366#t=10m20s&quot;&gt;legendary interactive development&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 11 Mar 2020 23:19:42 +0000</pubDate>
        <enclosure url="https://nikostotz.de/blog/wp-content/uploads/2012/06/favicon-v2-512x512.png" length="2854" type="image/png"/>
</item>
<item>
	<title>Denis Roy: Postmortem - February 7 storage and authentication outage</title>
	<guid isPermaLink="false">6774 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/denis-roy/postmortem-february-7-storage-and-authentication-outage</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;On Friday, February 7 2020, Eclipse.org suffered a severe service disruption to many of its web properties when our primary authentication server and file server suffered a hardware failure.&lt;/p&gt;

&lt;p&gt;For 90 minutes, our main website, &lt;a href=&quot;http://www.eclipse.org&quot;&gt;www.eclipse.org&lt;/a&gt;, was mostly available, as was our Bugzilla bug tracking tool, but logging in was not possible. Wiki, Eclipse Marketplace and other web properties were degraded. Git and Gerrit were both completely offline for 2 hours and 18 minutes. Authenticated access to Jiro -- our Jenkins+Kubernetes-based CI system, was not possible, and builds that relied on Git access failed during that time.&lt;/p&gt;

&lt;p&gt;There was no data loss, but there were data inconsistencies. A dozen Git repositories and Gerrit code changes were in an inconsistent state due to replication schedules, but thanks to the distributed nature of Git, the code commits were still in local developer Git repositories, as well as on the failed server, which we were eventually able to revive (in an offline environment). Data inconsistencies were more severe in our LDAP accounts database, where dozens of users were unable to log in, and in some isolated cases, users reported that their account was reverted back to old data from years prior.&lt;/p&gt;

&lt;p&gt;In hindsight, we feel this outage could have, and should have been avoided. We’ve identified many measures we must enact to prevent such unplanned outages in the future. Furthermore, our communication and incident handling processes proved to be flawed, and will be scrutinized and improved, to ensure our community is better informed during unplanned incidents.&lt;/p&gt;

&lt;p&gt;Lastly, we’ve identified aging hardware and Single Points of Failure (SPoF) that must be addressed.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;strong&gt;File server &amp;amp; authentication setup&lt;/strong&gt;&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;At the center of the Eclipse infra is a pair of servers that handle 2 specific tasks:&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;Network Attached Storage (NAS) via NFS&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;User Authentication via OpenLDAP&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The server pair consists of a primary system, which handles all the traffic, and a hot spare. Both servers are configured identically for production service, but the spare server sits idly and receives data periodically from the primary. This specific architecture was originally implemented in 2005, with periodical hardware upgrades over time.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;strong&gt;Timeline of events&lt;/strong&gt;&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Friday Feb 7 - 12:33pm EST:&lt;/strong&gt; Fred Gurr (Eclipse Foundation IT/Releng team) reports on the Foundation’s internal Slack channel that something is happening to the Infra. Denis observes many “Flaky” status reports on &lt;a href=&quot;https://status.eclipse.org&quot;&gt;https://status.eclipse.org&lt;/a&gt; but is in transit and cannot investigate further. Webmaster Matt Ward investigates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12:43pm: &lt;/strong&gt;Matt confirms that our primary nfs/ldap server is not responding, and activates “Plan A: assess and fix”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12:59pm: &lt;/strong&gt;Denis reaches a computer and activates “Plan B: prepare for Failover” while Matt works on Plan A. The “Sorry, we are down” page is served for all Flaky services except &lt;a href=&quot;http://www.eclipse.org&quot;&gt;www.eclipse.org&lt;/a&gt;, which continues to be served successfully by our nginx cache.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1:18pm: &lt;/strong&gt;The standby server is ready to assume the “primary” role.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1:29pm: &lt;/strong&gt;Matt makes the call for failover, as the severity of the hardware failure is not known, and not easily recoverable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1:49pm: &lt;/strong&gt;&lt;a href=&quot;http://www.eclipse.org&quot;&gt;www.eclipse.org&lt;/a&gt;, Bugzilla, Marketplace, Wiki return to stable service on the new primary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2:18pm: &lt;/strong&gt;Git and Gerrit return to stable service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2:42pm: &lt;/strong&gt;Our Kubernetes/OpenShift cluster is updated to the latest patchlevel and all CI services restarted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4:47pm: &lt;/strong&gt;All legacy JIPP servers are restarted, and all other remaining services report functional.  At this time, we are not aware of any issues.&lt;/p&gt;

&lt;p&gt;During the weekend, Matt continues to monitor the infra. Authentication issues crop up over the weekend, which are caused by duplicated accounts and are fixed by Matt.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monday, 4:49am EST: &lt;/strong&gt;Mikaël Barbero (Eclipse Foundation IT/Releng team) reports that there are more duplicate users in LDAP that cannot log into our systems. This is now a substantial issue. They are fixed systematically with an LDAP duplicate finder, but the process is very slow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10:37am: &lt;/strong&gt;First Foundation broadcast on the cross-project mailing list that there is an issue with authentication.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tuesday, 9:51am: &lt;/strong&gt;Denis blogs about the incident and posts a message to the eclipse.org-committers mailing list about the ongoing authentication issues. The message, however, is held for moderation and is not distributed until many hours later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Later that day: &lt;/strong&gt;Most duplicated accounts have been removed, and just about everything is stabilized. We do not yet understand the source of the duplicates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wednesday: &lt;/strong&gt;duplicate removals continue, as well as investigation into the cause.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thursday 9:52am: &lt;/strong&gt;We file a dozen bugs against projects whose Git and Gerrit repos may be out of sync. Some projects had already re-pushed or rebased their missing code patches and resolved the issue as FIXED.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Friday, 2:58pm: &lt;/strong&gt;All remaining duplicates are removed. Our LDAP database is fully cleaned. The failed server re-enters production as the hot standby - even though its hardware is not reliable. New hardware is sourced and ordered.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;strong&gt;Hardware failure&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The physical servers assuming our NAS/LDAP setup are server-class hardware, 2U chassis with redundant power supplies, ECC (error checking and correction) memory, RAID-5 disk arrays with a battery-backup RAID controller memory. Both primary and standby servers were put into production in 2011.&lt;/p&gt;

&lt;p&gt;On February 7, the primary server experienced a kernel crash from the RAID controller module. The RAID controller detected an unrecoverable ECC memory error. The entire server became unresponsive.&lt;/p&gt;

&lt;p&gt;As originally designed in 2005, periodical (batched) data updates from the primary to the hot spare were simple to set up and maintain. This method also had a distinct advantage over live replication: rapid recovery in case of erasure (accidental or malicious) or data tampering. Of course, this came at a cost of possible data loss. However, it was deemed that critical data (in our case, Source Code) susceptible to loss during the short time was also available on developer workstations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Failover and return to stability&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;As the standby server was prepared for production service, the reasons for the crash on the primary server were investigated. We assessed the possibility of continuing service on the primary; that course of action would have provided the fastest recovery with the fewest surprises later on.&lt;/p&gt;

&lt;p&gt;As the nature of the hardware failure remained unknown, failover was the only option. We confirmed that some data replication tasks had run less than one hour prior to failure, and all data replication was completed no later than 3 hours prior. IP addresses were updated, and one by one, services that depended on NFS and authentication were restarted to flush caches and minimize any potential for an inconsistent state.&lt;/p&gt;

&lt;p&gt;At about 4:30pm, or four hours after the failure, both webmasters were confident that the failover was successful, and that very little dust would settle over the weekend.&lt;br /&gt;
 &lt;/p&gt;

&lt;h1 dir=&quot;ltr&quot;&gt;&lt;strong&gt;Authentication issues&lt;/strong&gt;&lt;/h1&gt;

&lt;p dir=&quot;ltr&quot;&gt;Throughout the weekend, we had a few reports of authentication issues -- which were expected, since we failed over to a standby authentication source that was at least 12 hours behind the primary. These issues were fixed as they were reported, and nothing seemed out of place.&lt;/p&gt;

&lt;p&gt;On Monday morning, Feb 10th, the Foundation’s Releng team reported that several committers had authentication issues to the CI systems. We then suspected that something else was at play with our authentication database, but it was not clear to us what had happened, or what the magnitude was. The common issue was duplicate accounts -- some users had an account in two separate containers simultaneously, which prevented users from being able to authenticate. These duplicates were removed as rapidly as we could, and we wrote scripts to identify old duplicates and purge them -- but with &amp;gt;450,000 accounts, it was time-consuming.&lt;/p&gt;

&lt;p&gt;At that time, we got so wrapped up in trying to understand and resolve the issue that we completely underestimated its impact on the community, and we were absolutely silent about it.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;strong&gt;Problem solved&lt;/strong&gt;&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;On Friday afternoon, February 14, we were able to finally clean up all the duplicate accounts and understand why they existed in the first place.&lt;/p&gt;

&lt;p&gt;Prior to December, 2011, our LDAP database only contained committer accounts. In December 2011, we imported all the non-committer accounts from Bugzilla and Wiki into an LDAP container we named “Community”. This allowed us to centralize authentication around a single source of truth: LDAP.&lt;/p&gt;

&lt;p&gt;All new accounts were, and are created in the Community container, and are moved into the Committer container if/when they became an Eclipse Committer.&lt;/p&gt;

&lt;p&gt;Our primary-&amp;gt;secondary LDAP sync mechanism was altered, at that time, to sync the Community container as well -- but it was purely additive. Once you had an account in Community, it was there for life on the standby server, even if you became a committer later on. Or if you’d ever change your email address. This was the source of the duplicate accounts on the standby server.&lt;/p&gt;

&lt;p&gt;A new server pair has been ordered on February 14, 2020 . These servers will be put into production service as soon as possible, and the old hardware will be recommissioned to clustered service. With these new machines, we believe our existing architecture and configuration can continue to serve us well over the coming months and years.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;&lt;strong&gt;Take-aways and proposed improvements&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Although the outage didn’t last incredibly long (2 hours from failure to the beginning of restored service), we feel it shouldn’t have occurred in the first place. Furthermore, we’ve identified key areas where our processes can be improved - notably, in how we communicate with you.&lt;/p&gt;

&lt;p&gt;Here are the action items we’re committed to implementing in the near term, to improve our handling of such incidents:&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Communication: &lt;/strong&gt;Improved Service Status page.  &lt;a href=&quot;https://status.eclipse.org&quot;&gt;https://status.eclipse.org&lt;/a&gt; gives a picture of what’s going on, but with an improved service, we can communicate the nature of outages, the impact, and estimated time until service is restored.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Communication: &lt;/strong&gt;Internally, we will improve communication within our team and establish a maintenance log, whereby members of the team can discover the work that has been done.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Staffing: &lt;/strong&gt;we will explore the possibility of an additional IT hire, thus enhancing our collective skillset, and enabling more overall time on the quality and reliability of the infra.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Aging Hardware: &lt;/strong&gt;we will put top-priority on resolving aging SPoF, and be more strict about not running hardware devices past their reasonable life expectancy.&lt;/p&gt;

	&lt;ul&gt;
		&lt;li dir=&quot;ltr&quot;&gt;
		&lt;p dir=&quot;ltr&quot;&gt;In the longer term, we will continue our investment in replacing SPoF with more robust technologies. This applies to authentication, storage, databases and networking.&lt;/p&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Process and procedures: &lt;/strong&gt;we will allocate more time to testing our disaster recovery and business continuity procedures. Such tests would likely have revealed the LDAP sync bug.&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We believe that these steps will significantly reduce unplanned outages such as the one that occured on February 7. They will also help us ensure that, should a failure occur, we recover and return to a state of stability more rapidly. Finally, they will help you understand what is happening, and what the timelines to restore service are, so that you can plan your work tasks and remain productive.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 20 Feb 2020 16:12:00 +0000</pubDate>
</item>
<item>
	<title>Denis Roy: Anatomy of a server failure</title>
	<guid isPermaLink="false">6770 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/denis-roy/anatomy-server-failure</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Last Friday, Feb 7 at around 12:30pm (Ottawa time), I received a notification from &lt;a href=&quot;https://www.eclipse.org/org/foundation/staff.php&quot;&gt;Fred Gurr&lt;/a&gt; (part of our release engineering team) that something was going on with the infra. The multitude of colours on the &lt;a href=&quot;https://status.eclipse.org/&quot;&gt;Eclipse Service Status&lt;/a&gt; page confirmed it -- many of our services and tools were either slow, or unresponsive.&lt;/p&gt;

&lt;p&gt;After some initial digging, we discovered that the primary backend file server (housing Git, Gerrit, web session data, and a lot of files for our various web properties) was not responding. It was also host to our accounts database -- the center for all user authentication.&lt;/p&gt;

&lt;h3&gt;Jumping into action&lt;/h3&gt;

&lt;p&gt;It's a well-rehearsed routine for colleage Matt Ward and I -- he worked on assessing the problem and identifying the fix, while I worked on Plan B - failover to our hot standby. At around 1:35pm, roughly 1 hour into the outage, Matt made the call -- failover is the only option, as a  hardware component has failed. 20 minutes later, most services had either recovered or were well on their way.&lt;/p&gt;

&lt;p&gt;But the failover is not perfect. Data is sync'ed every 2 hours. Account and authentication info is replicated nightly. This was a by-design strategy decision, as it offers us a recovery window in case of data erasure, corruption or unauthenticated access.&lt;/p&gt;

&lt;h3&gt;Lessons learned&lt;/h3&gt;

&lt;p&gt;The failed server was put in service in 2011, celebrating its *gasp* ninth year of 24/7 service. That is a few years too many, and although it (and its standby counterpart) were slated for replacement in 2017, the effort was pushed back to make room for competing priorities. In a moment of bitter irony, the failed hardware was planned to be replaced in the second quarter of this year -- mere months away. We gambled with the house, we lost.&lt;/p&gt;

&lt;h3&gt;Cleaning up&lt;/h3&gt;

&lt;p&gt;Today, there is much dust to settle. Our authentication database has some gremlins that we need to fix, and there could be a few missing commits that were not replicated.&lt;/p&gt;

&lt;p&gt;We also need to source replacement hardware for the failed component, so that we can re-enable our hot standby. At the same time, we need to immediately source replacement servers for those 2011 dinosaurs. They've served us well, but their retirement is long overdue.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 11 Feb 2020 14:51:32 +0000</pubDate>
</item>
<item>
	<title>Stephan Herrmann: Interfacing null-safe code with legacy code</title>
	<guid isPermaLink="false">http://objectteams.wordpress.com/?p=685</guid>
	<link>https://objectteams.wordpress.com/2020/02/06/interfacing-null-safe-code-with-legacy-code/</link>
	<description>&lt;p&gt;When you adopt null annotations like &lt;a href=&quot;https://help.eclipse.org/2019-12/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/annotation/package-summary.html?cp=3_1_0_9&quot;&gt;these&lt;/a&gt;, your ultimate hope is that the compiler will tell you about &lt;em&gt;every&lt;/em&gt; possible NullPointerException (NPE) in your program (except for tricks like reflection or bytecode weaving etc.). Hallelujah.&lt;/p&gt;
&lt;p&gt;Unfortunately, most of us use libraries which don’t have the blessing of &lt;a href=&quot;https://help.eclipse.org/2019-12/topic/org.eclipse.jdt.doc.user/tasks/task-using_null_type_annotations.htm?cp=1_3_9_1&quot;&gt;annotation based null analysis&lt;/a&gt;, simply because those are not annotated appropriately (neither in source nor using &lt;a href=&quot;https://help.eclipse.org/2019-12/topic/org.eclipse.jdt.doc.user/tasks/task-using_external_null_annotations.htm?cp=1_3_9_2&quot;&gt;external annotations&lt;/a&gt;). Let’s for now call such code: &lt;strong&gt;“legacy”&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this post I will walk through the options to warn you about the risks incurred by legacy code. The general theme will be:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Can we assert that no NPE will happen &lt;strong&gt;in null-checked code&lt;/strong&gt;?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I.e., if your code consistently uses null annotations, and has passed analysis without warnings, can we be sure that NPEs can only ever be thrown in the legacy part of the code?&lt;em&gt; (NPEs inside legacy code are still to be expected, there’s nothing we can change about that)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Using existing Eclipse versions, one category of problems would still go undetected whereby null-checked code could still throw NPE. &lt;strong&gt;This has been &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=482242&quot;&gt;recently fixed &lt;img alt=&quot;bug&quot; class=&quot;alignnone size-full wp-image-691&quot; src=&quot;https://objectteams.files.wordpress.com/2020/02/bug.png?w=700&quot; /&gt;&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Simple data flows&lt;/h2&gt;
&lt;p&gt;Let’s start with simple data flows, e.g., when your program obtains a value from legacy code, like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;NullFrom_getProperty&quot; class=&quot;alignnone size-full wp-image-690&quot; src=&quot;https://objectteams.files.wordpress.com/2020/02/nullfrom_getproperty.png?w=700&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You shouldn’t be surprised, the javadoc even says: “&lt;em&gt;The method returns &lt;code&gt;null&lt;/code&gt; if the property is not found.&lt;/em&gt;” While the compiler doesn’t read javadoc, it can recognize that a value with unspecified nullness flows into a variable with a non-null type. Hence the warning:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Null type safety (type annotations): The expression of type ‘String’ needs unchecked conversion to conform to ‘@NonNull String’&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As we can see, the compiler warned us, so we are urged to fix the problem in our code. Conversely, if we pass any value &lt;em&gt;into&lt;/em&gt; a legacy API, all bad that can happen would happen inside legacy code, so nothing to be done for our mentioned goal.&lt;/p&gt;
&lt;p&gt;The underlying rule is: legacy values can be safely &lt;strong&gt;assigned&lt;/strong&gt; to nullable variables, but not to non-null variables (example &lt;code&gt;Properties.getProperty()&lt;/code&gt;). On the other hand, &lt;em&gt;any value&lt;/em&gt; can be assigned to a legacy variable (or method argument).&lt;/p&gt;
&lt;p&gt;Put differently: values flowing from null-checked to legacy pose no problems, whereas values flowing the opposite direction must be assumed to be nullable, to avoid problems in null-checked code.&lt;/p&gt;
&lt;h2&gt;Enter generics&lt;/h2&gt;
&lt;p&gt;Here be dragons.&lt;/p&gt;
&lt;p&gt;As a minimum requirement we now need &lt;a href=&quot;https://help.eclipse.org/2019-12/topic/org.eclipse.jdt.doc.user/tasks/task-using_null_type_annotations.htm?cp=1_3_9_1&quot;&gt;null annotations with target TYPE_USE&lt;/a&gt; (“type annotations”), but we have this since 2014. Good.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;NullFromLegacyList&quot; class=&quot;alignnone size-full wp-image-692&quot; src=&quot;https://objectteams.files.wordpress.com/2020/02/nullfromlegacylist.png?w=700&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here we obtain a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; value from a &lt;code&gt;Legacy&lt;/code&gt; class, where indeed the list &lt;code&gt;names&lt;/code&gt; is non-null (as can be seen by successful output from &lt;code&gt;names.size()&lt;/code&gt;). Still things are going south in our code, because the list contained an unexpected &lt;code&gt;null&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;To protect us from this problem, I marked the entire class as &lt;code&gt;@NonNullByDefault&lt;/code&gt;, which causes the type of the variable &lt;code&gt;names&lt;/code&gt; to become &lt;code&gt;List&amp;lt;@NonNull String&amp;gt;&lt;/code&gt;. Now the compiler can again warn us about an unsafe assignment:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Null type safety (type annotations): The expression of type ‘List&amp;lt;String&amp;gt;’ needs unchecked conversion to conform to ‘List&amp;lt;@NonNull String&amp;gt;’&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This captures the situation, where a null value is passed from legacy to null-checked code, which is wrapped in a non-null container value (the list).&lt;/p&gt;
&lt;p&gt;Here’s a tricky question:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Is it safe to pass a null-checked value of a parameterized type into legacy code?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the case of simple values, we saw no problem, but the following example tells us otherwise once generics are involved:&lt;br /&gt;
&lt;img alt=&quot;NullIntoNonNullList&quot; class=&quot;alignnone size-full wp-image-693&quot; src=&quot;https://objectteams.files.wordpress.com/2020/02/nullintononnulllist.png?w=700&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Again we have a list of type &lt;code&gt;List&amp;lt;@NonNull String&amp;gt;&lt;/code&gt;, so dereferencing values obtained from that list should never throw NPE. Unfortunately, the legacy method &lt;code&gt;printNames()&lt;/code&gt; succeeded to break our contract by inserting &lt;code&gt;null&lt;/code&gt; into the list, resulting in yet another NPE thrown in null-checked code.&lt;/p&gt;
&lt;p&gt;To describe this situation it helps to draw boundaries not only between null-checked and legacy &lt;em&gt;code&lt;/em&gt;, but also to draw a boundary around the null-checked &lt;em&gt;value&lt;/em&gt; of parameterized type &lt;code&gt;List&amp;lt;@NonNull String&amp;gt;&lt;/code&gt;. That boundary is breached when we pass this value into legacy code, because that code will only see &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; and happily invoke &lt;code&gt;add(null)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is were I &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=482242&quot;&gt;recently&lt;/a&gt; invented a new diagnostic message:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Unsafe null type conversion (type annotations): The value of type ‘List&amp;lt;@NonNull String&amp;gt;’ is made accessible using the less-annotated type ‘List&amp;lt;String&amp;gt;’&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;By passing &lt;code&gt;names&lt;/code&gt; into legacy code, we enable a &lt;em&gt;hidden&lt;/em&gt; data flow in the opposite direction. In the general case, this introduces the risk of NPE in otherwise null-checked code. Always?&lt;/p&gt;
&lt;h2&gt;Wildcards&lt;/h2&gt;
&lt;p&gt;Java would be a much simpler language without wildcards, but a closer look reveals that wildcards actually don’t only help for type safety but also for null-safety. How so?&lt;/p&gt;
&lt;p&gt;If the legacy method were written using a wildcard, it would not be (easily) possible to sneak in a &lt;code&gt;null&lt;/code&gt; value, here are two attempts:&lt;br /&gt;
&lt;img alt=&quot;SneakAttempts&quot; class=&quot;alignnone size-full wp-image-697&quot; src=&quot;https://objectteams.files.wordpress.com/2020/02/sneakattempts-1.png?w=700&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The first attempt is an outright Java type error. The second triggers a warning from Eclipse, despite the lack of null annotations:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Null type mismatch (type annotations): ‘null’ is not compatible to the free type variable ‘?’&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Of course, compiling the legacy class without null-checking would still bypass our detection, but chances are already better.&lt;/p&gt;
&lt;p&gt;If we add an &lt;em&gt;upper bound&lt;/em&gt; to the wildcard, like in &lt;code&gt;List&amp;lt;? extends CharSequence&amp;gt;&lt;/code&gt;, not much is changed. A &lt;em&gt;lower bound&lt;/em&gt;, however, is an invitation for the legacy code to insert &lt;code&gt;null&lt;/code&gt; at whim: &lt;code&gt;List&amp;lt;? super String&amp;gt;&lt;/code&gt; will cause &lt;code&gt;names.add()&lt;/code&gt; to accept any String, including the &lt;code&gt;null&lt;/code&gt; value. That’s why Eclipse will also complain against lower bounded wildcards:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Unsafe null type conversion (type annotations): The value of type ‘List&amp;lt;@NonNull String&amp;gt;’ is made accessible using the less-annotated type ‘List&amp;lt;? super String&amp;gt;’&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;Comparing to raw types&lt;/h2&gt;
&lt;p&gt;It has been suggested to treat legacy (not null-annotated) types like raw types. Both are types with a part of the contract ignored, thereby causing risks for parts of the program that still rely on the contract.&lt;/p&gt;
&lt;p&gt;Interestingly, raw types are more permissive in the parameterized-to-raw conversion. We are generally not protected against legacy code inserting an &lt;code&gt;Integer&lt;/code&gt; into a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; when passed as a raw &lt;code&gt;List&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;More interestingly, using a raw type as a type argument produces an outright Java type error, so my final attempt at hacking the type system failed:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;RawTypeArgument&quot; class=&quot;alignnone size-full wp-image-698&quot; src=&quot;https://objectteams.files.wordpress.com/2020/02/rawtypeargument-1.png?w=700&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have seen several kinds of data flow with different risks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple values flowing &lt;em&gt;checked-to-legacy&lt;/em&gt; don’t cause any specific headache&lt;/li&gt;
&lt;li&gt;Simple values flowing &lt;em&gt;legacy-to-checked&lt;/em&gt; should be treated as nullable to avoid bad surprises. This is checked.&lt;/li&gt;
&lt;li&gt;Values of parameterized type flowing &lt;em&gt;legacy-to-checked&lt;/em&gt; must be handled with care at the receiving side. This is checked.&lt;/li&gt;
&lt;li&gt;Values of parameterized type flowing &lt;em&gt;checked-to-legacy&lt;/em&gt; add more risks, depending on:
&lt;ul&gt;
&lt;li&gt;nullness of the type argument (&lt;code&gt;@Nullable&lt;/code&gt; type argument has no risk)&lt;/li&gt;
&lt;li&gt;presence of wildcards, unbounded or lower-bounded.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eclipse can detect all mentioned situations that would cause NPE to be thrown from null-checked code – the capstone to be released with Eclipse 2020-03, i.e., coming soon …&lt;/p&gt;</description>
	<pubDate>Thu, 06 Feb 2020 19:38:50 +0000</pubDate>
</item>
<item>
	<title>Mat Booth: Eclipse and Handling Content Types on Linux</title>
	<guid isPermaLink="false">tag:blog.matbooth.co.uk,2020-02-06:/13-eclipse-handling-content-types.html/</guid>
	<link>http://blog.matbooth.co.uk/13-eclipse-handling-content-types.html</link>
	<description>&lt;p&gt;Getting deep desktop integration on Linux.&lt;/p&gt;</description>
	<pubDate>Thu, 06 Feb 2020 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Jeremie Bresson: JDT without Eclipse</title>
	<guid isPermaLink="false">blog/2020/2020-01-17_jdt-without-eclipse.html</guid>
	<link>http://jmini.github.io/blog/2020/2020-01-17_jdt-without-eclipse.html</link>
	<description>&lt;div id=&quot;preamble&quot;&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The &lt;a href=&quot;https://www.eclipse.org/jdt/&quot;&gt;JDT&lt;/a&gt; (Java Development Tools) is an important part of Eclipse IDE but it can also be used without Eclipse.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;For example the Spring Tools 4, which is nowadays a cross-platform tool (Visual Studio Code, Eclipse IDE, …), is highly using the JDT behind the scene. If you would like to know more, I recommend you this podcast episode: &lt;a href=&quot;https://soundcloud.com/a-bootiful-podcast/spring-tools-lead-martin-lippert&quot;&gt;Spring Tools lead Martin Lippert&lt;/a&gt;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;A second known example is the Java Formatter that is also part of the JDT. Since a long time there are maven and gradle plugins that performs the same formatting as Eclipse IDE but as part of the build (often with the possibly to break the build when the code is wrongly formatted).&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Reusing the JDT has been made easier since 2017 when it was decided to publish each release and its dependencies on maven central (with following &lt;code&gt;groupId&lt;/code&gt;: &lt;code&gt;org.eclipse.jdt&lt;/code&gt;, &lt;code&gt;org.eclipse.platform&lt;/code&gt;). Stephan Herrmann did a lot of work to achieve this goal. I blogged about this: &lt;a href=&quot;https://jmini.github.io/blog/2017/2017-01-10_use-eclipse-jdt-in-java-app.html&quot;&gt;Use the Eclipse Java Development Tools in a Java SE application&lt;/a&gt; and I have pushed a simple example the Java Formatter is used in a simple &lt;code&gt;main(String[])&lt;/code&gt; method built by a classic minimal Maven project: &lt;a href=&quot;https://github.com/jmini/jdt-experiments/tree/master/java-formatter&quot;&gt;java-formatter&lt;/a&gt;.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect1&quot;&gt; 
 &lt;h2 id=&quot;workspace_or_not&quot;&gt;Workspace or not?&lt;/h2&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;When using the JDT in an headless application, two cases needs to be distinguished:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;olist arabic&quot;&gt; 
   &lt;ol class=&quot;arabic&quot;&gt; 
    &lt;li&gt; &lt;p&gt;Some features (the parser, the formatter…) can be used in a simple Java main method.&lt;/p&gt; &lt;/li&gt; 
    &lt;li&gt; &lt;p&gt;Other features (search index, AST rewriter…) require a workspace. This imply that the code run inside an OSGi runtime.&lt;/p&gt; &lt;/li&gt; 
   &lt;/ol&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;To illustrate this aspect, I took some of the examples provided by the site &lt;code&gt;www.programcreek.com&lt;/code&gt; in the blog post series &lt;a href=&quot;https://www.programcreek.com/2011/01/best-java-development-tooling-jdt-and-astparser-tutorials/&quot;&gt;Eclipse JDT Tutorials&lt;/a&gt; and I adapted them so that each code snippet can be executed inside a JUnit test. This is the &lt;a href=&quot;https://jmini.github.io/jdt-experiments/#programcreek-examples&quot;&gt;Programcreek examples&lt;/a&gt; project.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;I have split the unit-tests into two projects:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;ulist&quot;&gt; 
   &lt;ul&gt; 
    &lt;li&gt; &lt;p&gt;&lt;code&gt;programcreek-standalone&lt;/code&gt; for the one that do not require OSGi. The maven project is really simple (using the default convention everywhere)&lt;/p&gt; &lt;/li&gt; 
    &lt;li&gt; &lt;p&gt;&lt;code&gt;programcreek-osgi&lt;/code&gt; for the one that must run inside an OSGi runtime. The &lt;a href=&quot;https://github.com/bndtools/bnd/tree/master/maven/bnd-maven-plugin&quot;&gt;bnd maven plugins&lt;/a&gt; are configured in the &lt;code&gt;pom.xml&lt;/code&gt; to take care of the OSGi stuff.&lt;/p&gt; &lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;If you run the test with Maven, it will work out-of-the box.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;If you would like to run them inside an IDE, you should use one that starts OSGi when executing the tests (in the same way the maven build is doing it). To get a bnd aware IDE, you can use &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2019-12/r/eclipse-ide-java-developers&quot;&gt;Eclipse IDE for Java Developers&lt;/a&gt; with the additional plugin &lt;a href=&quot;https://bndtools.org/&quot;&gt;Bndtools&lt;/a&gt; installed, but there are other possibilities.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Source code can be found on GitHub: &lt;a href=&quot;https://github.com/jmini/jdt-experiments/tree/master/programcreek-examples&quot;&gt;programcreek-examples&lt;/a&gt;&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</description>
	<pubDate>Thu, 16 Jan 2020 23:00:00 +0000</pubDate>
</item>
<item>
	<title>Stephan Herrmann: Oracle made me a Stackoverflow Guru</title>
	<guid isPermaLink="false">http://objectteams.wordpress.com/?p=677</guid>
	<link>https://objectteams.wordpress.com/2020/01/16/oracle-made-me-a-stackoverflow-guru/</link>
	<description>&lt;p&gt;Just today Oracle helped me to become a “&lt;a href=&quot;https://stackoverflow.com/help/badges/18/guru&quot;&gt;Guru&lt;/a&gt;” on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;Stackoverflow&lt;/a&gt;! How did they do it? By doing nothing.&lt;/p&gt;
&lt;p&gt;In former times, I was periodically enraged, when Oracle didn’t pay attention to the feedback I was giving them during my work on ecj (the Eclipse Compiler for Java) – &lt;em&gt;at least not the attention that I had hoped for&lt;/em&gt; (to be fair: there was a lot of good communication, too). At those times I had still hoped I could help make Java a language that is completely and unambiguously defined by specifications. Meanwhile I recognized that Java is at least three languages: the language defined by &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se13/html/index.html&quot;&gt;JLS&lt;/a&gt; etc., the language implemented by javac, and the language implemented by ecj (and no chance to make ecj to conform to both others). I realized that &lt;a href=&quot;https://objectteams.wordpress.com/2017/04/02/several-languages-java-8/&quot;&gt;we were not done with Java 8&lt;/a&gt; even 3 years after its release. Three more years later it’s still much the same.&lt;/p&gt;
&lt;p&gt;So let’s move on, haven’t things improved in subsequent versions of Java? One of the key new rules in Java 9 is, that&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“If [a qualified package name] does not name a package that is uniquely visible to the current module (&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se13/html/jls-7.html#jls-7.4.3&quot;&gt;§7.4.3&lt;/a&gt;), then a compile-time error occurs”.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Simple and unambiguous. That’s what compilers have to check.&lt;/p&gt;
&lt;p&gt;Except: javac doesn’t check for uniqueness if one of the modules involved is the “unnamed module”.&lt;/p&gt;
&lt;p&gt;In 2018 there was some confusion about this, and during &lt;a href=&quot;https://stackoverflow.com/questions/51094274/eclipse-cant-find-xml-related-classes-after-switching-build-path-to-jdk-10&quot;&gt;discussion on stackoverflow&lt;/a&gt; I raised this &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/jigsaw-dev/2018-December/014076.html&quot;&gt;issue to the jigsaw-dev mailing list&lt;/a&gt;. A &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8215739&quot;&gt;bug was raised against javac&lt;/a&gt;, &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/jigsaw-dev/2018-December/014077.html&quot;&gt;confirmed to be a bug by spec lead Alex Buckley&lt;/a&gt;. I summarized the situation in &lt;a href=&quot;https://stackoverflow.com/questions/51094274/eclipse-cant-find-xml-related-classes-after-switching-build-path-to-jdk-10/53824670#53824670&quot;&gt;my answer on stackoverflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This bug could have been easily fixed in javac version 12, but wasn’t. Meanwhile upvotes on my answer on stackoverflow started coming in. The same for Java 13. The same for Java 14. And yet no visible activity on the javac bug. You need ecj to find if your program violates this rule of JLS.&lt;/p&gt;
&lt;p&gt;Today the 40th upvote earned me the “Guru” tag on stackoverflow.&lt;/p&gt;
&lt;p&gt;So, please Oracle, keep that bug unresolved, it will earn me a lot of reputation for a bright future – by doing: nothing &lt;img alt=&quot;ðŸ™‚&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 16 Jan 2020 18:40:45 +0000</pubDate>
</item>
<item>
	<title>Jeremie Bresson: Building and running Equinox with maven without Tycho</title>
	<guid isPermaLink="false">blog/2020/2020-01-13_equinox-without-tycho.html</guid>
	<link>http://jmini.github.io/blog/2020/2020-01-13_equinox-without-tycho.html</link>
	<description>&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Eclipse Tycho is a great way to let maven build PDE based projects. But the Plug-in Development Environment (PDE) model is not the only way to work with OSGi.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;In particular, since 2 or 3 years the Eclipse Platform jars (including the Equinox jars) are regularly published on Maven Central (check the artifacts having &lt;code&gt;org.eclipse.platform&lt;/code&gt; as &lt;code&gt;groupId&lt;/code&gt;).&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;I was looking for an alternative to P2 and to the target-platform mechanism.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;bnd and bndtools logo&quot; src=&quot;http://jmini.github.io/blog/2020/2020-01-13_bnd-bndtools.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Bnd and Bndtools are always mentioned as potential alternative to PDE (I attended several talks discussing this at EclipseCon 2018: &lt;a href=&quot;https://www.eclipsecon.org/europe2018/sessions/migrating-pde-bndtools-practice&quot;&gt;Migrating from PDE to Bndtools in Practice&lt;/a&gt;, &lt;a href=&quot;https://www.eclipsecon.org/europe2018/sessions/zero-professional-osgi-project-minutes&quot;&gt;From Zero to a Professional OSGi Project in Minutes&lt;/a&gt;). So I decided to explore this path.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;This StackOverflow question catches my attention: &lt;a href=&quot;https://stackoverflow.com/questions/52776222/how-to-start-with-osgi&quot;&gt;How to start with OSGi&lt;/a&gt;. I had a close look at the answer provided by Peter Kriens (the founder of the Bnd and Bndtools projects), where he discusses the different possible setup:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;ulist&quot;&gt; 
 &lt;ul&gt; 
  &lt;li&gt; &lt;p&gt;Maven Only&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Gradle Only&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Eclipse, M2E, Maven, and Bndtools&lt;/p&gt; &lt;/li&gt; 
  &lt;li&gt; &lt;p&gt;Eclipse, Bndtools, Gradle&lt;/p&gt; &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Even in the &quot;Maven Only&quot; or &quot;Gradle Only&quot; setups, the proposed solution relies on plugins using bnd under the hood.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;How to start?&quot; src=&quot;http://jmini.github.io/blog/2020/2020-01-13_how-to-start.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;My project is quite simple, the dependencies are already on maven central. I will not have a complex use-case with multiple versions of the same library or with platform dependent artifacts. So fetching the dependencies with maven is sufficient.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;I decided to try the &quot;Maven Only&quot; model.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;How to start?&quot; src=&quot;http://jmini.github.io/blog/2020/2020-01-13_effective-osgi-logo.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;I was not sure to understand how to use the different &lt;a href=&quot;https://github.com/bndtools/bnd/tree/master/maven/bnd-maven-plugin&quot;&gt;bnd maven plugins&lt;/a&gt;: &lt;code&gt;bnd-maven-plugin&lt;/code&gt;, &lt;code&gt;bnd-indexer-maven-plugin&lt;/code&gt;, &lt;code&gt;bnd-testing-maven-plugin&lt;/code&gt;, &lt;code&gt;bnd-export-maven-plugin&lt;/code&gt; …&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Luckily I found the slides of the &lt;a href=&quot;https://www.slideshare.net/mfrancis/bndtools-and-maven-a-brave-new-world-n-bartlett-t-ward&quot;&gt;Bndtools and Maven: A Brave New World&lt;/a&gt; workshop (given at EclipseCon 2017) and the corresponding git repository: &lt;a href=&quot;https://github.com/paremus/osgi-community-event2017&quot;&gt;osgi-community-event2017&lt;/a&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;The corresponding &lt;a href=&quot;https://github.com/effectiveosgi/maven-archetypes&quot;&gt;effective-osgi maven archetypes&lt;/a&gt; used during the workshop are still working well. I could follow the step-by-step guide (in the readme of the maven archetypes project). I got everything working as described and I could find enough explanations about the generated projects. I think I understood what I did and this is very important when you start.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;After some cleanup and a switch from Apache Felix to Eclipse Equinox, I got my running setup and I answered my question: &quot;&lt;em&gt;How to start with OSGi without PDE and Tycho&lt;/em&gt;&quot;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;The corresponding code is in this folder: &lt;a href=&quot;https://github.com/jmini/bnd-experiments/tree/master/effectiveosgi-example&quot;&gt;effectiveosgi-example&lt;/a&gt;.&lt;/p&gt; 
&lt;/div&gt;</description>
	<pubDate>Sun, 12 Jan 2020 23:00:00 +0000</pubDate>
</item>
<item>
	<title>Chris Aniszczyk: 4 Years at The Linux Foundation</title>
	<guid isPermaLink="false">https://www.aniszczyk.org/?p=4328</guid>
	<link>https://www.aniszczyk.org/2020/01/03/4-years-at-the-linux-foundation/</link>
	<description>&lt;p&gt;Late last year marked the 4th year anniversary of the formation of the &lt;a href=&quot;https://www.cncf.io/&quot;&gt;CNCF&lt;/a&gt; and me joining The Linux Foundation:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;… this also marks 4+ years since I joined the &lt;a href=&quot;https://twitter.com/linuxfoundation?ref_src=twsrc%5Etfw&quot;&gt;@linuxfoundation&lt;/a&gt;, after experiencing crazy startup growth/success at Twitter, I was looking for something more NOT startup… was somewhat suckered in by &lt;a href=&quot;https://twitter.com/jzemlin?ref_src=twsrc%5Etfw&quot;&gt;@jzemlin&lt;/a&gt; to join a &quot;chill, totally not like a startup&quot; nonprofit… &lt;a href=&quot;https://t.co/S3f5jmyqoT&quot;&gt;pic.twitter.com/S3f5jmyqoT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Chris Aniszczyk (@cra) &lt;a href=&quot;https://twitter.com/cra/status/1205147194673762304?ref_src=twsrc%5Etfw&quot;&gt;December 12, 2019&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;As we enter 2020, it’s amusing for me to reflect on my decision to join The Linux Foundation a little over 4 years ago when I was looking for something new to focus on. I spent about 5 years at Twitter which felt like an eternity (the average tenure for a silicon valley employee is &lt;a href=&quot;https://workology.com/ep-31-employee-tenure-of-silicon-valleys-hottest-tech-companies/&quot;&gt;under 2 years&lt;/a&gt;), focused on open source and enjoyed the startup life of going from a hundred or so engineers to a couple of thousand. I truly enjoyed the ride, it was a high impact experience where we were able to open source projects that changed the industry for the better: &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; (changed front end development for the better), &lt;a href=&quot;https://twemoji.twitter.com/&quot;&gt;Twemoji&lt;/a&gt; (made emojis more open source friendly and embeddable), &lt;a href=&quot;http://mesos.apache.org/&quot;&gt;Mesos&lt;/a&gt; (pushed the state of art for open source infrastructure), co-founded &lt;a href=&quot;https://todogroup.org&quot;&gt;TODO Group&lt;/a&gt; (pushed the state of corporate open source programs forward) and more!&lt;/p&gt;
&lt;p&gt;When I was looking for change, I wanted to find an opportunity that could impact more than I could just do at one company. I had some offers from FAANG companies and amazing startups but eventually settled on the nonprofit Linux Foundation because I wanted to build an open source foundation from scratch, teach other companies about open source best practices and assumed non profit life would be a bit more relaxing than diving into a new company (&lt;strong&gt;I was wrong)&lt;/strong&gt;. Also, I was throughly &lt;span style=&quot;font-size: inherit;&quot;&gt;convinced that an openly governed foundation pushing Kubernetes, container specifications and adjacent independent cloud native technologies would be the right model to move open infrastructure forward.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As we enter 2020, I realize that I’ve been with one organization for a long time and that puts me on edge as I enjoy challenges, chaos and dread anything that makes me comfortable or complacent. Also, I have a strong desire to focus on efforts that involve improving the state of security and privacy in a connected world, participatory democracy, climate change; also anything that pushes open source to new industries and geographies.&lt;/p&gt;
&lt;p&gt;While I’m always happy to entertain opportunities that align to my goals, the one thing that I do enjoy at the LF is that I’ve had the ability to build a variety of new open source foundations improving industries and communities: &lt;a href=&quot;https://cd.foundation/&quot;&gt;CDF&lt;/a&gt;, &lt;a href=&quot;https://foundation.graphql.org&quot;&gt;GraphQL Foundation&lt;/a&gt;, &lt;a href=&quot;https://www.opencontainers.org/&quot;&gt;Open Container Initiative&lt;/a&gt; (OCI), &lt;a href=&quot;https://prestodb.io&quot;&gt;Presto Foundation&lt;/a&gt;, &lt;a href=&quot;https://todogroup.org&quot;&gt;TODO Group&lt;/a&gt;, &lt;a href=&quot;https://uc.foundation&quot;&gt;Urban Computing Foundation&lt;/a&gt; and more.&lt;/p&gt;
&lt;p&gt;Anyways, thanks for reading and I look forward to another year of bringing open source practices to new industries and places, the world is better when we are collaborating openly.&lt;/p&gt;</description>
	<pubDate>Fri, 03 Jan 2020 09:54:28 +0000</pubDate>
</item>
<item>
	<title>Jens Reimann: An update on Eclipse IoT Packages</title>
	<guid isPermaLink="false">https://dentrassi.de/?p=4373</guid>
	<link>https://dentrassi.de/2019/12/19/update-on-eclipse-iot-packages/</link>
	<description>&lt;p&gt;A lot has happened, since &lt;a href=&quot;https://dentrassi.de/2019/09/10/from-building-blocks-to-iot-solutions/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;I wrote last about the Eclipse IoT Packages project&lt;/a&gt;. We had some great discussions at &lt;a href=&quot;https://www.eclipsecon.org/europe2019&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;EclipseCon Europe&lt;/a&gt;, and started to work together online, having new ideas in the progress. Right before the end of the year, I think it is a good time to give an update, and peek a bit into the future.&lt;/p&gt;



&lt;h2&gt;Homepage&lt;/h2&gt;



&lt;p&gt;One of the first things we wanted to get started, was a home for the content we plan on creating. An important piece of the puzzle is to explain to people, what we have in mind. Not only for people that want to try out the various Eclipse IoT projects, but also to possible contributors. And in the end, an important goal of the project is to attract interested parties. For consuming our ideas, or growing them even further.&lt;/p&gt;



&lt;div class=&quot;wp-block-image&quot;&gt;&lt;figure class=&quot;aligncenter is-resized&quot;&gt;&lt;img alt=&quot;Eclipse IoT Packages logo&quot; class=&quot;wp-image-4377&quot; height=&quot;192&quot; src=&quot;https://dentrassi.de/wp-content/uploads/logo.svg&quot; width=&quot;453&quot; /&gt;&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;So we now have a logo, &lt;a href=&quot;https://www.eclipse.org/packages/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;a homepage&lt;/a&gt;, built using using templates in a continuous build system. We are in a position to start focusing on the actual content, and on the more tricky tasks and questions ahead. And should you want to create a PR for the homepage, you are more than welcome. There is also already some content, explaining the main goals, the way we want to move forward, and demo of a first package: “Package Zero”.&lt;/p&gt;



&lt;h2&gt;Community&lt;/h2&gt;



&lt;p&gt;While the homepage is a good entry point for people to learn about Eclipse IoT and packages, &lt;a href=&quot;https://github.com/eclipse/packages/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;our GitHub repository&lt;/a&gt; is the home for the community. And having some great discussions on GitHub, quickly brought up the need for &lt;a href=&quot;https://github.com/eclipse/packages/issues/4&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;a community call&lt;/a&gt; and &lt;a href=&quot;https://github.com/eclipse/packages/issues/6&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;a more direct communication channel&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;If you are interested in the project, come and join &lt;a href=&quot;https://www.eclipse.org/packages/contribute/#join-the-community-call&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;our bi-weekly community call&lt;/a&gt;. It is a quick, 30 minutes call at 16:00 CET, and open to everyone. Repeating every two weeks, starting 2019-12-02.&lt;/p&gt;



&lt;p&gt;The URL to the call is: &lt;a href=&quot;https://eclipse.zoom.us/j/317801130&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;https://eclipse.zoom.us/j/317801130&lt;/a&gt;. You can also subscribe to the &lt;a href=&quot;https://calendar.google.com/calendar/ical/lu98p1vc1ed4itl7n9qno3oogc%40group.calendar.google.com/public/basic.ics&quot;&gt;community calendar&lt;/a&gt; to get a reminder.&lt;/p&gt;



&lt;p&gt;In between calls, we have a chat room &lt;a href=&quot;https://gitter.im/eclipse/packages&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;eclipse/packages&lt;/a&gt; on Gitter.&lt;/p&gt;



&lt;h2&gt;Eclipse IoT Helm Chart Repository&lt;/h2&gt;



&lt;p&gt;One of the earliest discussion we had, was around the question of how and were we want to host the Helm charts. We would prefer not to author them ourselves, but let the projects contribute them. After all, the IoT packages project has the goal of enabling you to install a whole set of Eclipse IoT projects, with only a few commands. So the focus is on the integration, and the expert knowledge required for creating project Helm chart, is in the actual projects.&lt;/p&gt;



&lt;p&gt;On the other side, having a one-stop shop, for getting your Eclipse IoT Helm charts, sounds pretty convenient. So why not host our own Helm chart repository?&lt;/p&gt;



&lt;p&gt;Thanks to a company called &lt;a href=&quot;https://github.com/kiwigrid/helm-charts&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Kiwigrid&lt;/a&gt;, who contributed a CI pipeline for validating charts, we could easily extend our existing homepage publishing job, to also publish Helm charts. As a first chart, we published the &lt;a href=&quot;https://www.eclipse.org/ditto/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Ditto&lt;/a&gt; chart. And, as expected with Helm, installing it is as easy as:&lt;/p&gt;



&lt;div class=&quot;wp-block-columns&quot;&gt;
&lt;div class=&quot;wp-block-column&quot;&gt;
&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;a href=&quot;https://dentrassi.de/wp-content/uploads/h1.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;wp-image-4387&quot; height=&quot;427&quot; src=&quot;https://dentrassi.de/wp-content/uploads/h1-1024x427.png&quot; width=&quot;1024&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&quot;wp-block-column&quot;&gt;
&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;a href=&quot;https://dentrassi.de/wp-content/uploads/h2.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;wp-image-4388&quot; height=&quot;427&quot; src=&quot;https://dentrassi.de/wp-content/uploads/h2-1024x427.png&quot; width=&quot;1024&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Of course having a single chart is only the first step. Publishing a single Helm charts isn’t that impressive. But getting an agreement on the community, getting the validation and publishing pipeline set up, attracting new contributors, that is definitely a big step in the right direction.&lt;/p&gt;



&lt;h2&gt;Outlook&lt;/h2&gt;



&lt;p&gt;I think that we now have a good foundation, for moving forward. We have a place called “home”, for documentation, code and community. And it looks like we have also been able to attract more people to the project.&lt;/p&gt;



&lt;p&gt;While our first package, “Package Zero”, still isn’t complete, it should be pretty close. Creating a first, joint deployment of Hono and Ditto is our immediate focus. And we will continue to work towards a first release of “Package Zero”. Finding a better name is still an item on the list.&lt;/p&gt;



&lt;p&gt;Having this foundation in place also means, that the time is right, for you to think about contributing your own Eclipse IoT Package. Contributions are always welcome.&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://dentrassi.de/2019/12/19/update-on-eclipse-iot-packages/&quot; rel=&quot;nofollow&quot;&gt;An update on Eclipse IoT Packages&lt;/a&gt; appeared first on &lt;a href=&quot;https://dentrassi.de&quot; rel=&quot;nofollow&quot;&gt;ctron's blog&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 19 Dec 2019 12:17:44 +0000</pubDate>
</item>
<item>
	<title>Karsten Thoms: Eclipse m2e: How to use a WORKSPACE Maven installation</title>
	<guid isPermaLink="false">http://kthoms.wordpress.com/?p=1027</guid>
	<link>https://kthoms.wordpress.com/2019/11/27/eclipse-m2e-how-to-use-a-workspace-maven-installation/</link>
	<description>&lt;p&gt;Today a colleague of me asked me about the Maven Installations preference page in Eclipse. There is an entry &lt;tt&gt;WORKSPACE&lt;/tt&gt; there, which is disabled and shows &lt;tt&gt;NOT AVAILABLE&lt;/tt&gt;. He wanted to know how to enable a workspace installation of Maven.&lt;br /&gt;
&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-1029&quot; height=&quot;433&quot; src=&quot;https://kthoms.files.wordpress.com/2019/11/screenshot-343.png?w=584&amp;amp;h=433&quot; width=&quot;584&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Since we both did not find the documentation of the feature I digged into the m2e sources and found class &lt;a href=&quot;https://github.com/eclipse/m2e-core/blob/releases/1.12/1.12.0.20190529-1916/org.eclipse.m2e.core/src/org/eclipse/m2e/core/internal/launch/MavenWorkspaceRuntime.java&quot;&gt;&lt;tt&gt;MavenWorkspaceRuntime&lt;/tt&gt;&lt;/a&gt;. The relevant snippets are the method &lt;tt&gt;getMavenDistribution()&lt;/tt&gt; and the &lt;tt&gt;MAVEN_DISTRIBUTION&lt;/tt&gt; constant:&lt;/p&gt;
&lt;pre class=&quot;c-mrkdwn__pre&quot;&gt;private static final ArtifactKey MAVEN_DISTRIBUTION = new ArtifactKey(
      &quot;org.apache.maven&quot;, &quot;apache-maven&quot;, &quot;[3.0,)&quot;, null); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$

...

protected IMavenProjectFacade getMavenDistribution() {
  try {
    VersionRange range = VersionRange.createFromVersionSpec(getDistributionArtifactKey().getVersion());
    for(IMavenProjectFacade facade : projectManager.getProjects()) {
      ArtifactKey artifactKey = facade.getArtifactKey();
      if(getDistributionArtifactKey().getGroupId().equals(artifactKey.getGroupId()) //
          &amp;amp;&amp;amp; getDistributionArtifactKey().getArtifactId().equals(artifactKey.getArtifactId())//
          &amp;amp;&amp;amp; range.containsVersion(new DefaultArtifactVersion(artifactKey.getVersion()))) {
        return facade;
      }
    }
  } catch(InvalidVersionSpecificationException e) {
    // can't happen
  }
  return null;
}&lt;/pre&gt;
&lt;p&gt;From here you can see that m2e tries to look for workspace (Maven) projects and to find one the has the coordinates &lt;tt&gt;org.apache.maven:apache-maven:[3.0,)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So the answer how to enable a WORKSPACE Maven installation is: Import the project &lt;tt&gt;apache-maven&lt;/tt&gt; into the workspace. And here is how to do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone Apache Maven from &lt;a href=&quot;https://github.com/apache/maven.git&quot;&gt;https://github.com/apache/maven.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Optionally: check out a release tag
&lt;pre&gt;git checkout maven-3.6.3&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Perform &lt;em&gt;File / Import / Existing Maven Projects&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;As &lt;em&gt;Root Directory&lt;/em&gt; select the &lt;tt&gt;apache-maven&lt;/tt&gt; subfolder in your Maven clone location&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you will have the project that m2e searches for in your workspace:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-1035&quot; src=&quot;https://kthoms.files.wordpress.com/2019/11/screenshot-344.png?w=584&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And the Maven Installations preference page lets you now select this distribution:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-1037&quot; height=&quot;478&quot; src=&quot;https://kthoms.files.wordpress.com/2019/11/screenshot-345.png?w=584&amp;amp;h=478&quot; width=&quot;584&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 27 Nov 2019 09:39:29 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Jakarta Microprofile REST Client in Eclipse</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-3693889557082666010</guid>
	<link>http://codeandme.blogspot.com/2019/11/jakarta-microprofile-rest-client-in.html</link>
	<description>Today we are going to implement a simple REST client for an Eclipse RCP application. Now with Jakarta @ Eclipse and all these nice Microprofile implementations this should be a piece of cake, right? Now lets see...&lt;br /&gt;&lt;br /&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/RESTEasy_client.zip?raw=true&quot; target=&quot;_blank&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/RESTEasy_client.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/rest_client&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: Dependencies&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://github.com/eclipse/microprofile-rest-client&quot; target=&quot;_blank&quot;&gt;Eclipse Microprofile REST Client repository&lt;/a&gt; is a good place to get started. It points to several implementations (at the bottom of the readme). Unfortunately these implementations do not host any kind of p2 sites which we could use directly. So our next stop is &lt;a href=&quot;https://download.eclipse.org/tools/orbit/downloads/&quot; target=&quot;_blank&quot;&gt;Eclipse Orbit&lt;/a&gt;, but same situation there. This means we need to collect our dependencies manually.&lt;br /&gt;&lt;br /&gt;For my example I used &lt;a href=&quot;https://resteasy.github.io/&quot; target=&quot;_blank&quot;&gt;RESTEasy&lt;/a&gt;, simply as it was the only one I could get working within reasonable time. To fetch dependencies, download the &lt;a href=&quot;https://resteasy.github.io/downloads.html&quot; target=&quot;_blank&quot;&gt;latest version of RESTEasy&lt;/a&gt;. As the RESTEasy download package does not contain the REST client API, we need to fetch that from another source. I found it in the &lt;a href=&quot;http://cxf.apache.org/download.html&quot; target=&quot;_blank&quot;&gt;Apache CXF project&lt;/a&gt;, so download the latest version too. If you know a better source, please let me know in the comments.&lt;br /&gt;&lt;br /&gt;Now create a new &lt;i&gt;Plug-in from Existing JAR Archives&lt;/i&gt;. Click on &lt;i&gt;Add External...&lt;/i&gt; and add all jars from resteasy-jaxrs-x.y.z.Final/lib/*.jar. Further add apache-cxf-x.y.z/lib/jakarta.ws.rs-api-x.y.z.jar.&lt;br /&gt;This plug-in now contains all dependencies we need for our client. Unfortunately also a lot of other stuff we probably do not need, but we leave the cleanup for later.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Define the REST service&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;For our example we will build a client for the &lt;a href=&quot;https://petstore.swagger.io/&quot; target=&quot;_blank&quot;&gt;Petstore Service&lt;/a&gt;, which can be used for testing purposes. Further it provides a swagger interface to test the REST calls online. I recommend to check out the API and play with some commands online and with curl.&lt;br /&gt;&lt;br /&gt;Lets write a simple client for the store with its 4 commands. The simplest seems to be the &lt;i&gt;inventory&lt;/i&gt; command, so we will start there. Create a new Java interface:&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;package com.codeandme.restclient.resteasy;&lt;br /&gt;&lt;br /&gt;import javax.ws.rs.GET;&lt;br /&gt;import javax.ws.rs.Path;&lt;br /&gt;import javax.ws.rs.Produces;&lt;br /&gt;import javax.ws.rs.core.MediaType;&lt;br /&gt;import javax.ws.rs.core.Response;&lt;br /&gt;&lt;br /&gt;public interface IStoreService {&lt;br /&gt;&lt;br /&gt; @GET&lt;br /&gt; @Path(&quot;/v2/store/inventory&quot;)&lt;br /&gt; @Produces(MediaType.APPLICATION_JSON)&lt;br /&gt; Response getInventory();&lt;br /&gt;}&lt;/pre&gt;Everything necessary for RESTEasy is provided via annotations:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;@Path&lt;/i&gt; defines the path for the command of the REST service&lt;/li&gt;&lt;li&gt;&lt;i&gt;@GET&lt;/i&gt; defines that we have to use a GET command (there exist annotations for POST, DELETE, PUT)&lt;/li&gt;&lt;li&gt;&lt;i&gt;@Produces&lt;/i&gt; finally defines the type of data we do get in response from the server.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 3: Create an instance of the service&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Create a new class &lt;i&gt;StoreServiceFactory&lt;/i&gt;:&lt;/div&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;package com.codeandme.restclient.resteasy;&lt;br /&gt;&lt;br /&gt;import java.net.URI;&lt;br /&gt;import java.net.URISyntaxException;&lt;br /&gt;&lt;br /&gt;import org.jboss.resteasy.client.jaxrs.ResteasyClient;&lt;br /&gt;import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;&lt;br /&gt;import org.jboss.resteasy.client.jaxrs.internal.ResteasyClientBuilderImpl;&lt;br /&gt;&lt;br /&gt;public class StoreServiceFactory {&lt;br /&gt;&lt;br /&gt; public static IStoreService createStoreService() throws URISyntaxException {&lt;br /&gt;  ResteasyClient client = new ResteasyClientBuilderImpl().build();&lt;br /&gt;  ResteasyWebTarget target = client.target(new URI(&quot;https://petstore.swagger.io/&quot;));&lt;br /&gt;  return target.proxy(IStoreService.class);&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;This is the programmatic way to create a client instance. There also exists another method called &lt;a href=&quot;https://download.eclipse.org/microprofile/microprofile-rest-client-1.3/microprofile-rest-client-1.3.html#restcdi&quot; target=&quot;_blank&quot;&gt;CDI&lt;/a&gt;, which I did not try out in Eclipse.&lt;br /&gt;&lt;br /&gt;The service is ready and usable, so give it a try. The result object returned does contain some valuable information:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;getStatus()&lt;/i&gt; provides the H&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&quot; target=&quot;_blank&quot;&gt;TTP response status&lt;/a&gt;. 200 is expected for a successful &lt;i&gt;getInventory()&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;getEntity()&lt;/i&gt; provides an &lt;i&gt;InputStream&lt;/i&gt; which contains the JSON encoded response data from the server&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 4: Response decoding&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Our response is encoded as &lt;a href=&quot;https://www.tutorialspoint.com/json/json_data_types.htm&quot; target=&quot;_blank&quot;&gt;JSON collection of properties&lt;/a&gt;. In Java terms this basically reflects to a &lt;i&gt;Map&amp;lt;String, String&amp;gt;&lt;/i&gt;. Instead of decoding the data manually, we let the framework do it for us:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Change the &lt;i&gt;IStoreService&lt;/i&gt; to:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class=&quot;brush: javascript&quot;&gt; Map&amp;lt;String, String&amp;gt; getInventory();&lt;/pre&gt;Anything else is done by the framework. Now how easy was that?&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 5: POST request&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;To place an order we need order parameters. Best we encapsulate them in a dedicated &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/rest_client/com.codeandme.restclient.resteasy/src/com/codeandme/restclient/resteasy/Order.java&quot; target=&quot;_blank&quot;&gt;Order class&lt;/a&gt;. From the definition of the &lt;i&gt;order&lt;/i&gt; REST call we can see that we need following class properties: &lt;i&gt;id, petId, quantity, shipDate, status, complete&lt;/i&gt;. Add these parameters as fields to the &lt;i&gt;Order&lt;/i&gt; class and create getters/setters for them.&lt;br /&gt;&lt;br /&gt;Now we can extend our &lt;i&gt;IStoreService&lt;/i&gt; with the &lt;i&gt;fileOrder()&lt;/i&gt; call:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;@Path(&quot;/v2/store&quot;)&lt;br /&gt;public interface IStoreService {&lt;br /&gt;&lt;br /&gt; @GET&lt;br /&gt; @Path(&quot;inventory&quot;)&lt;br /&gt; @Produces(MediaType.APPLICATION_JSON)&lt;br /&gt; Map&amp;lt;String, String&amp;gt; getInventory();&lt;br /&gt;&lt;br /&gt; @POST&lt;br /&gt; @Path(&quot;order&quot;)&lt;br /&gt; @Consumes(MediaType.APPLICATION_JSON)&lt;br /&gt; void fileOrder(Order order);&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;The &lt;i&gt;Order&lt;/i&gt; automatically gets encoded as JSON object. No need for us to do the coding manually!&lt;br /&gt;&lt;br /&gt;As parts of the path are the same for both calls, I moved the common component to the class level.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 6: Path parameters&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;To fetch an order we need to put the &lt;i&gt;orderId&lt;/i&gt; in the request path. Coding of such parameters is put in curly braces. The parameter on the java call then gets annotated so the framework knows which parameter value to put into the path:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt; @GET&lt;br /&gt; @Path(&quot;order/{orderId}&quot;)&lt;br /&gt; @Produces(MediaType.APPLICATION_JSON)&lt;br /&gt; Order getOrder(@PathParam(&quot;orderId&quot;) int orderId);&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Again the framework takes care of the decoding of the JSON data.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 7: DELETE an Order&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Deleting needs the &lt;i&gt;orderId&lt;/i&gt; as before:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt; @DELETE&lt;br /&gt; @Path(&quot;order/{orderId}&quot;)&lt;br /&gt; void deleteOrder(@PathParam(&quot;orderId&quot;) int orderId);&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The REST API does not provide a useful JSON response to the delete call. One option is to leave the response type to &lt;i&gt;void&lt;/i&gt;. In case the command fails, an exception will be thrown (eg when the &lt;i&gt;orderId&lt;/i&gt; is not found and the server returns 404).&lt;br /&gt;&lt;br /&gt;Another option is to set the return type to &lt;i&gt;javax.ws.rs.core.Response&lt;/i&gt;. Now we do get everything the server sends back and no execption is thrown anymore. Sometimes we might only be interested in the status code. This can be fetched when setting the return type to &lt;i&gt;Response.Status&lt;/i&gt;. Again, no exception will be thrown on a 404.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Optional: Only have required RESTEasy dependencies&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Looking at all these jars I could not figure out a good way to get rid of the ones unused by the REST client. So I provided unit tests for all my calls and then removed dependencies step by step until I found the minimal set of required jars.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Mon, 18 Nov 2019 11:19:24 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Lars Vogel: Eclipse startup up time improved</title>
	<guid isPermaLink="true">https://www.vogella.com/blog/posts/eclipse-ide-startuptime/</guid>
	<link>https://www.vogella.com/blog/posts/eclipse-ide-startuptime/</link>
	<description>I’m happy to report that the Eclipse SDK integration builds starts in less than 5 seconds (~4900 ms) on my machine into an empty workspace.
IIRC this used to be around 9 seconds 2 years ago. 4.13 (which was already quite a bit improved used around 5800ms (6887ms with EGit and Marketplace).
For recent improvements in this release see https://bugs.eclipse.org/bugs/show_bug.cgi?id=550136
Thanks to everyone who contributed.</description>
	<pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jens von Pilgrim: Setup a Github Triggered Build Machine for an Eclipse Project</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-4884093826755448868.post-968132271991652819</guid>
	<link>https://jevopisdeveloperblog.blogspot.com/2019/10/setup-github-triggered-build-machine.html</link>
	<description>Disclaimer 1: This blog post literally is a &quot;web log&quot;, i.e., it is my log about setting up a Jenkins machine with a job that is triggered on a Github pull request. A lot of parts have been described elsewhere, and I link to the sources I used here. I also know that nowadays (e.g., new Eclipse build infrastructure) you usually do that via docker -- but then you need to configure docker, in which</description>
	<pubDate>Tue, 29 Oct 2019 12:55:56 +0000</pubDate>
	<author>noreply@blogger.com (Jens v.P.)</author>
</item>
<item>
	<title>Fabio Zadrozny: LiClipse 6.0.0 released</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7855001383687474475.post-1728353912076381023</guid>
	<link>http://liclipse.blogspot.com/2019/10/liclipse-600-released.html</link>
	<description>LiClipse 6.0.0 is now out.&lt;br /&gt;&lt;br /&gt;The main changes is that many dependencies have been updated:&lt;br /&gt;&lt;br /&gt;- it's now based on Eclipse 4.13 (2019-09), which is a pretty nice upgrade (in my day-to-day use I find it appears smoother than previous versions, although I know this sounds pretty subjective).&lt;br /&gt;&lt;br /&gt;- PyDev was updated to 7.4.0, so, Python 3.8 (which was just released) is now already supported.&lt;br /&gt;&lt;br /&gt;Enjoy!</description>
	<pubDate>Fri, 25 Oct 2019 18:59:14 +0000</pubDate>
	<author>noreply@blogger.com (Fabio Zadrozny)</author>
</item>
<item>
	<title>Ekkehard Gentz: Qt World Summit 2019 Berlin – Secrets of Successful Mobile Business Apps</title>
	<guid isPermaLink="false">http://ekkescorner.wordpress.com/?p=4353</guid>
	<link>https://ekkescorner.wordpress.com/2019/10/22/qt-world-summit-2019-berlin-secrets-of-successful-mobile-business-apps/</link>
	<description>&lt;h1&gt;Qt World Summit 2019&lt;/h1&gt;
&lt;p&gt;Meet me at &lt;a href=&quot;https://www.qtworldsummit.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Qt World Summit 2019 in Berlin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.qt.io/qtws19/home&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;QtWS19_globe&quot; class=&quot;alignnone size-full wp-image-4347&quot; src=&quot;https://ekkescorner.files.wordpress.com/2019/10/qtws19_globe.png?w=550&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ll speak about development of mobile business apps with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qt 5.13.1+ (Qt Quick Controls 2)
&lt;ul&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.qtworldsummit.com/2019/sessions/mobile-business-apps-with-qt/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;ekkes_session_qtws19&quot; class=&quot;alignnone size-full wp-image-4356&quot; src=&quot;https://ekkescorner.files.wordpress.com/2019/10/ekkes_session_qtws19.png?w=550&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Qt World Summit 2019 Conference App&lt;/h1&gt;
&lt;p&gt;As a little appetizer I developed a conference app. HowTo download from Google Play Store or Apple and some more screenshots see &lt;a href=&quot;https://appbus.wordpress.com/2019/10/21/qt-world-summit-2019-conference-app/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://appbus.wordpress.com/2019/10/21/qt-world-summit-2019-conference-app/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;02_sessions_android&quot; class=&quot;alignnone size-full wp-image-4358&quot; src=&quot;https://ekkescorner.files.wordpress.com/2019/10/02_sessions_android.png?w=550&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;sources at &lt;a href=&quot;https://github.com/ekke/c2gQtWS_x&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cu in Berlin&lt;/p&gt;</description>
	<pubDate>Tue, 22 Oct 2019 12:39:24 +0000</pubDate>
</item>
<item>
	<title>Lars Vogel: A nicer icon for Quick Access / Find Actions</title>
	<guid isPermaLink="true">https://www.vogella.com/blog/posts/eclipse-ide-new-icon/</guid>
	<link>https://www.vogella.com/blog/posts/eclipse-ide-new-icon/</link>
	<description>Finally we use a decent icon for Quick Access / Find Actions. This is now a button in the toolbar which allows you to trigger arbitrary commands in the Eclipse IDE.</description>
	<pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
</item>
<item>
	<title>BJ Hargrave: A Tool for Jakarta EE Package Renaming in Binaries</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-18834385.post-2773222166057858942</guid>
	<link>https://blog.hargrave.io/2019/10/a-tool-for-jakarta-ee-package-renaming.html</link>
	<description>In a &lt;a href=&quot;https://blog.hargrave.io/2019/05/jakarta-ee-and-package-renaming.html&quot;&gt;previous post&lt;/a&gt;, I laid out my thinking on how to approach the package renaming problem which the Jakarta EE community now faces. Regardless of whether the community chooses big bang or incremental, there are still existing artifacts in the world using the Java EE package names that the community will need to use together with the new Jakarta EE package names.&lt;br /&gt;&lt;br /&gt;Tools are always important to take the drudgery away from developers. So I have put together a &lt;a href=&quot;https://github.com/bjhargrave/transformer&quot;&gt;tool&lt;/a&gt; prototype which can be used to transform binaries such as individual class files and complete JARs and WARs to rename uses of the Java EE package names to their new Jakarta EE package names.&lt;br /&gt;&lt;br /&gt;The tools is rule driven which is nice since the Jakarta EE community still needs to define the actual package renames for Jakarta EE 9. The rules also allow the users to control which class files in a JAR/WAR are transformed. Different users may want different rules depending upon their specific needs. And the tool can be used for any package renaming challenge, not just the specific Jakarta EE package renames.&lt;br /&gt;&lt;br /&gt;The tools provides an API allowing it to be embedded in a runtime to dynamically &lt;a href=&quot;https://github.com/bjhargrave/transformer/blob/5b2ba77f4647cce275567219e4e97cd7b41ef0b1/src/main/java/dev/hargrave/transformer/Transformer.java#L231&quot;&gt;transform class files&lt;/a&gt; during the class loader definition process. The API also supports &lt;a href=&quot;https://github.com/bjhargrave/transformer/blob/5b2ba77f4647cce275567219e4e97cd7b41ef0b1/src/main/java/dev/hargrave/transformer/Transformer.java#L158&quot;&gt;transforming JAR files&lt;/a&gt;. A &lt;a href=&quot;https://github.com/bjhargrave/transformer#command-line&quot;&gt;CLI&lt;/a&gt; is also provided to allow use from the command line. Ultimately, the tool can be packaged as Gradle and Maven plugins to incorporate in a broader tool chain.&lt;br /&gt;&lt;br /&gt;Given that the tool is prototype, and there is much work to be done in the Jakarta EE community regarding the package renames, I have started a &lt;a href=&quot;https://github.com/bjhargrave/transformer/labels/enhancement&quot;&gt;list of TODOs&lt;/a&gt; in the project' issues for known work items.&lt;br /&gt;&lt;br /&gt;Please try out the tool and let me know what you think. I am hoping that tooling such as this will ease the community cost of dealing with the package renames in Jakarta EE.&lt;br /&gt;&lt;br /&gt;PS. Package renaming in source code is also something the community will need to deal with. But most IDEs are pretty good at this sort of thing, so I think there is probably sufficient tooling in existence for handling the package renames in source code.</description>
	<pubDate>Thu, 17 Oct 2019 21:26:16 +0000</pubDate>
	<author>noreply@blogger.com (BJ Hargrave)</author>
</item>
<item>
	<title>Doug Schaefer: I’ll never forget that first EclipseCon meeting with you guys and Disney characters all around and…</title>
	<guid isPermaLink="false">https://medium.com/p/a91be3d126b2</guid>
	<link>https://medium.com/@dougschaefer/ill-never-forget-that-first-eclipsecon-meeting-with-you-guys-and-disney-characters-all-around-and-a91be3d126b2?source=rss-8f7a70438965------2</link>
	<description>&lt;p&gt;I’ll never forget that first EclipseCon meeting with you guys and Disney characters all around and the music. And all the late nights in the Santa Clara bar and summits and meetings talking until no one else was left. Great times indeed. Until we meet again Michael!&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=a91be3d126b2&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 16 Oct 2019 01:18:06 +0000</pubDate>
</item>
<item>
	<title>EclipseCon Europe 2019: Missing ECE already? Bring back a little of it - take the survey!</title>
	<guid isPermaLink="false">2258 at https://www.eclipsecon.org</guid>
	<link>https://www.eclipsecon.org/europe2019/news/missing-ece-already-bring-back-little-it-take-survey</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;We hope you enjoyed the 2019 version of EclipseCon Europe and OSGi Community Event as much as we did.&lt;/p&gt;

&lt;p&gt;Please share your thoughts and feedback by completing the &lt;a href=&quot;https://www.surveymonkey.com/r/EclipseConEurope2019&quot; target=&quot;_blank&quot;&gt;short attendee survey&lt;/a&gt;. We read all responses, and we will use them to improve next year's event.&lt;/p&gt;

&lt;p&gt;Speakers, please upload your slides to your session page. Attendees really appreciate this!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2019/news/missing-ece-already-bring-back-little-it-take-survey&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/jon-tyson-vD6UFu8QYUI-unsplash.jpg?itok=y0QRkbws&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 15 Oct 2019 21:22:00 +0000</pubDate>
</item>
<item>
	<title>Chris Aniszczyk: Open Source Gerrymandering</title>
	<guid isPermaLink="false">https://www.aniszczyk.org/?p=4203</guid>
	<link>https://www.aniszczyk.org/2019/10/08/open-source-gerrymandering/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Over the years, I have spent a lot of time thinking about and working on open source communities… from bootstrapping projects out of corporations (or broken communities), to starting brand new open source foundations.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&quot;Good governance never depends upon laws, but upon the personal qualities of those who govern… The most important element of government, therefore, is the method of choosing leaders&quot;&lt;/p&gt;
&lt;p&gt;— Chris Aniszczyk (@cra) &lt;a href=&quot;https://twitter.com/cra/status/1166767809185165312?ref_src=twsrc%5Etfw&quot;&gt;August 28, 2019&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;I was recently having a conversation with an old colleague about bringing an open source project out of a company into the wild and how to setup the project for success. A key part of that discussion involved setting up the governance for the project and what that means. There was also discussion how neutral and open governance under a nonprofit foundation can be good for certain projects as &lt;/span&gt;&lt;a href=&quot;http://openlife.cc/blogs/2010/november/how-grow-your-open-source-project-10x-and-revenues-5x&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;research&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; has shown that neutral foundations can promote growth and community better than other approaches. Also the conversation led to a funny side discussion on the concept of &lt;/span&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Gerrymandering&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;gerrymandering&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and open source.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-4315&quot; height=&quot;722&quot; src=&quot;https://www.aniszczyk.org/wp-content/uploads/2018/02/gerrymandering.png&quot; width=&quot;994&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For those who arenâ€™t familiar with the term, itâ€™s become popular in the US political lexicon as a â€œpractice intended to establish a political advantage for a particular party or group by manipulating district boundaries.â€� A practical example of this is from my town of Austin TX which is in district 35 which snakes all the way from Austin to San Antonio for &lt;/span&gt;&lt;a href=&quot;https://www.politifact.com/texas/statements/2018/aug/16/beto-orourke/texas-one-nations-most-gerrymandered-states/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;some reason&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The same concept of gerrymandering can apply to open source communities as open source projects can act like mini political institutions (or bigger ones in the case of Kubernetes). I shared some of my favorite examples with my friend so I figured Iâ€™d write this down for future reference and share it with folks as you really need to read the â€œfine printâ€� to find these at times.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Apache Cassandra&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Apache Software Foundation (ASF) is a fantastic open source organization that has been around for a long time (they celebrated their 20th anniversary) and has had a lot of impact across the world. The way projects are governed in the ASF are through the &lt;/span&gt;&lt;a href=&quot;https://www.apache.org/theapacheway/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Apache Way&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which places a lot of emphasis on â€œcommunity over codeâ€� amongst some other principles which are great practices for open source projects to follow.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;There have been some interesting governance issues and lessons learned over the years in the ASF, in particular it can be challenging when you have a strong single vendor associated with a project as was with the case with Cassandra awhile ago:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;The Apache Software Foundation is really out of line in their actions with Cassandra IMO. Meeting notes: &lt;a href=&quot;https://t.co/TQXvF0pfex&quot;&gt;https://t.co/TQXvF0pfex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Kelly Sommers (@kellabyte) &lt;a href=&quot;https://twitter.com/kellabyte/status/794377137092497408?ref_src=twsrc%5Etfw&quot;&gt;November 4, 2016&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As the ASF board noted in &lt;/span&gt;&lt;a href=&quot;https://www.apache.org/foundation/records/minutes/2016/board_minutes_2016_08_17.txt&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;the minutes&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; from its meeting with DataStax representatives, “The Board expressed continuing concern that the PMC was not acting independently and that one company had undue influence over the project.” There was some interesting &lt;/span&gt;&lt;a href=&quot;https://www.theregister.co.uk/2016/11/14/datastax_versus_asf_staxeit/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;press&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; around the time this happened:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;â€œJagielski told me in an interview, echoing what &lt;/span&gt;&lt;/i&gt;&lt;a href=&quot;http://www.mail-archive.com/dev@cassandra.apache.org/msg10122.html&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;he’d said&lt;/span&gt;&lt;/i&gt;&lt;/a&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; on the Cassandra mailing list, that undue influence conflicts with project leadership obligations established by the ASF. As he suggested, the ASF tried many times to get a DataStax-heavy Project Management Committee (PMC) to pay attention to alleged trademark and other &lt;/span&gt;&lt;/i&gt;&lt;a href=&quot;http://apache.org/foundation/press/Project-PR-BrandGuidelines.pdf&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;violations&lt;/span&gt;&lt;/i&gt;&lt;/a&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, to no avail. Whatever DataStax’s positive influence on the development of the projectâ€”in other wordsâ€”it failed to exercise equivalent influence on governing the project in ASF fashion.â€�&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The ASF basically forced a reorganization of the Cassandra PMC to be in more in lines with its values and then caused the primary vendor behind the project to pull engineers off the open source project.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Containerd&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The &lt;/span&gt;&lt;a href=&quot;https://containerd.io/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;containerd&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; project is an industry-standard container runtime with an emphasis on simplicity, robustness and portability. The history of the project comes from being born at Docker where their open source projects had a governance policy essentially aligned with the BDFL philosophy with one of their project founders.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In &lt;a href=&quot;https://cncf.io&quot;&gt;CNCF&lt;/a&gt;, (which containered is a project of), project governance documents arenâ€™t considered static and evolve over time to meet the needs of their community. For example, when containerd &lt;/span&gt;&lt;a href=&quot;https://www.cncf.io/announcement/2017/03/29/containerd-joins-cloud-native-computing-foundation/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;joined&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; the CNCF their governance was geared towards a BDFL approach but over time evolved to a more &lt;/span&gt;&lt;a href=&quot;https://github.com/containerd/project/pull/16&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;neutral&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; approach that spread authority across maintainers.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Cloud Foundry&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Cloud Foundry is an open source community that has a large and mature ecosystem of PaaS focused projects. In the Cloud Foundry Foundation (CFF), they have a&lt;/span&gt;&lt;a href=&quot;https://www.cloudfoundry.org/wp-content/uploads/2017/01/CFF_Bylaws.pdf&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;unique governance clauses&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; in regards to how affiliates are treated and voting.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Pivotal Platinum Director Voting Power. The Platinum Director appointed by Pivotal (â€œPivotal Directorâ€�) shall have five (5) votes on any matter submitted to a vote of the Board. (i) On a date one (1) year after the incorporation date set forth in the Certificate, the number of Pivotal Directorâ€™s votes will be reduced to three (3). (ii) On a date two (2) years after the incorporation date set forth in the Certificate, the number of Pivotal Directorâ€™s votes will be reduced to one (1)&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To bootstrap the foundation, the originating company wanted a &lt;/span&gt;&lt;b&gt;little bit of control&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for a couple of years, which can make sense in some situations as the beginning of a foundation can be a tumultuous time. In my opinion, itâ€™s great to see the extra vote clause expire after 2 years, however, itâ€™s still very unfair to the early potential members of the organization.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Another example of open source gerrymandering can be how votes are represented by member companies that are owned by a single entity:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;At no time may a Member and its Affiliates have more than one Director who is an employee, officer, director, or consultant of that Member, except that Pivotal, EMC, and VMware, though Affiliates, shall each have one (1) Director on the Board).&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This is an interesting tidbit given that Dell owns Pivotal, EMC and VMWare. In some organizations, usually there is &lt;/span&gt;&lt;a href=&quot;https://github.com/cdfoundation/charter/blob/master/CHARTER.md#9-subsidiaries-and-related-companies&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;legal language&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; that collapses owned entities into one vote.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;I personally Iâ€™m not the biggest fan of this approach as it makes things unfair from the beginning and can be an impediment to wide adoption across the industry. There can definitely be reasons of why you need to do this in the formation phase but it should be done with caution. If you saw the recent news that Pivotal was being spun back into VMWare and their &lt;/span&gt;&lt;a href=&quot;https://www.theregister.co.uk/2019/07/25/pivotal_ford_write_down/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;woes with adoption&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, it shouldnâ€™t come as a surprise in my opinion as one company was bearing too much of the burden in my opinion and not building a diverse community of contributors.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Cloud Native Computing Foundation (CNCF)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you remember the early days of the container and orchestration wars, there was a lot different technologies, approaches and corporate politics. When CNCF was founded, the &lt;/span&gt;&lt;a href=&quot;https://github.com/cncf/foundation/commit/0659ab992e0e3e04324beff1214f17cb8896cd4c#diff-778830d439b70bb644e57dac072da3e6&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;original charter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; included a clause that upgraded certain startup members from Silver to Platinum that were important in the ever evolving cloud native ecosystem.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;â€œThe Governing Board may extend a Platinum membership at the Silver Membership Scale rates on a year-by-year basis for up to 5 years to startup companies with revenues less than $50 million that are deemed strategic technology contributors by the Governing Board.â€�&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In my opinion, that particular piece in the charter was important in bringing together all the relevant startups to the table along with the big established companies at the time.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In terms of projects, the CNCF Technical Oversight Committee (TOC) defines a set of &lt;/span&gt;&lt;a href=&quot;https://github.com/cncf/toc/blob/master/PRINCIPLES.md&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;principles&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to steward the technical community. The most important principle is around a minimum viable governance that enables projects to be self-governing. TOC members are available to provide guidance to the projects but do not control them.Â &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;https://twitter.com/CloudNativeFdn/status/1167455648768045056&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Unlike Apache and the &lt;/span&gt;&lt;a href=&quot;https://www.apache.org/theapacheway/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Apache Way&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, CNCF does not require its hosted projects to follow any specific governance model. Instead, CNCF &lt;/span&gt;&lt;a href=&quot;https://github.com/cncf/toc/blob/master/process/graduation_criteria.adoc&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;specifies&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; that graduated projects need to â€œexplicitly define a project governance and committer process.â€� So in reality, CNCF operates under the principle of subsidiarity, encouraging decisions to be made at the lowest project level consistent with their resolution.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;GitLab&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;GitLab is a fantastic open source project AND company that I admire deeply for their &lt;/span&gt;&lt;a href=&quot;https://about.gitlab.com/handbook/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;transparency&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The way the GitLab &lt;/span&gt;&lt;b&gt;project&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is structured is that itâ€™s wholly owned by the GitLab company (they also own the trademark). To the credit of GitLab, they make this clear via their &lt;/span&gt;&lt;a href=&quot;https://about.gitlab.com/company/stewardship/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;stewardship principles&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; online and discuss what they consider enterprise product work versus project work.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;nice &quot;stewardship promises&quot; from &lt;a href=&quot;https://twitter.com/gitlab?ref_src=twsrc%5Etfw&quot;&gt;@gitlab&lt;/a&gt; based on their opencore business model, all opencore biz should do this &lt;a href=&quot;https://t.co/mqGkOeejp3&quot;&gt;https://t.co/mqGkOeejp3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Chris Aniszczyk (@cra) &lt;a href=&quot;https://twitter.com/cra/status/819988877335207938?ref_src=twsrc%5Etfw&quot;&gt;January 13, 2017&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Iâ€™d love for them in the future to separate the branding from the company, project and the product as I believe itâ€™s confusing and dilutes the messaging, but that’s just my opinion &lt;img alt=&quot;ğŸ™‚&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/13.0.0/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Istio&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Istio is a popular service mesh project originated at Google. It has documented its governance model publicly: &lt;/span&gt;&lt;a href=&quot;https://github.com/istio/community/blob/master/STEERING-COMMITTEE.md&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;https://github.com/istio/community/blob/master/STEERING-COMMITTEE.md&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, as you can see, itâ€™s heavily tilted towards Google and there seems to be no limits on the number of spots on the steering committee from one company which is a common tactic in open governance approaches to keep things fair. On top of that, Google owns the trademark, domains and other project assets so Iâ€™d consider Istio to be heavily gerrymandered in Googleâ€™s versus the communityâ€™s interest.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JCP&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;I had the pleasure of serving on the Java Community Process (JCP) Executive Committee for a few years while I was at Twitter. Itâ€™s a great organization that drives standardization across the Java ecosystem, some of the &lt;/span&gt;&lt;a href=&quot;https://jcp.org/en/procedures/jcp2#3.7&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;fine print is interesting though&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;â€œThe EC is composed of 25 Java Community Process Members whose seats are allocated as follows: 16 Ratified Seats, 6 Elected Seats, and 2 Associate Seats, plus one permanent seat held by Oracle. (Oracle’s representative must not be a member of the PMO.) The EC is led by a non-voting Chair from the PMO.â€�&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This essentially gives Oracle a permanent seat on the Executive Committee.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Hereâ€™s another fun clause:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Ballots to approve Umbrella JSRs that define the initial version of a new Platform Edition Specification or JSRs that propose changes to the Java language are approved if (a) at least a two-thirds majority of the votes cast are “yes” votes, (b) a minimum of 5 “yes” votes are cast, and (c) Oracle casts one of the “yes” votes. Ballots are otherwise rejected.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This essentially gives Oracle a veto vote on any JSR.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Note: The coolest thing the JCP has done is contribute the EE specification work to the Eclipse Foundation and form the Jakarta project over there to &lt;/span&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/tanja-obradovic/how-participate-advancing-jakarta-ee-specification&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;steward things in an open way&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Knative&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Knative, like Istio mentioned above, is an open source project that was born at Google and controlled by Google. There have been a lot of discussion lately about this as Google recently decided to not openly govern the project and move it to a neutral foundation:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;I'm pretty disappointed to see Knative forgo open governance.&lt;a href=&quot;https://t.co/fVhbP687rs&quot;&gt;https://t.co/fVhbP687rs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The growth and user focus of Kubernetes, Helm and many others show that CNCF is a great home for open communities.&lt;/p&gt;
&lt;p&gt;OSS is better if we work together in neutral spaces&lt;/p&gt;
&lt;p&gt;— brendandburns (@brendandburns) &lt;a href=&quot;https://twitter.com/brendandburns/status/1179176440647913472?ref_src=twsrc%5Etfw&quot;&gt;October 1, 2019&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Kubernetes&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Kubernetes operates under the auspices of the CNCF and openly governed by the &lt;/span&gt;&lt;a href=&quot;https://kubernetes.io/blog/2019/10/03/2019-steering-committee-election-results/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Kubernetes Steering Committee&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (KSC). The Kubernetes project has &lt;/span&gt;&lt;a href=&quot;https://www.cncf.io/cncf-kubernetes-project-journey/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;grown significantly over time&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, but has done a great job of keeping things openly governed and inclusive in my opinion, especially compared to its project size these days. The KSC &lt;/span&gt;&lt;a href=&quot;https://github.com/kubernetes/community/blob/master/governance.md&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;governs the project&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; along with a variety of sub working groups. Also, the Kubernetes trademark is neutrally owned by the CNCF and openly governed via the &lt;/span&gt;&lt;a href=&quot;https://github.com/kubernetes/community/blob/master/governance.md&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Conformance Working Group&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; which decides how certification works for the community, which there are nearly &lt;/span&gt;&lt;a href=&quot;https://www.cncf.io/certification/software-conformance/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;100 certified solutions&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; out there!&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Spinnaker&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Spinnaker project was originally born at Netflix and recently spun out into the &lt;/span&gt;&lt;a href=&quot;https://cd.foundation&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Continuous Delivery Foundation&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (CDF) as an openly &lt;/span&gt;&lt;a href=&quot;https://www.spinnaker.io/community/governance/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;governed&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; project. The project assets, from domains to github to trademarks are all neutrally owned by the community through the CDF.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Vault&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://github.com/hashicorp/vault&quot;&gt;Vault&lt;/a&gt; is a fantastic and widely used secrets management tool from Hashicorp. Itâ€™s a single vendor controlled open source project that has an open core model with an open source and enterprise versions (see &lt;/span&gt;&lt;a href=&quot;https://www.hashicorp.com/products/vault/enterprise&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;matrix&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;). What this essentially means is that the buck stops at the single vendor on what features/fixes end up in the open source version, most likely that wonâ€™t include things that they sell in their enterprise offering.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;I hope you learned something new about open source projects, foundations and communities as these things can be a little bit more complicated as you dig into the details. Itâ€™s really important to note that there is a difference between open source and &lt;/span&gt;&lt;a href=&quot;https://github.com/opengovernance/opengovernance.dev&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;open governance&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and you should always be skeptical of a project that claims itâ€™s truly open if only one for profit company owns all the assets and control. While thereâ€™s nothing wrong with this approach at all, most organizations donâ€™t set expectations up front which can lead to frustrations down the road. Note, thereâ€™s nothing wrong with single vendor controlled open source projects, I think they are great but I think they need to be upfront, similar to what GitLab stewardship principles on what they will put in open source versus their enterprise version.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In conclusion, as with anything in life, you should always read the fine print of an open source communities charter or legal paperwork to understand how it works. The lesson here is that every organization or project has its own rules and governance and itâ€™s important that you understand how decisions are made and who has ownership of project assets like trademarks.&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 08 Oct 2019 18:20:53 +0000</pubDate>
</item>
<item>
	<title>Jens von Pilgrim: JShell in Eclipse</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-4884093826755448868.post-5953202569285019139</guid>
	<link>https://jevopisdeveloperblog.blogspot.com/2019/10/jshell-in-eclipse.html</link>
	<description>Java 9 introduced a new command line tool: JShell. This is a read–eval–print loop (REPL) for Java with some really nice features. For programmers I would assume writing a test is the preferred choice, but for demonstrating something (in a class room for example) this is a perfect tool if you are not using a special IDE such as BlueJ (which comes with its own REPL).

The interesting thing about</description>
	<pubDate>Tue, 08 Oct 2019 12:16:32 +0000</pubDate>
	<author>noreply@blogger.com (Jens v.P.)</author>
</item>
<item>
	<title>PapyrusUML: Removing “Contact Us</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=2371</guid>
	<link>https://papyrusuml.wordpress.com/2019/10/07/removing-contact-us/</link>
	<description>&lt;p&gt;Unfortunately, because of the larger amount of spam, I now have to remove off the “&lt;a href=&quot;https://papyrusuml.wordpress.com/wp-admin/post.php?post=678&amp;amp;action=edit&quot;&gt;Contact Us&lt;/a&gt;” page.&lt;/p&gt;



&lt;p&gt;If you want to contact us, I would recommend you go through our twitter account.&lt;/p&gt;</description>
	<pubDate>Mon, 07 Oct 2019 14:17:36 +0000</pubDate>
</item>
<item>
	<title>N4JS: Instanceof Type Guards in N4JS</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-5441381820374499063</guid>
	<link>https://n4js.blogspot.com/2019/09/instanceof-type-guards-in-n4js.html</link>
	<description>&lt;h4&gt;Statically typed languages like Java use &lt;span&gt;instanceof&lt;/span&gt; checks to determine the type of an object at runtime. After a successful check, a type cast needs to be done explicitly in most of those languages. In this post we present how N4JS introduced type guards to perform these type casts implicitly. &lt;/h4&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-k8VG4ZChX4E/XR4Y74o1khI/AAAAAAAAAKs/rNn1qAac2Twtr3rlVi__edXAvjECND7GwCLcBGAs/s1600/tg_f1.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;300&quot; src=&quot;https://1.bp.blogspot.com/-k8VG4ZChX4E/XR4Y74o1khI/AAAAAAAAAKs/rNn1qAac2Twtr3rlVi__edXAvjECND7GwCLcBGAs/s1600/tg_f1.png&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 12.8px;&quot;&gt;No error due to implicit cast in successful &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;span style=&quot;font-size: 12.8px;&quot;&gt; type guard&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;h4&gt;The example above&lt;span style=&quot;font-weight: normal;&quot;&gt; shows that strict type rules on the &lt;span&gt;any&lt;/span&gt; instance &lt;span&gt;a&lt;/span&gt; causes errors to show up when accessing the unknown property &lt;span&gt;pX&lt;/span&gt;. However, after asserting that &lt;span&gt;a&lt;/span&gt; is an instance of &lt;span&gt;X&lt;/span&gt;, the property &lt;span&gt;pX&lt;/span&gt; can be accessed without errors. A separate type cast is unnecessary, since type inference now also considers &lt;span&gt;instanceof&lt;/span&gt; type guard information.&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-LDRo370o02M/XR8SffBT-WI/AAAAAAAAALE/L0z7eK0-rpw45HfFvckQkxvoULiVrG3XwCLcBGAs/s1600/Screenshot%2B2019-07-05%2Bat%2B11.00.31.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;130&quot; src=&quot;https://1.bp.blogspot.com/-LDRo370o02M/XR8SffBT-WI/AAAAAAAAALE/L0z7eK0-rpw45HfFvckQkxvoULiVrG3XwCLcBGAs/s1600/Screenshot%2B2019-07-05%2Bat%2B11.00.31.png&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Hover information on variable access of &lt;span&gt;a&lt;/span&gt; shows the inferred type&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4&gt;The resulting type&lt;span style=&quot;font-weight: normal;&quot;&gt; is the intersection type of the original type (which is here &lt;span&gt;any&lt;/span&gt;) and of all type guards that must hold on a specific variable access (which is here only type &lt;span&gt;X&lt;/span&gt;). Keeping the original types &lt;span&gt;any&lt;/span&gt; or &lt;span&gt;Object&lt;/span&gt; is not necessary and could be optimised later. In case the original type is different, it is necessary to include it in the resulting intersection type. The reason is that the type guard could check for an interface only. If so, property accesses to properties of the original types would cause errors.&lt;/span&gt;&lt;/h4&gt;&lt;div&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-uMfGgEJdmJA/XR8g15OqgOI/AAAAAAAAALQ/TJvo54WPnd84n2N4rDYv-2xrLWlPZgX2QCLcBGAs/s1600/Screenshot%2B2019-07-05%2Bat%2B12.04.37.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;300&quot; src=&quot;https://1.bp.blogspot.com/-uMfGgEJdmJA/XR8g15OqgOI/AAAAAAAAALQ/TJvo54WPnd84n2N4rDYv-2xrLWlPZgX2QCLcBGAs/s1600/Screenshot%2B2019-07-05%2Bat%2B12.04.37.png&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Re-definition of a type guarded variable&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;b&gt;Two distinct differences&lt;/b&gt; between type guards and type declarations are (1) their data flow nature and (2) their read-only effects. Firstly, when redefining (in the sense of the data flow) a variable, the type guard information gets lost. Consequently, subsequent accesses to the variable will no longer benefit from the type guard, since the type guard was invalidated by the re-definition. Secondly, only the original type information is considered for a redefinition. That means that the type guard does not change the expected type and, hence, does not limit the set of types that can be assigned to a type guarded variable.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-Tgjm3RwmYco/XR8sIy_XQWI/AAAAAAAAALc/smgNTaOcr_wbJC1mCDNN5QrNXXclTtzngCLcBGAs/s1600/Screenshot%2B2019-07-05%2Bat%2B12.52.50.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;475&quot; src=&quot;https://1.bp.blogspot.com/-Tgjm3RwmYco/XR8sIy_XQWI/AAAAAAAAALc/smgNTaOcr_wbJC1mCDNN5QrNXXclTtzngCLcBGAs/s1600/Screenshot%2B2019-07-05%2Bat%2B12.52.50.png&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Further examples for &lt;span&gt;instanceof&lt;/span&gt; type guards in N4JS&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;b&gt;Data flow analysis&lt;/b&gt; is essential for type guards and has been presented in a &lt;a href=&quot;https://n4js.blogspot.com/2018/08/control-flow-graphs-in-n4js_29.html&quot;&gt;previous post&lt;/a&gt;. Based upon this information, type information for each variable access is computed. Since also complicated data flows are handled correctly, such as in &lt;span&gt;for&lt;/span&gt; loops or &lt;a href=&quot;https://n4js.blogspot.com/2018/10/short-circuit-evaluation-in-n4js_17.html&quot;&gt;short circuit evaluation&lt;/a&gt;, type guard information is already available in composed condition expressions (see function &lt;span&gt;f3&lt;/span&gt; and &lt;span&gt;f5&lt;/span&gt; above). Aside from being able to nest &lt;span&gt;instanceof&lt;/span&gt; type guards (see function &lt;span&gt;f4&lt;/span&gt; above), they also can be used as a filter at the beginning of a function (see function &lt;span&gt;f6&lt;/span&gt; above) or inside a loop: Negating a type guard and then exiting the function or block leaves helpful valid type guard information on all the remaining control flow paths.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;by Marcus Mews&lt;/span&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 30 Sep 2019 08:06:18 +0000</pubDate>
	<author>noreply@blogger.com (n4js dev)</author>
</item>
<item>
	<title>EclipseCon Europe 2019: Team Sports for Developers! Edge Computing Mini-Hackathon</title>
	<guid isPermaLink="false">2246 at https://www.eclipsecon.org</guid>
	<link>https://www.eclipsecon.org/europe2019/news/team-sports-developers-edge-computing-mini-hackathon</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Do you like to build gadgets and/or hack? Then get a team together for the &lt;a href=&quot;https://www.eclipsecon.org/europe2019/hackathon&quot; target=&quot;_blank&quot;&gt;Edge Computing Mini-Hackathon&lt;/a&gt;, organized by Edgeworx.&lt;/p&gt;

&lt;p&gt;Teams will be challenged to integrate at least one other Eclipse IoT project with Eclipse ioFog and showcase what they were able to accomplish. Representatives from all Eclipse projects are welcome to come help guide, coach, and influence participants to make use of their projects. There will be prizes for the standouts, plus giveaways (and fun) for all!&lt;/p&gt;

&lt;p&gt;The event is part of Community Night on Tuesday, October 22, from 19:30 - 22:00 in the Theater Stage room at the Forum.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2019/news/team-sports-developers-edge-computing-mini-hackathon&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/raspberry_pi.jpg?itok=Kv6nTVKk&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 26 Sep 2019 21:21:28 +0000</pubDate>
</item>
<item>
	<title>Wim Jongman: Blocked by an Eclipse Wizard?</title>
	<guid isPermaLink="false">623 at https://remainsoftware.com</guid>
	<link>https://remainsoftware.com/blog/blocked-eclipse-wizard</link>
	<description>&lt;span class=&quot;datestamp&quot;&gt;
      &lt;span class=&quot;date-display-single&quot;&gt;Tuesday, September 24, 2019&lt;/span&gt;  &lt;/span&gt;
        &lt;div class=&quot;field-item even&quot;&gt;
      There is a small but very useful patch in Eclipse 4.12 for people that do not want the UI to be blocked by wizards. There are many cases where it is desired that the underlying window can be reached WHILE the user is finishing the wizard.  That's why it's strange that the Eclipse Wizard demands from us to always have full and utter attention.      &lt;p class=&quot;clearfix&quot;&gt;&lt;a href=&quot;https://remainsoftware.com/node/623&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;</description>
	<pubDate>Tue, 24 Sep 2019 08:53:59 +0000</pubDate>
</item>
<item>
	<title>Niko Stotz: How to Render a (Hierarchical) Tree in Asciidoctor</title>
	<guid isPermaLink="false">https://www.nikostotz.de/blog/?p=443</guid>
	<link>https://www.nikostotz.de/blog/how-to-render-a-hierarchical-tree-in-asciidoctor/</link>
	<description>&lt;p&gt;Showing a hierarchical tree, like a file system directory tree, in Asciidoctor is surprisingly hard. We use PlantUML to render the tree on all common platforms.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img alt=&quot;Example of rendered hierarchical tree&quot; class=&quot;wp-image-444&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2019/09/tree-in-asciidoctor.png&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;This tree is rendered from the following code:&lt;/p&gt;




&lt;div class=&quot;codecolorer-container text default&quot; style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;div&gt;1&lt;br /&gt;2&lt;br /&gt;3&lt;br /&gt;4&lt;br /&gt;5&lt;br /&gt;6&lt;br /&gt;7&lt;br /&gt;8&lt;br /&gt;9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div class=&quot;text codecolorer&quot;&gt;[plantuml, format=svg, opts=&quot;inline&quot;]&lt;br /&gt;
----&lt;br /&gt;
skinparam Legend {&lt;br /&gt;
    BackgroundColor transparent&lt;br /&gt;
    BorderColor transparent&lt;br /&gt;
    FontName &quot;Noto Serif&quot;, &quot;DejaVu Serif&quot;, serif&lt;br /&gt;
    FontSize 17&lt;br /&gt;
}&lt;br /&gt;
legend&lt;br /&gt;
Root&lt;br /&gt;
|_ Element 1&lt;br /&gt;
  |_ Element 1.1&lt;br /&gt;
  |_ Element 1.2&lt;br /&gt;
|_ Element 2&lt;br /&gt;
  |_ Element 2.1&lt;br /&gt;
end legend&lt;br /&gt;
----&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;It works on all Asciidoctor implementations that support &lt;tt&gt;asciidoctor-diagram&lt;/tt&gt; and renders well in both HTML and PDF. Readers can select the text (i.e. it’s not an image), and we don’t need to ship additional files.&lt;/p&gt;



&lt;p&gt;We might want to externalize the boilerplate:&lt;/p&gt;




&lt;div class=&quot;codecolorer-container text default&quot; style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;div&gt;1&lt;br /&gt;2&lt;br /&gt;3&lt;br /&gt;4&lt;br /&gt;5&lt;br /&gt;6&lt;br /&gt;7&lt;br /&gt;8&lt;br /&gt;9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div class=&quot;text codecolorer&quot;&gt;[plantuml, format=svg, opts=&quot;inline&quot;]&lt;br /&gt;
----&lt;br /&gt;
!include asciidoctor-style.iuml&lt;br /&gt;
legend&lt;br /&gt;
Root&lt;br /&gt;
|_ Element 1&lt;br /&gt;
  |_ Element 1.1&lt;br /&gt;
  |_ Element 1.2&lt;br /&gt;
|_ Element 2&lt;br /&gt;
  |_ Element 2.1&lt;br /&gt;
end legend&lt;br /&gt;
----&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;




&lt;i&gt;asciidoctor-style.iuml&lt;/i&gt;

&lt;div class=&quot;codecolorer-container text default&quot; style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;div&gt;1&lt;br /&gt;2&lt;br /&gt;3&lt;br /&gt;4&lt;br /&gt;5&lt;br /&gt;6&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div class=&quot;text codecolorer&quot;&gt;skinparam Legend {&lt;br /&gt;
    BackgroundColor transparent&lt;br /&gt;
    BorderColor transparent&lt;br /&gt;
    FontName &quot;Noto Serif&quot;, &quot;DejaVu Serif&quot;, serif&lt;br /&gt;
    FontSize 17&lt;br /&gt;
}&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;Thanks to &lt;a href=&quot;https://forum.plantuml.net/10200/dont-require-dot-for-shapeless-diagrams-and-svg-output&quot;&gt;PlantUML’s impressive reaction time&lt;/a&gt;, we soon won’t even need Graphviz installed.&lt;/p&gt;



&lt;p&gt;Please find all details in the &lt;a href=&quot;https://github.com/enikao/asciidoctor-tree&quot;&gt;example repository&lt;/a&gt; and &lt;a href=&quot;https://nikostotz.de/blog/tree-in-asciidoctor.html&quot;&gt;example HTML&lt;/a&gt; / &lt;a href=&quot;https://nikostotz.de/blog/tree-in-asciidoctor.pdf&quot;&gt;example PDF&lt;/a&gt; rendering.&lt;/p&gt;</description>
	<pubDate>Sat, 21 Sep 2019 15:16:27 +0000</pubDate>
        <enclosure url="https://www.nikostotz.de/blog/wp-content/uploads/2019/09/tree-in-asciidoctor.png" length="2854" type="image/png"/>
</item>

</channel>
</rss>
